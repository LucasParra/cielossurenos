{"version":3,"sources":["state/querys/Users.js","state/querys/Tasks.js","state/querys/Product.js","state/querys/Zones.js","state/querys/Charges.js","state/querys/Office.js","components/Tables/TechniciansTable.js","state/querys/Address.js","../node_modules/rut.js/index.js","views/base/cards/UserInfo.js","views/pages/user/Client.js"],"names":["getTechnicians","supabase","from","select","eq","then","snapshot","data","catch","console","error","getUserByRut","rut","getUserByEmail","email","createUser","userData","insert","ID","createUserAddress","userAddressData","createUserProduct","userProductData","updateUserID","update","updateUserAddress","updateUserProduct","getUserByID","getUsersClients","limit","value","ilike","getClientsCount","stateID","nameState","count","name","getClientsCountOffice","officeID","createUserFinishTask","user","products","address","newUserID","Promise","all","map","product","UserID","createTask","TypeID","AssignedID","TechnicianID","ClientID","createClientOffice","addres","createAddress","newaddressID","AddressID","updateUserFinishTask","updateOfficeToClient","updateAddress","getUserBySearch","textSearch","or","unsubscribedProcessUser","ZoneID","getTechnicalZone","result","technical","_","random","length","StateID","User","subscribedProcessUser","getUserStates","require","taskData","Priority","log","getTypesTasks","getTaskByUserID","order","ascending","updateTask","getLastTaskByUserID","finishTaskPending","TaskID","finishTaskProcessUnSubscribe","createTaskforAdmin","addressZoneID","task","getAdminZone","response","getCommentsTask","createCommentTask","commentData","getStateTask","getProducts","getProductByIDUser","countProductUsed","productID","createZone","updateZone","getZones","getAddressNames","AddressName","getCharges","createCharge","chargesData","deleteCharge","delete","match","updateCharge","chargeAutomatic","productSnapshot","ChargeTypeID","CreatedAt","moment","toDate","Charge","reduce","previousValue","currentValue","Product","BasePrice","State","Remaining","getChargeUserID","getAllChargeUserID","createPay","UrlImage","DocumentData","DocumentID","id","UrlDocument","urlPublicView","createTypeCharge","dataCharge","getTypeCharge","updateChargeType","deleteChargeType","countChargeAssigned","createOffice","updateOffice","OfficeID","getOffices","getOfficesToUserID","deleteOffice","TechniciansTable","setTechnicianID","isAllData","useState","technicians","setTechnicians","loading","setLoading","techniciansEffect","techniciansApi","technician","nombre","Names","apellido","LastName","useEffect","items","fields","itemsPerPage","onPageChange","pagination","scopedSlots","opciones","item","className","col","xs","sm","md","variant","color","checked","onChange","addressData","getAddressByUserID","clean","replace","toUpperCase","module","exports","validate","test","t","parseInt","slice","m","s","Math","floor","format","substr","i","getCheckDigit","input","Array","Number","includes","NaN","Error","checkDigit","reverse","accumulator","index","toString","UserInfo","goBack","charges","tasks","step","setStep","types","setTypes","modalTechnicians","setModalTechnicians","Note","taskForm","setTaskForm","componentDidMount","onClick","component","active","style","cursor","filter","charge","Intl","NumberFormat","currency","Name","ProductID","lg","custom","size","target","type","marginBottom","paddingTop","show","onClose","closeButton","Client","setRut","setUser","setCharges","setTasks","setProducts","textAlign","maxLength","userID"],"mappings":"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","file":"static/js/11.12dd46dc.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport { supabase } from \"src/config/configSupabase\";\nimport { createAddress, updateAddress } from \"./Address\";\nimport { createClientOffice, updateOfficeToClient } from \"./Office\";\nimport { createTask } from \"./Tasks\";\nimport { getTechnicalZone } from \"./Zones\";\n\nconst getTechnicians = () =>\n  supabase\n    .from(\"User\")\n    .select(\"*\")\n    .eq(\"RolID\", 1)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst getUserByRut = (rut) =>\n  supabase\n    .from(\"User\")\n    .select(\"*\")\n    .eq(\"Rut\", rut)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst getUserByEmail = (email) =>\n  supabase\n    .from(\"User\")\n    .select(\"*,RolID(*),ZoneID:UserAddress(AddressID(AddressZoneID))\")\n    .eq(\"Email\", email)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst createUser = (userData) =>\n  supabase\n    .from(\"User\")\n    .insert(userData)\n    .then((snapshot) => snapshot.data[0].ID);\n\nconst createUserAddress = (userAddressData) =>\n  supabase\n    .from(\"UserAddress\")\n    .insert(userAddressData)\n    .then((snapshot) => snapshot.data[0].ID);\n\nconst createUserProduct = (userProductData) =>\n  supabase\n    .from(\"UserProduct\")\n    .insert(userProductData)\n    .then((snapshot) => snapshot.data[0].ID);\n\nconst updateUserID = (userData) =>\n  supabase.from(\"User\").update(userData).eq(\"ID\", userData.ID);\n\nconst updateUserAddress = (userAddressData) =>\n  supabase\n    .from(\"UserAddress\")\n    .update(userAddressData)\n    .eq(\"ID\", userAddressData.ID);\n\nconst updateUserProduct = (userProductData) =>\n  supabase\n    .from(\"UserProduct\")\n    .update(userProductData)\n    .eq(\"ID\", userProductData.ID);\n\nconst getUserByID = (ID) =>\n  supabase\n    .from(\"User\")\n    .select(\"*,UserAddress!inner(Address(*,AddressZoneID(*)))\")\n    .eq(\"ID\", ID)\n    .then((snapshot) => snapshot.data[0])\n    .catch(console.error);\n\nconst queryUserToClient = () =>\n  supabase\n    .from(\"User\")\n    .select(\"*\")\n    .range(0, 1000)\n    .is(\"RolID\", null)\n    .then((snapshot) => {\n      console.log(snapshot.data);\n    });\nconst getClients = (limit) =>\n  supabase\n    .from(\"User\")\n    .select(\"*\")\n    .eq(\"RolID\", 2)\n    .limit(limit * 5 + 1)\n    .then(({ data }) => data)\n    .catch(console.error);\n\nconst getUsersClients = (limit, value) =>\n  supabase\n    .from(\"User\")\n    .select(\"*\")\n    .eq(\"RolID\", 2)\n    .ilike(\"Rut\", `%${value}%`)\n    .limit(limit * 5 + 1)\n    .then(({ data }) => data)\n    .catch(console.error);\n\nconst getClientsCount = (stateID, nameState) =>\n  supabase\n    .from(\"User\")\n    .select(\"*\", { count: \"exact\" })\n    .eq(\"RolID\", 2)\n    .eq(\"StateID\", stateID)\n    .then(({ count }) => ({ count, name: nameState, stateID }))\n    .catch(console.error);\n\nconst getClientsCountOffice = (officeID, stateID) =>\n  supabase\n    .from(\"OfficeUser\")\n    .select(\"User!inner(*),Office!inner(*)\", { count: \"exact\" })\n    .eq(\"User.RolID\", 2)\n    .eq(\"User.StateID\", stateID)\n    .eq(\"Office.ID\", officeID)\n    .then(({ count }) => count)\n    .catch(console.error);\n\nconst createUserFinishTask = (user, products, address, officeID) => {\n  createUser(user).then((newUserID) => {\n    Promise.all([\n      products.map((product) =>\n        createUserProduct({ ...product, UserID: newUserID })\n      ),\n      createTask({\n        TypeID: 1,\n        AssignedID: user.TechnicianID,\n        ClientID: newUserID,\n      }),\n      createClientOffice(newUserID, officeID),\n      address.map((addres) =>\n        createAddress(addres).then((newaddressID) => {\n          createUserAddress({\n            AddressID: newaddressID,\n            UserID: newUserID,\n          });\n        })\n      ),\n    ]);\n  });\n};\nconst updateUserFinishTask = (user, products, address, officeID) =>\n  updateUserID(user).then(() => {\n    Promise.all([\n      products.map((product) =>\n        product.ID\n          ? updateUserProduct({ ...product, UserID: user.ID })\n          : createUserProduct({ ...product, UserID: user.ID })\n      ),\n      updateOfficeToClient(user.ID, officeID),\n      address.map((addres) =>\n        addres.ID\n          ? updateAddress(addres).then((newaddressID) => {\n              updateUserAddress({\n                AddressID: newaddressID,\n                UserID: user.ID,\n              });\n            })\n          : createAddress(addres).then((newaddressID) => {\n              createUserAddress({\n                AddressID: newaddressID,\n                UserID: user.ID,\n              });\n            })\n      ),\n    ]);\n  });\n\nconst getUserBySearch = (textSearch, limit = 1) =>\n  supabase\n    .from(\"User\")\n    .select(\"*,Address(*)\")\n    .or(\n      `Names.ilike.%${textSearch}%,LastName.ilike.%${textSearch}%,Rut.ilike.%${textSearch}%`\n    )\n    .eq(\"RolID\", 2)\n    .limit(limit * 5 + 1)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst unsubscribedProcessUser = (UserID, ZoneID) =>\n  getTechnicalZone(ZoneID).then((result) => {\n    const technical = result[_.random(0, result.length - 1)];\n    updateUserID({ ID: UserID, StateID: 5 }).then(() => {\n      createTask({\n        TypeID: 16,\n        AssignedID: technical.User.ID,\n        ClientID: UserID,\n        StateID: 3,\n      });\n    });\n  });\n\nconst subscribedProcessUser = (UserID, ZoneID) =>\n  getTechnicalZone(ZoneID).then((result) => {\n    const technical = result[_.random(0, result.length - 1)];\n    updateUserID({ ID: UserID, StateID: 6 }).then(() => {\n      createTask({\n        TypeID: 17,\n        AssignedID: technical.User.ID,\n        ClientID: UserID,\n        StateID: 3,\n      });\n    });\n  });\n\nconst getUserStates = () =>\n  supabase\n    .from(\"UserState\")\n    .select(\"*\")\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nexport {\n  getTechnicians,\n  createUser,\n  createUserAddress,\n  createUserProduct,\n  getUserByRut,\n  updateUserID,\n  updateUserProduct,\n  updateUserAddress,\n  getUserByID,\n  queryUserToClient,\n  getClients,\n  getUserByEmail,\n  getClientsCount,\n  getClientsCountOffice,\n  createUserFinishTask,\n  updateUserFinishTask,\n  getUsersClients,\n  getUserBySearch,\n  unsubscribedProcessUser,\n  subscribedProcessUser,\n  getUserStates,\n};\n","import { getAdminZone } from \"./Zones\";\n\nconst { supabase } = require(\"src/config/configSupabase\");\n\nconst createTask = (taskData) =>\n  supabase\n    .from(\"Task\")\n    .insert({ ...taskData, Priority: \"Media\" })\n    .then((snapshot) => console.log(snapshot));\n\nconst getTypesTasks = () =>\n  supabase\n    .from(\"TaskType\")\n    .select(\"*\")\n    .then(({ data }) => data);\n\nconst getTaskByUserID = (UserID) =>\n  supabase\n    .from(\"Task\")\n    .select(\"*,TypeID(Name)\")\n    .order(\"ID\", { ascending: false })\n    .eq(\"ClientID\", UserID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst updateTask = (updateTask) =>\n  supabase.from(\"Task\").update(updateTask).eq(\"ID\", updateTask.ID);\n\nconst getLastTaskByUserID = (UserID) =>\n  supabase\n    .from(\"Task\")\n    .select(\"*\")\n    .order(\"ID\", { ascending: false })\n    .eq(\"ClientID\", UserID)\n    .or(\"StateID.eq.1,StateID.eq.3,TypeID.eq.4\")\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst finishTaskPending = (TaskID) =>\n  supabase\n    .from(\"Task\")\n    .update({ StateID: 2 })\n    .eq(\"ID\", TaskID)\n    .then((snapshot) => snapshot.data[0].ID);\n\nconst getTaskPending = () =>\n  supabase\n    .from(\"Task\")\n    .select(\"*, ClientID(*),TypeID(Name)\")\n    .eq(\"StateID\", 1)\n    .then((snapshot) => snapshot.data);\n\nconst finishTaskProcessUnSubscribe = (UserID) =>\n  supabase\n    .from(\"Task\")\n    .update({ StateID: 2 })\n    .eq(\"StateID\", 3)\n    .eq(\"ClientID.ID\", UserID)\n    .eq(\"TypeID.ID\", 16)\n    .then((snapshot) => snapshot.data);\n\nconst createTaskforAdmin = (addressZoneID, task) =>\n  getAdminZone(addressZoneID).then((response) =>\n    createTask({ ...task, AssignedID: response[0].User.ID, StateID: 3 })\n  );\n\nconst getCommentsTask = (TaskID) =>\n  supabase\n    .from(\"TaskComments\")\n    .select(\"*,UserID(Names,LastName)\")\n    .eq(\"TaskID\", TaskID)\n    .then((snapshot) => snapshot.data);\n\nconst createCommentTask = (commentData) =>\n  supabase\n    .from(\"TaskComments\")\n    .insert(commentData)\n    .then((snapshot) => snapshot?.data[0]?.ID);\n\nconst getStateTask = () =>\n  supabase\n    .from(\"TaskState\")\n    .select(\"*,Task!inner(*)\")\n    .then((snapshot) => snapshot.data);\n\nexport {\n  createTask,\n  getTypesTasks,\n  getTaskByUserID,\n  updateTask,\n  getLastTaskByUserID,\n  finishTaskPending,\n  getTaskPending,\n  createTaskforAdmin,\n  finishTaskProcessUnSubscribe,\n  getCommentsTask,\n  createCommentTask,\n  getStateTask,\n};\n","import { supabase } from \"src/config/configSupabase\";\n\nconst getProducts = (limit) =>\n  supabase\n    .from(\"Product\")\n    .select(\"*\")\n    .limit(limit * 5 + 1)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst getProductByIDUser = (UserID) =>\n  supabase\n    .from(\"UserProduct\")\n    .select(\"*,ProductID(*)\")\n    .eq(\"UserID\", UserID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst countProductUsed = (productID) =>\n  supabase\n    .from(\"UserProduct\")\n    .select(\"*\", { count: \"exact\" })\n    .eq(\"ProductID\", productID)\n    .then(({ count }) => count);\n\nexport { getProducts, getProductByIDUser, countProductUsed };\n","const { supabase } = require(\"src/config/configSupabase\");\n\nconst createZone = (data) =>\n  supabase\n    .from(\"Zones\")\n    .insert(data)\n    .then((snapshot) => snapshot.data[0].ID);\n\nconst updateZone = (ID, data) =>\n  supabase.from(\"Zones\").update(data).eq(\"ID\", ID);\n\nconst getZones = () =>\n  supabase\n    .from(\"Zones\")\n    .select(\"*\")\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst getAdminZone = (ZoneID) =>\n  supabase\n    .from(\"UserAddress\")\n    .select(\"User!inner(*),Address!inner(*)\")\n    .eq(\"User.RolID\", 8)\n    .eq(\"Address.AddressZoneID\", ZoneID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst getTechnicalZone = (ZoneID) =>\n  supabase\n    .from(\"UserAddress\")\n    .select(\"User!inner(*),Address!inner(*)\")\n    .eq(\"User.RolID\", 1)\n    .eq(\"Address.AddressZoneID\", ZoneID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst getAddressNames = (AddressName) =>\n  supabase\n    .from(\"UserAddress\")\n    .select(\"User!inner(*),Address!inner(*)\")\n    .eq(\"User.RolID\", 2)\n    .ilike(\"Address.AddressName\", `%${AddressName}%`)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nexport {\n  createZone,\n  updateZone,\n  getZones,\n  getAdminZone,\n  getTechnicalZone,\n  getAddressNames,\n};\n","import moment from \"moment\";\n\nconst { supabase } = require(\"src/config/configSupabase\");\n\nconst getCharges = (limit) =>\n  supabase\n    .from(\"ChargeType\")\n    .select(\"*\")\n    .limit(limit * 5 + 1)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst createCharge = (chargesData) =>\n  supabase\n    .from(\"Charge\")\n    .insert(chargesData)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst deleteCharge = (ID) =>\n  supabase\n    .from(\"Charge\")\n    .delete()\n    .match({ ID })\n    .then((snapshot) => snapshot.data);\n\nconst updateCharge = (chargesData, ID) =>\n  supabase\n    .from(\"Charge\")\n    .update(chargesData)\n    .eq(\"ID\", ID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst chargeAutomatic = () =>\n  supabase\n    .from(\"User\")\n    .select(\"*\")\n    .eq(\"RolID\", 2)\n    .then((snapshot) => {\n      const users = snapshot.data;\n      users.map((user) =>\n        supabase\n          .from(\"UserProduct\")\n          .select(\"Product(*),ID,Price\")\n          .eq(\"UserID\", user.ID)\n          .then((productSnapshot) => {\n            const products = productSnapshot.data;\n            if (products.length === 0) return null;\n\n            return createCharge({\n              ChargeTypeID: 7,\n              CreatedAt: moment().toDate(),\n              Charge: products.reduce(\n                (previousValue, currentValue) =>\n                  previousValue + currentValue.Product.BasePrice,\n                0\n              ),\n              ClientID: user.ID,\n              State: false,\n              Remaining: 0,\n            });\n          })\n      );\n    })\n    .catch(console.error);\n\nconst getChargeUserID = (UserID) =>\n  supabase\n    .from(\"Charge\")\n    .select(\"*,ChargeTypeID(*)\")\n    .eq(\"ClientID\", UserID)\n    .eq(\"State\", false)\n    .then(({ data }) => data);\n\nconst getAllChargeUserID = (UserID) =>\n  supabase\n    .from(\"Charge\")\n    .select(\"*,ChargeTypeID(*)\")\n    .eq(\"ClientID\", UserID)\n    .order(\"CreatedAt\", { ascending: true })\n    .then((snapshot) => snapshot.data);\n\nconst createPay = (ID, UrlImage, DocumentData) =>\n  supabase\n    .from(\"Charge\")\n    .update({\n      State: true,\n      UrlImage,\n      DocumentID: DocumentData.id,\n      UrlDocument: DocumentData.urlPublicView,\n    })\n    .eq(\"ID\", ID)\n    .then((snapshot) => snapshot.data);\n\nconst createTypeCharge = (dataCharge) =>\n  supabase\n    .from(\"ChargeType\")\n    .insert(dataCharge)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst getTypeCharge = () =>\n  supabase\n    .from(\"ChargeType\")\n    .select(\"*\")\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst updateChargeType = (ID, data) =>\n  supabase.from(\"ChargeType\").update(data).eq(\"ID\", ID);\n\nconst deleteChargeType = (ID) =>\n  supabase\n    .from(\"ChargeType\")\n    .delete()\n    .match({ ID })\n    .then((snapshot) => snapshot.data);\n\nconst countChargeAssigned = (ChargeTypeID) =>\n  supabase\n    .from(\"Charge\")\n    .select(\"*\", { count: \"exact\" })\n    .eq(\"ChargeTypeID\", ChargeTypeID)\n    .then(({ count }) => count);\n\nexport {\n  createCharge,\n  deleteCharge,\n  updateCharge,\n  chargeAutomatic,\n  getChargeUserID,\n  getAllChargeUserID,\n  createPay,\n  createTypeCharge,\n  updateChargeType,\n  getTypeCharge,\n  getCharges,\n  deleteChargeType,\n  countChargeAssigned,\n};\n","const { supabase } = require(\"src/config/configSupabase\");\n\nconst createOffice = (data) =>\n  supabase\n    .from(\"Office\")\n    .insert(data)\n    .then((snapshot) => snapshot.data[0].ID);\n\nconst updateOffice = (ID, data) =>\n  supabase.from(\"Office\").update(data).eq(\"ID\", ID);\n\nconst updateOfficeToClient = (UserID, officeID) =>\n  supabase\n    .from(\"OfficeUser\")\n    .update({ OfficeID: officeID })\n    .eq(\"UserID\", UserID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst createClientOffice = (UserID, OfficeID) =>\n  supabase\n    .from(\"OfficeUser\")\n    .insert({ OfficeID, UserID })\n    .then((snapshot) => snapshot.data[0].ID);\n\nconst getOffices = (limit = 1) =>\n  supabase\n    .from(\"Office\")\n    .select(\"*\")\n    .limit(limit * 5 + 1)\n    .then((snapshot) => snapshot.data);\n\nconst getOfficesToUserID = (UserID) =>\n  supabase\n    .from(\"OfficeUser\")\n    .select(\"*,OfficeID(*)\")\n    .eq(\"UserID\", UserID)\n    .then((snapshot) => snapshot.data[0]);\n\nconst deleteOffice = (ID) => supabase.from(\"Office\").delete().match({ ID });\n\nexport {\n  createOffice,\n  updateOffice,\n  createClientOffice,\n  getOffices,\n  updateOfficeToClient,\n  getOfficesToUserID,\n  deleteOffice,\n};\n","import React, { useEffect, useState } from \"react\";\nimport { CCol, CDataTable, CRow, CSwitch } from \"@coreui/react\";\nimport { getTechnicians } from \"src/state/querys/Users\";\n\nconst TechniciansTable = ({ setTechnicianID, TechnicianID, isAllData }) => {\n  const [technicians, setTechnicians] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const fields = [\"nombre\", \"apellido\", \"opciones\"];\n  const techniciansEffect = () => {\n    setLoading(true);\n    getTechnicians().then((techniciansApi) => {\n      setTechnicians(\n        techniciansApi.map((technician) => ({\n          ...technician,\n          nombre: technician.Names,\n          apellido: technician.LastName,\n        }))\n      );\n      setLoading(false);\n    });\n  };\n\n  useEffect(techniciansEffect, []);\n  return (\n    <CDataTable\n      items={technicians}\n      fields={fields}\n      itemsPerPage={5}\n      onPageChange={techniciansEffect}\n      loading={loading}\n      pagination\n      scopedSlots={{\n        opciones: (item) => (\n          <td className=\"py-2\">\n            <CRow className=\"align-items-center\" key={item.ID}>\n              <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n                <CSwitch\n                  className={\"mx-1\"}\n                  variant={\"3d\"}\n                  color={\"success\"}\n                  value={\n                    isAllData\n                      ? TechnicianID?.ID === item.ID\n                      : TechnicianID === item.ID\n                  }\n                  checked={\n                    isAllData\n                      ? TechnicianID?.ID === item.ID\n                      : TechnicianID === item.ID\n                  }\n                  onChange={() => setTechnicianID(isAllData ? item : item.ID)}\n                />\n              </CCol>\n            </CRow>\n          </td>\n        ),\n      }}\n    />\n  );\n};\n\nexport default TechniciansTable;\n","import { supabase } from \"src/config/configSupabase\";\n\nconst createAddress = (addressData) =>\n  supabase\n    .from(\"Address\")\n    .insert(addressData)\n    .then((snapshot) => snapshot.data[0].ID);\n\nconst updateAddress = (addressData) =>\n  supabase.from(\"Address\").update(addressData).eq(\"ID\", addressData.ID);\n\nconst getAddressByUserID = (UserID) =>\n  supabase\n    .from(\"UserAddress\")\n    .select(\"*,Address (*)\")\n    .eq(\"UserID\", UserID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nexport { createAddress, getAddressByUserID, updateAddress };\n","function clean (rut) {\n  return typeof rut === 'string'\n    ? rut.replace(/^0+|[^0-9kK]+/g, '').toUpperCase()\n    : ''\n}\n\nfunction validate (rut) {\n  if (typeof rut !== 'string') {\n    return false\n  }\n\n  // if it starts with 0 we return false\n  // so a rut like 00000000-0 will not pass\n  if (/^0+/.test(rut)) {\n    return false\n  }\n\n  if (!/^0*(\\d{1,3}(\\.?\\d{3})*)-?([\\dkK])$/.test(rut)) {\n    return false\n  }\n\n  rut = clean(rut)\n\n  let t = parseInt(rut.slice(0, -1), 10)\n  let m = 0\n  let s = 1\n\n  while (t > 0) {\n    s = (s + (t % 10) * (9 - (m++ % 6))) % 11\n    t = Math.floor(t / 10)\n  }\n\n  const v = s > 0 ? '' + (s - 1) : 'K'\n  return v === rut.slice(-1)\n}\n\nfunction format (rut) {\n  rut = clean(rut)\n\n  let result = rut.slice(-4, -1) + '-' + rut.substr(rut.length - 1)\n  for (let i = 4; i < rut.length; i += 3) {\n    result = rut.slice(-3 - i, -i) + '.' + result\n  }\n\n  return result\n}\n\nfunction getCheckDigit (input) {\n  const rut = Array.from(clean(input), Number)\n\n  if (rut.length === 0 || rut.includes(NaN)) {\n    throw new Error(`\"${input}\" as RUT is invalid`)\n  }\n\n  const modulus = 11\n  const initialValue = 0\n  const sumResult = rut\n    .reverse()\n    .reduce(\n      (accumulator, currentValue, index) =>\n        accumulator + currentValue * ((index % 6) + 2),\n      initialValue\n    )\n\n  const checkDigit = modulus - (sumResult % modulus)\n\n  if (checkDigit === 10) {\n    return 'K'\n  } else if (checkDigit === 11) {\n    return '0'\n  } else {\n    return checkDigit.toString()\n  }\n}\n\nmodule.exports = { validate, clean, format, getCheckDigit }\n","import {\n  CButton,\n  CCallout,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CListGroup,\n  CListGroupItem,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n  CSelect,\n  CTextarea,\n} from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { createTask, getTypesTasks } from \"src/state/querys/Tasks\";\nimport TechniciansTable from \"src/components/Tables/TechniciansTable\";\n\nconst UserInfo = ({ goBack, user, charges, tasks, products }) => {\n  const [step, setStep] = useState(\"Charges\");\n  const [types, setTypes] = useState([]);\n  const [modalTechnicians, setModalTechnicians] = useState(false);\n  const [taskForm, setTaskForm] = useState({\n    TypeID: \"\",\n    AssignedID: \"\",\n    ClientID: user.ID,\n    Note: \"\",\n    StateID: 1,\n  });\n\n  const componentDidMount = () => {\n    getTypesTasks().then(setTypes);\n  };\n  useEffect(componentDidMount, []);\n  return (\n    <CContainer>\n      <CRow className=\"justify-content-center\">\n        <CCol md=\"12\">\n          <CButton color=\"info\" onClick={goBack}>\n            Volver\n          </CButton>\n          <span className=\"clearfix\">\n            <h4 className=\"pt-3\">{`${user?.Names} ${user?.LastName}`}</h4>\n          </span>\n        </CCol>\n        <CCol md=\"3\">\n          <CListGroup>\n            <CListGroupItem\n              component=\"button\"\n              active={step === \"Charges\"}\n              style={{ cursor: \"pointer\" }}\n              onClick={() => setStep(\"Charges\")}\n            >\n              Deudas\n            </CListGroupItem>\n            <CListGroupItem\n              component=\"button\"\n              active={step === \"Payment\"}\n              style={{ cursor: \"pointer\" }}\n              onClick={() => setStep(\"Payment\")}\n            >\n              Ultimos Pagos\n            </CListGroupItem>\n            {products.length !== 0 && (\n              <CListGroupItem\n                component=\"button\"\n                active={step === \"Tasks\"}\n                style={{ cursor: \"pointer\" }}\n                onClick={() => setStep(\"Tasks\")}\n              >\n                Estado de Tarea de tecnico\n              </CListGroupItem>\n            )}\n            <CListGroupItem\n              component=\"button\"\n              active={step === \"Products\"}\n              style={{ cursor: \"pointer\" }}\n              onClick={() => setStep(\"Products\")}\n            >\n              Productos Contratados\n            </CListGroupItem>\n            <CListGroupItem\n              component=\"button\"\n              active={step === \"CreateTask\"}\n              style={{ cursor: \"pointer\" }}\n              onClick={() => setStep(\"CreateTask\")}\n            >\n              Crear Tareas\n            </CListGroupItem>\n          </CListGroup>\n        </CCol>\n        <CCol>\n          <CCard>\n            <CCardBody>\n              {(step === \"Charges\" || step === \"Payment\") && (\n                <>\n                  {charges\n                    .filter((charge) =>\n                      step === \"Charges\" ? !charge.State : charge.State\n                    )\n                    .map((charge) => (\n                      <CCallout\n                        color={step === \"Charges\" ? \"danger\" : \"success\"}\n                        key={charge.ID}\n                      >\n                        <span className=\"clearfix\">\n                          <h4 className=\"pt-1\">{`${new Intl.NumberFormat(\n                            \"es-CL\",\n                            {\n                              currency: \"CLP\",\n                              style: \"currency\",\n                            }\n                          ).format(charge.Charge)}`}</h4>\n                          <h3 className=\"pt-1\">{`${charge.ChargeTypeID.Name}`}</h3>\n                          <h5 className=\"pt-1\">{`Fecha : ${moment(\n                            charge.CreatedAt\n                          ).format(\"DD-MM-YYYY\")}`}</h5>\n                        </span>\n                      </CCallout>\n                    ))}\n                  {charges.filter((charge) =>\n                    step === \"Charges\" ? !charge.State : charge.State\n                  ).length === 0 && <h4 className=\"pt-1\">Estás al día</h4>}\n                </>\n              )}\n\n              {step === \"Tasks\" &&\n                tasks\n                  .filter((task) => task.StateID !== 3)\n                  .map((task) => (\n                    <CCallout\n                      color={task.StateID === 1 ? \"info\" : \"success\"}\n                      key={task.ID}\n                    >\n                      <span className=\"clearfix\">\n                        <h4 className=\"pt-1\">{`${task.TypeID.Name}`}</h4>\n                        <h3 className=\"pt-1\">{` Estado : ${\n                          task.StateID === 1 ? \"Pendiente\" : \"Finalizada\"\n                        }`}</h3>\n                        <h5 className=\"pt-1\">{` ID : ${task.ID}`}</h5>\n                      </span>\n                    </CCallout>\n                  ))}\n              {step === \"Products\" &&\n                products.map((product) => (\n                  <CCallout color=\"info\" key={product.ID}>\n                    <span className=\"clearfix\">\n                      <h4 className=\"pt-1\">{`${product.ProductID.Name}`}</h4>\n                    </span>\n                  </CCallout>\n                ))}\n              {step === \"CreateTask\" && (\n                <CRow>\n                  <CCol xs=\"3\" lg=\"3\">\n                    <h4>Tipo</h4>\n                    <CSelect\n                      custom\n                      size=\"xl\"\n                      name=\"DiscountType\"\n                      id=\"DiscountType\"\n                      value={taskForm.TypeID}\n                      onChange={({ target: { value } }) =>\n                        setTaskForm({ ...taskForm, TypeID: parseInt(value) })\n                      }\n                    >\n                      <option value={\"\"}>selecciona un tipo</option>\n                      {types\n                        .filter(({ ID }) => ID < 6)\n                        .map((type) => (\n                          <option key={type.ID} value={type.ID}>\n                            {type.Name}\n                          </option>\n                        ))}\n                    </CSelect>\n                  </CCol>\n                  <CCol xs=\"3\" lg=\"3\">\n                    <h4>Tecnico Encargado</h4>\n                    <CButton\n                      color=\"info\"\n                      onClick={() => setModalTechnicians(true)}\n                      style={{ marginBottom: 10 }}\n                    >\n                      Tecnico\n                    </CButton>\n                  </CCol>\n                  <CCol xs=\"3\" lg=\"3\">\n                    <h4>Nota (Opcional)</h4>\n                    <CTextarea\n                      id=\"name\"\n                      value={taskForm.Note}\n                      onChange={({ target: { value } }) =>\n                        setTaskForm({ ...taskForm, Note: value })\n                      }\n                    />\n                  </CCol>\n                  <CCol xs=\"3\" lg=\"3\" style={{ paddingTop: 10 }}>\n                    <CButton\n                      color=\"success\"\n                      onClick={() =>\n                        createTask(taskForm).then(() => {\n                          setTaskForm({\n                            TypeID: \"\",\n                            AssignedID: \"\",\n                            ClientID: \"\",\n                            Note: \"\",\n                            StateID: 4,\n                          });\n                          componentDidMount();\n                        })\n                      }\n                      style={{ marginBottom: 10 }}\n                    >\n                      Crear\n                    </CButton>\n                  </CCol>\n                </CRow>\n              )}\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CModal\n        show={modalTechnicians}\n        onClose={setModalTechnicians}\n        color=\"info\"\n      >\n        <CModalHeader closeButton>\n          <CModalTitle>Selecciona el tecnico encargado</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <TechniciansTable\n            setTechnicianID={(value) =>\n              setTaskForm({ ...taskForm, AssignedID: value })\n            }\n            TechnicianID={taskForm.AssignedID}\n          />\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"info\" onClick={() => setModalTechnicians(false)}>\n            Aceptar\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </CContainer>\n  );\n};\n\nexport default UserInfo;\n","import React, { useState } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CContainer,\n  CInput,\n  CInputGroup,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { clean, format } from \"rut.js\";\nimport { getUserByRut } from \"src/state/querys/Users\";\nimport UserInfo from \"src/views/base/cards/UserInfo\";\nimport { getAllChargeUserID } from \"src/state/querys/Charges\";\nimport { getTaskByUserID } from \"src/state/querys/Tasks\";\nimport { getProductByIDUser } from \"src/state/querys/Product\";\n\nconst Client = () => {\n  const [rut, setRut] = useState(\"\");\n  const [user, setUser] = useState({});\n  const [step, setStep] = useState(\"search\");\n  const [charges, setCharges] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [products, setProducts] = useState([]);\n\n  const getUser = () => {\n    getUserByRut(\n      `${clean(rut).substr(0, clean(rut).length - 1)}-${clean(rut).substr(\n        clean(rut).substr(0, clean(rut).length - 1).length,\n        clean(rut).length - 1\n      )}`\n    ).then((response) => {\n      setUser(response[0]);\n      const userID = response[0]?.ID;\n      console.log(\"id del usuario es :\", userID);\n\n      if (!userID) return null;\n      Promise.all([\n        getAllChargeUserID(userID),\n        getTaskByUserID(userID),\n        getProductByIDUser(userID),\n      ]).then((response) => {\n        setCharges(response[0]);\n        setTasks(response[1]);\n        setProducts(response[2]);\n      });\n\n      setStep(\"user\");\n    });\n  };\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          {step === \"search\" ? (\n            <CCol md=\"6\">\n              <span className=\"clearfix\">\n                <h1 className=\"display-3\" style={{ textAlign: \"center\" }}>\n                  bienvenido\n                </h1>\n              </span>\n              <CInputGroup className=\"input-prepend\">\n                <CInputGroupPrepend>\n                  <CInputGroupText>\n                    <CIcon name=\"cil-magnifying-glass\" />\n                  </CInputGroupText>\n                </CInputGroupPrepend>\n                <CInput\n                  size=\"16\"\n                  type=\"text\"\n                  value={format(rut)}\n                  maxLength={12}\n                  onChange={({ target: { value } }) => setRut(value)}\n                />\n                <CInputGroupAppend>\n                  <CButton color=\"info\" onClick={getUser}>\n                    Ingresar\n                  </CButton>\n                </CInputGroupAppend>\n              </CInputGroup>\n            </CCol>\n          ) : (\n            <UserInfo\n              goBack={() => {\n                setRut(\"\");\n                setStep(\"search\");\n              }}\n              user={user}\n              charges={charges}\n              tasks={tasks}\n              products={products}\n            />\n          )}\n        </CRow>\n      </CContainer>\n    </div>\n  );\n};\n\nexport default Client;\n"],"sourceRoot":""}