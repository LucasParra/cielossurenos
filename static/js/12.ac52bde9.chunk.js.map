{"version":3,"sources":["components/buttons/ButtonOptionTable.js","components/buttons/UploadFile.js","state/querys/Product.js","state/querys/Charges.js","components/Tables/SelecteProductsTable.js","components/Modals/SelectProductModal.js","components/Modals/DeleteModal.js","components/Modals/ChargesPayModal.js","utils/colors.js","utils/general.js","components/Tables/ChargesPayTable.js","components/Tables/SelectOfficesTable.js","components/Tables/OfficesTable.js","views/chargePay/ChargesPay.js"],"names":["ButtonOptionTable","onPress","color","icon","className","col","xs","sm","md","onClick","content","size","UploadFile","children","value","onChange","disabled","accept","htmlFor","style","display","id","multiple","type","getProducts","limit","supabase","from","select","then","snapshot","data","catch","console","error","getProductByIDUser","UserID","eq","countProductUsed","productID","count","require","getCharges","createCharge","chargesData","insert","deleteCharge","ID","delete","match","updateCharge","update","chargeAutomatic","map","user","productSnapshot","products","length","ChargeTypeID","CreatedAt","moment","toDate","Charge","reduce","previousValue","currentValue","Product","BasePrice","ClientID","State","Remaining","getChargeUserID","getAllChargeUserID","order","ascending","createPay","UrlImage","DocumentData","DocumentID","UrlDocument","urlPublicView","createTypeCharge","dataCharge","getTypeCharge","updateChargeType","deleteChargeType","countChargeAssigned","SelecteProductsTable","productsSelected","setProductsSelected","useState","setProducts","loading","setLoading","fields","productEffect","productsApi","product","Nombre","Name","Precio","Intl","NumberFormat","currency","format","useEffect","items","itemsPerPage","onPageChange","pagination","scopedSlots","personalizar_precio","item","placeholder","defaultValue","target","ProductID","Price","parseInt","activo","variant","filter","checked","label","name","paddingLeft","customClasses","SelectProductModal","show","setShow","onFinish","onClose","closeButton","DeleteModal","fontWeight","width","textAlign","ChargesPayModal","nameEdit","setName","validated","setValidated","required","colorsChart","nameStateSpanish","stateID","ChargesPayTable","charges","onPressEdit","onPressDeleted","editar","freeSet","cilPencil","eliminar","cilTrash","SelectOfficesTable","setOffice","office","offices","setOffices","officesEffects","getOffices","Offices","officeApi","nombre","opciones","OfficesTable","ChargesPay","colors","useKeySelector","showDeleteModal","setShowDeleteModal","showModalCharge","setShowModalCharge","chargesSelected","setChargesSelected","chargesChart","setChargesChart","setCharges","componentDidMount","Promise","all","result","charge","componentWillUnmount","marginBottom","backgroundColor","primary","lg","datasets","labels","options","tooltips","enabled","handleUpdateCharge"],"mappings":"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","file":"static/js/12.ac52bde9.chunk.js","sourcesContent":["import React from \"react\";\nimport { CButton, CCol, CRow } from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\n\nconst ButtonOptionTable = ({ onPress, color, icon }) => {\n  return (\n    <td className=\"py-2\">\n      <CRow className=\"align-items-center\">\n        <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n          <CButton color={color} onClick={onPress}>\n            <CIcon content={icon} size=\"xl\" />\n          </CButton>\n        </CCol>\n      </CRow>\n    </td>\n  );\n};\n\nexport default ButtonOptionTable;\n","const UploadFile = ({ children, value, onChange, disabled, accept }) => {\n  return (\n    <label htmlFor=\"contained-button-file\" className=\"m-0 w-100\">\n      <input\n        value={value}\n        accept={accept}\n        disabled={disabled}\n        style={{ display: \"none\" }}\n        id=\"contained-button-file\"\n        multiple\n        type=\"file\"\n        onChange={disabled ? () => {} : onChange}\n      />\n      {children}\n    </label>\n  );\n};\n\nexport default UploadFile;\n","import { supabase } from \"src/config/configSupabase\";\n\nconst getProducts = (limit) =>\n  supabase\n    .from(\"Product\")\n    .select(\"*\")\n    .limit(limit * 5 + 1)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst getProductByIDUser = (UserID) =>\n  supabase\n    .from(\"UserProduct\")\n    .select(\"*,ProductID(*)\")\n    .eq(\"UserID\", UserID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst countProductUsed = (productID) =>\n  supabase\n    .from(\"UserProduct\")\n    .select(\"*\", { count: \"exact\" })\n    .eq(\"ProductID\", productID)\n    .then(({ count }) => count);\n\nexport { getProducts, getProductByIDUser, countProductUsed };\n","import moment from \"moment\";\n\nconst { supabase } = require(\"src/config/configSupabase\");\n\nconst getCharges = (limit) =>\n  supabase\n    .from(\"ChargeType\")\n    .select(\"*\")\n    .limit(limit * 5 + 1)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst createCharge = (chargesData) =>\n  supabase\n    .from(\"Charge\")\n    .insert(chargesData)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst deleteCharge = (ID) =>\n  supabase\n    .from(\"Charge\")\n    .delete()\n    .match({ ID })\n    .then((snapshot) => snapshot.data);\n\nconst updateCharge = (chargesData, ID) =>\n  supabase\n    .from(\"Charge\")\n    .update(chargesData)\n    .eq(\"ID\", ID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst chargeAutomatic = () =>\n  supabase\n    .from(\"User\")\n    .select(\"*\")\n    .eq(\"RolID\", 2)\n    .then((snapshot) => {\n      const users = snapshot.data;\n      users.map((user) =>\n        supabase\n          .from(\"UserProduct\")\n          .select(\"Product(*),ID,Price\")\n          .eq(\"UserID\", user.ID)\n          .then((productSnapshot) => {\n            const products = productSnapshot.data;\n            if (products.length === 0) return null;\n\n            return createCharge({\n              ChargeTypeID: 7,\n              CreatedAt: moment().toDate(),\n              Charge: products.reduce(\n                (previousValue, currentValue) =>\n                  previousValue + currentValue.Product.BasePrice,\n                0\n              ),\n              ClientID: user.ID,\n              State: false,\n              Remaining: 0,\n            });\n          })\n      );\n    })\n    .catch(console.error);\n\nconst getChargeUserID = (UserID) =>\n  supabase\n    .from(\"Charge\")\n    .select(\"*,ChargeTypeID(*)\")\n    .eq(\"ClientID\", UserID)\n    .eq(\"State\", false)\n    .then(({ data }) => data);\n\nconst getAllChargeUserID = (UserID) =>\n  supabase\n    .from(\"Charge\")\n    .select(\"*,ChargeTypeID(*)\")\n    .eq(\"ClientID\", UserID)\n    .order(\"CreatedAt\", { ascending: true })\n    .then((snapshot) => snapshot.data);\n\nconst createPay = (ID, UrlImage, DocumentData) =>\n  supabase\n    .from(\"Charge\")\n    .update({\n      State: true,\n      UrlImage,\n      DocumentID: DocumentData.id,\n      UrlDocument: DocumentData.urlPublicView,\n    })\n    .eq(\"ID\", ID)\n    .then((snapshot) => snapshot.data);\n\nconst createTypeCharge = (dataCharge) =>\n  supabase\n    .from(\"ChargeType\")\n    .insert(dataCharge)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst getTypeCharge = () =>\n  supabase\n    .from(\"ChargeType\")\n    .select(\"*\")\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst updateChargeType = (ID, data) =>\n  supabase.from(\"ChargeType\").update(data).eq(\"ID\", ID);\n\nconst deleteChargeType = (ID) =>\n  supabase\n    .from(\"ChargeType\")\n    .delete()\n    .match({ ID })\n    .then((snapshot) => snapshot.data);\n\nconst countChargeAssigned = (ChargeTypeID) =>\n  supabase\n    .from(\"Charge\")\n    .select(\"*\", { count: \"exact\" })\n    .eq(\"ChargeTypeID\", ChargeTypeID)\n    .then(({ count }) => count);\n\nexport {\n  createCharge,\n  deleteCharge,\n  updateCharge,\n  chargeAutomatic,\n  getChargeUserID,\n  getAllChargeUserID,\n  createPay,\n  createTypeCharge,\n  updateChargeType,\n  getTypeCharge,\n  getCharges,\n  deleteChargeType,\n  countChargeAssigned,\n};\n","import React, { useEffect, useState } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CDataTable,\n  CInput,\n  CRow,\n  CSwitch,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { getProducts } from \"src/state/querys/Product\";\n\nconst SelecteProductsTable = ({\n  type,\n  productsSelected,\n  setProductsSelected,\n}) => {\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const fields = [\n    \"Nombre\",\n    \"Precio\",\n    \"activo\",\n    type === \"select\" && \"personalizar_precio\",\n  ];\n  const productEffect = (limit) => {\n    setLoading(true);\n    getProducts(limit).then((productsApi) => {\n      setProducts(\n        productsApi.map((product) => ({\n          ...product,\n          Nombre: product.Name,\n          Precio: new Intl.NumberFormat(\"es-CL\", {\n            currency: \"CLP\",\n            style: \"currency\",\n          }).format(product.BasePrice),\n        }))\n      );\n      setLoading(false);\n    });\n  };\n\n  useEffect(productEffect, []);\n  return (\n    <CDataTable\n      items={products}\n      fields={fields}\n      itemsPerPage={5}\n      onPageChange={productEffect}\n      loading={loading}\n      pagination\n      scopedSlots={{\n        personalizar_precio: (item) =>\n          type === \"select\" && (\n            <td className=\"py-2\">\n              <CCol col=\"4\" xs=\"4\" sm=\"4\" md=\"4\" className=\"mb-2 mb-xl-0\">\n                <CInput\n                  placeholder=\"10.000\"\n                  defaultValue={item.BasePrice}\n                  onChange={({ target: { value } }) =>\n                    setProductsSelected(\n                      productsSelected.map((product) =>\n                        product.ProductID === item.ID\n                          ? { ...product, Price: parseInt(value) }\n                          : { ...product }\n                      )\n                    )\n                  }\n                />\n              </CCol>\n            </td>\n          ),\n        activo: (item) => (\n          <td className=\"py-2\">\n            {type === \"select\" ? (\n              <CRow className=\"align-items-center\" key={item.ID}>\n                <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n                  <CSwitch\n                    className={\"mx-1\"}\n                    variant={\"3d\"}\n                    color={\"success\"}\n                    value={\n                      productsSelected.filter(\n                        (product) => item.ID === product.ProductID\n                      ).length === 1\n                    }\n                    checked={\n                      productsSelected.filter(\n                        (product) => item.ID === product.ProductID\n                      ).length === 1\n                    }\n                    onChange={({ target: { checked } }) => {\n                      checked\n                        ? setProductsSelected([\n                            ...productsSelected,\n                            {\n                              UserID: \"\",\n                              ProductID: item.ID,\n                              Price: item.BasePrice,\n                              label: item.Nombre,\n                            },\n                          ])\n                        : setProductsSelected(\n                            productsSelected.filter(\n                              (product) => item.ID !== product.ProductID\n                            )\n                          );\n                    }}\n                  />\n                </CCol>\n              </CRow>\n            ) : (\n              <CRow className=\"align-items-center\">\n                <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n                  <CButton\n                    color=\"primary\"\n                    onClick={() => {\n                      //   setProduct(item);\n                      //   setModalVisible(true);\n                    }}\n                  >\n                    <CIcon\n                      name=\"cil-pencil\"\n                      style={{ paddingLeft: 10 }}\n                      customClasses=\"c-sidebar-nav-icon\"\n                    />\n                  </CButton>\n                </CCol>\n                <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n                  <CButton\n                    color=\"danger\"\n                    onClick={() => {\n                      //   setProduct(item);\n                      //   setDeleteModal(true);\n                    }}\n                  >\n                    <CIcon\n                      name=\"cil-trash\"\n                      style={{ paddingLeft: 10 }}\n                      customClasses=\"c-sidebar-nav-icon\"\n                    />\n                  </CButton>\n                </CCol>\n              </CRow>\n            )}\n          </td>\n        ),\n      }}\n    />\n  );\n};\n\nexport default SelecteProductsTable;\n","import {\n  CButton,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n} from \"@coreui/react\";\nimport React from \"react\";\nimport SelecteProductsTable from \"../Tables/SelecteProductsTable\";\n\nconst SelectProductModal = ({\n  show,\n  setShow,\n  onFinish,\n  productsSelected,\n  setProductsSelected,\n}) => {\n  return (\n    <CModal show={show} onClose={setShow} size=\"lg\">\n      <CModalHeader closeButton>\n        <CModalTitle>\n          Selecciona los productos que quieres asignar a este usuario\n        </CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <SelecteProductsTable\n          type={\"select\"}\n          productsSelected={productsSelected}\n          setProductsSelected={setProductsSelected}\n        />\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"success\" onClick={onFinish}>\n          Aceptar\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n};\n\nexport default SelectProductModal;\n","import {\n  CButton,\n  CCol,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport React from \"react\";\n\nconst DeleteModal = ({ show, setShow, onFinish }) => {\n  return (\n    <CModal show={show} color=\"danger\" onClose={() => setShow(false)} size=\"sm\">\n      <CModalHeader>\n        <CModalTitle\n          style={{\n            fontWeight: \"bold\",\n            width: \"100%\",\n            textAlign: \"center\",\n          }}\n        >\n          Estas seguro?\n        </CModalTitle>\n      </CModalHeader>\n      <CModalFooter>\n        <CRow style={{ width: \"100%\" }}>\n          <CCol col=\"6\">\n            <CButton\n              color=\"danger\"\n              onClick={onFinish}\n              style={{ fontWeight: \"bold\", width: \"100%\" }}\n            >\n              Si\n            </CButton>\n          </CCol>\n          <CCol col=\"6\">\n            <CButton\n              onClick={() => setShow(false)}\n              color=\"secondary\"\n              style={{ fontWeight: \"bold\", width: \"100%\" }}\n            >\n              No\n            </CButton>\n          </CCol>\n        </CRow>\n      </CModalFooter>\n    </CModal>\n  );\n};\n\nexport default DeleteModal;\n","import {\n  CButton,\n  CCol,\n  CForm,\n  CInput,\n  CLabel,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\n\nconst ChargesPayModal = ({ onFinish, show, setShow, nameEdit }) => {\n  const [name, setName] = useState(nameEdit || \"\");\n  const [validated, setValidated] = useState(false);\n\n  useEffect(() => setName(nameEdit || \"\"), [nameEdit]);\n  return (\n    <CModal show={show} onClose={setShow} size=\"sm\">\n      <CForm className={validated ? \"was-validated\" : \"\"}>\n        <CModalHeader>\n          <CModalTitle\n            style={{\n              fontWeight: \"bold\",\n              width: \"100%\",\n              textAlign: \"center\",\n            }}\n          >\n            {`${nameEdit ? \"Editar\" : \"Crear\"} `} Cargo\n          </CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <CLabel\n            htmlFor=\"name\"\n            style={{\n              fontWeight: \"bold\",\n            }}\n          >\n            Nombre\n          </CLabel>\n          <CInput\n            id=\"name\"\n            name=\"name\"\n            value={name}\n            required\n            onChange={({ target: { value } }) => setName(value)}\n          />\n        </CModalBody>\n        <CModalFooter>\n          <CRow style={{ width: \"100%\" }}>\n            <CCol col=\"6\">\n              <CButton\n                color=\"success\"\n                onClick={() => {\n                  if (name === \"\") return setValidated(true);\n\n                  onFinish(name);\n                  setValidated(false);\n                }}\n                style={{ fontWeight: \"bold\", width: \"100%\" }}\n              >\n                {`${nameEdit ? \"Editar\" : \"Crear\"}`}\n              </CButton>\n            </CCol>\n            <CCol col=\"6\">\n              <CButton\n                onClick={() => setShow(false)}\n                color=\"secondary\"\n                style={{ fontWeight: \"bold\", width: \"100%\" }}\n              >\n                Cancelar\n              </CButton>\n            </CCol>\n          </CRow>\n        </CModalFooter>\n      </CForm>\n    </CModal>\n  );\n};\n\nexport default ChargesPayModal;\n","const colorsChart = [\n  \"#FF6633\",\n  \"#FFB399\",\n  \"#FF33FF\",\n  \"#FFFF99\",\n  \"#00B3E6\",\n  \"#E6B333\",\n  \"#3366E6\",\n  \"#999966\",\n  \"#99FF99\",\n  \"#B34D4D\",\n  \"#80B300\",\n  \"#809900\",\n  \"#E6B3B3\",\n  \"#6680B3\",\n  \"#66991A\",\n  \"#FF99E6\",\n  \"#CCFF1A\",\n  \"#FF1A66\",\n  \"#E6331A\",\n  \"#33FFCC\",\n  \"#66994D\",\n  \"#B366CC\",\n  \"#4D8000\",\n  \"#B33300\",\n  \"#CC80CC\",\n  \"#66664D\",\n  \"#991AFF\",\n  \"#E666FF\",\n  \"#4DB3FF\",\n  \"#1AB399\",\n  \"#E666B3\",\n  \"#33991A\",\n  \"#CC9999\",\n  \"#B3B31A\",\n  \"#00E680\",\n  \"#4D8066\",\n  \"#809980\",\n  \"#E6FF80\",\n  \"#1AFF33\",\n  \"#999933\",\n  \"#FF3380\",\n  \"#CCCC00\",\n  \"#66E64D\",\n  \"#4D80CC\",\n  \"#9900B3\",\n  \"#E64D66\",\n  \"#4DB380\",\n  \"#FF4D4D\",\n  \"#99E6E6\",\n  \"#6666FF\",\n];\n\nexport { colorsChart };\n","const nameStateSpanish = (stateID) => {\n  switch (stateID) {\n    case 1:\n      return \"activo\";\n    case 2:\n      return \"de baja\";\n    case 3:\n      return \"moroso\";\n    case 4:\n      return \"en aprobacion\";\n    case 5:\n      return \"desconexion en proceso\";\n    case 6:\n      return \"activacion en proceso\";\n\n    default:\n      return \"indefinido\";\n  }\n};\n\nexport { nameStateSpanish };\n","import { freeSet } from \"@coreui/icons\";\nimport { CDataTable } from \"@coreui/react\";\nimport React from \"react\";\nimport { ButtonOptionTable } from \"../buttons\";\n\nconst fields = [\"ID\", \"nombre\", \"editar\", \"eliminar\"];\nconst ChargesPayTable = ({\n  charges,\n  onPageChange,\n  loading,\n  onPressEdit,\n  onPressDeleted,\n}) => {\n  return (\n    <CDataTable\n      items={charges}\n      fields={fields}\n      itemsPerPage={5}\n      onPageChange={onPageChange}\n      loading={loading}\n      pagination\n      scopedSlots={{\n        editar: (item) => (\n          <ButtonOptionTable\n            color=\"info\"\n            icon={freeSet.cilPencil}\n            onPress={() => {\n              onPressEdit(item);\n            }}\n          />\n        ),\n        eliminar: (item) => (\n          <ButtonOptionTable\n            color=\"danger\"\n            icon={freeSet.cilTrash}\n            onPress={() => {\n              onPressDeleted(item);\n            }}\n          />\n        ),\n      }}\n    />\n  );\n};\n\nexport default ChargesPayTable;\n","import React, { useEffect, useState } from \"react\";\nimport { CCol, CDataTable, CRow, CSwitch } from \"@coreui/react\";\nimport { getOffices } from \"src/state/querys/Office\";\n\nconst SelectOfficesTable = ({ setOffice, office }) => {\n  const [offices, setOffices] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const fields = [\"ID\", \"nombre\", \"opciones\"];\n  const officesEffects = () => {\n    setLoading(true);\n    getOffices().then((Offices) => {\n      setOffices(\n        Offices.map((officeApi) => ({ ...officeApi, nombre: officeApi.Name }))\n      );\n      setLoading(false);\n    });\n  };\n\n  useEffect(officesEffects, []);\n  return (\n    <CDataTable\n      items={offices}\n      fields={fields}\n      itemsPerPage={5}\n      onPageChange={officesEffects}\n      loading={loading}\n      pagination\n      scopedSlots={{\n        opciones: (item) => (\n          <td className=\"py-2\">\n            <CRow className=\"align-items-center\" key={item.ID}>\n              <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n                <CSwitch\n                  className={\"mx-1\"}\n                  variant={\"3d\"}\n                  color={\"success\"}\n                  value={office?.ID === item.ID}\n                  checked={office?.ID === item.ID}\n                  onChange={() => setOffice(item)}\n                />\n              </CCol>\n            </CRow>\n          </td>\n        ),\n      }}\n    />\n  );\n};\n\nexport default SelectOfficesTable;\n","import { freeSet } from \"@coreui/icons\";\nimport { CDataTable } from \"@coreui/react\";\nimport React from \"react\";\nimport { ButtonOptionTable } from \"../buttons\";\n\nconst fields = [\"ID\", \"nombre\", \"editar\", \"eliminar\"];\nconst OfficesTable = ({\n  offices,\n  onPageChange,\n  loading,\n  onPressEdit,\n  onPressDeleted,\n}) => {\n  return (\n    <CDataTable\n      items={offices}\n      fields={fields}\n      itemsPerPage={5}\n      onPageChange={onPageChange}\n      loading={loading}\n      pagination\n      scopedSlots={{\n        editar: (item) => (\n          <ButtonOptionTable\n            color=\"info\"\n            icon={freeSet.cilPencil}\n            onPress={() => {\n              onPressEdit(item);\n            }}\n          />\n        ),\n        eliminar: (item) => (\n          <ButtonOptionTable\n            color=\"danger\"\n            icon={freeSet.cilTrash}\n            onPress={() => {\n              onPressDeleted(item);\n            }}\n          />\n        ),\n      }}\n    />\n  );\n};\n\nexport default OfficesTable;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n} from \"@coreui/react\";\nimport {\n  countChargeAssigned,\n  createTypeCharge,\n  deleteChargeType,\n  getCharges,\n  updateChargeType,\n} from \"src/state/querys/Charges\";\nimport { ChargesPayModal, DeleteModal } from \"src/components/Modals\";\nimport { ChargesPayTable } from \"src/components/Tables\";\nimport { useKeySelector } from \"src/hook/general\";\nimport { CChartDoughnut } from \"@coreui/react-chartjs\";\nimport { colorsChart } from \"src/utils\";\n\nconst ChargesPay = () => {\n  const { colors } = useKeySelector([\"colors\"]);\n  const [loading, setLoading] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [showModalCharge, setShowModalCharge] = useState(false);\n  const [chargesSelected, setChargesSelected] = useState({});\n  const [chargesChart, setChargesChart] = useState([]);\n  const [charges, setCharges] = useState([]);\n\n  const componentDidMount = (limit = 1) => {\n    setLoading(true);\n    getCharges(limit)\n      .then((data) =>\n        Promise.all(\n          data.map(({ ID, Name }) =>\n            countChargeAssigned(ID).then((result) => ({\n              count: result,\n              charges: Name,\n            }))\n          )\n        ).then((result) => {\n          setCharges(\n            data.map((charge) => ({\n              ...charge,\n              nombre: charge.Name,\n            }))\n          );\n          setLoading(false);\n          setChargesChart(result);\n        })\n      )\n      .catch(console.error);\n  };\n  const deleteCharge = () =>\n    deleteChargeType(chargesSelected.ID).then(componentWillUnmount);\n\n  const handleCreateCharge = (Name) =>\n    createTypeCharge({ Name }).then(componentWillUnmount);\n\n  const handleUpdateCharge = (Name) =>\n    updateChargeType(chargesSelected.ID, { Name }).then(componentWillUnmount);\n\n  const componentWillUnmount = () => {\n    componentDidMount();\n    setLoading(false);\n    setShowModalCharge(false);\n    setShowDeleteModal(false);\n    setChargesSelected({});\n  };\n  useEffect(componentDidMount, []);\n  return (\n    <>\n      <CRow className=\"align-items-center\" style={{ marginBottom: 16 }}>\n        <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-3 mb-xl-0\">\n          <CButton\n            onClick={() => setShowModalCharge(true)}\n            style={{\n              backgroundColor: colors.primary,\n              color: \"#fff\",\n              fontWeight: \"bold\",\n            }}\n          >\n            Crear Cargo\n          </CButton>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs=\"12\" lg=\"6\">\n          <CCard>\n            <CCardHeader\n              style={{\n                backgroundColor: colors.primary,\n                color: \"#fff\",\n                fontWeight: \"bold\",\n              }}\n            >\n              Cargos\n            </CCardHeader>\n            <CCardBody>\n              <ChargesPayTable\n                charges={charges}\n                onPageChange={componentDidMount}\n                loading={loading}\n                onPressEdit={(item) => {\n                  setChargesSelected(item);\n                  setShowModalCharge(true);\n                }}\n                onPressDeleted={(item) => {\n                  setChargesSelected(item);\n                  setShowDeleteModal(true);\n                }}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n        <CCol xs=\"12\" lg=\"6\">\n          <CCard>\n            <CCardHeader\n              style={{\n                backgroundColor: colors.primary,\n                color: \"#fff\",\n                fontWeight: \"bold\",\n              }}\n            >\n              Grafica de los cargos mas utilizados\n            </CCardHeader>\n            {chargesChart.length > 0 && (\n              <CCardBody>\n                <CChartDoughnut\n                  datasets={[\n                    {\n                      backgroundColor: colorsChart,\n                      data: chargesChart.map(({ count }) => count),\n                    },\n                  ]}\n                  labels={chargesChart.map(({ charges }) => charges)}\n                  options={{\n                    tooltips: {\n                      enabled: true,\n                    },\n                  }}\n                />\n              </CCardBody>\n            )}\n          </CCard>\n        </CCol>\n      </CRow>\n      <ChargesPayModal\n        show={showModalCharge}\n        setShow={() => {\n          setChargesSelected({});\n          setShowModalCharge(false);\n        }}\n        nameEdit={chargesSelected?.Name}\n        onFinish={(value) =>\n          !chargesSelected?.ID\n            ? handleCreateCharge(value)\n            : handleUpdateCharge(value)\n        }\n      />\n      <DeleteModal\n        show={showDeleteModal}\n        setShow={() => {\n          setChargesSelected({});\n          setShowDeleteModal(false);\n        }}\n        onFinish={deleteCharge}\n      />\n    </>\n  );\n};\n\nexport default ChargesPay;\n"],"sourceRoot":""}