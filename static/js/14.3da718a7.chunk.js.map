{"version":3,"sources":["components/buttons/ButtonOptionTable.js","components/buttons/UploadFile.js","state/querys/Product.js","components/Tables/SelecteProductsTable.js","components/Modals/SelectProductModal.js","components/Modals/DeleteModal.js","components/Modals/ChargesPayModal.js","components/Tables/ChargesPayTable.js","components/Tables/SelectOfficesTable.js","components/Tables/OfficesTable.js","views/office/Offices.js"],"names":["ButtonOptionTable","onPress","color","icon","className","col","xs","sm","md","onClick","content","size","UploadFile","children","value","onChange","disabled","accept","htmlFor","style","display","id","multiple","type","getProducts","limit","supabase","from","select","then","snapshot","data","catch","console","error","getProductByIDUser","UserID","eq","countProductUsed","productID","count","SelecteProductsTable","productsSelected","setProductsSelected","useState","products","setProducts","loading","setLoading","fields","productEffect","productsApi","map","product","Nombre","Name","Precio","Intl","NumberFormat","currency","format","BasePrice","useEffect","items","itemsPerPage","onPageChange","pagination","scopedSlots","personalizar_precio","item","placeholder","defaultValue","target","ProductID","ID","Price","parseInt","activo","variant","filter","length","checked","label","name","paddingLeft","customClasses","SelectProductModal","show","setShow","onFinish","onClose","closeButton","DeleteModal","fontWeight","width","textAlign","ChargesPayModal","nameEdit","setName","validated","setValidated","required","ChargesPayTable","charges","onPressEdit","onPressDeleted","editar","freeSet","cilPencil","eliminar","cilTrash","SelectOfficesTable","setOffice","office","offices","setOffices","officesEffects","getOffices","Offices","officeApi","nombre","opciones","OfficesTable","colors","useKeySelector","charData","setCharData","showDeleteModal","setShowDeleteModal","showModal","setShowModal","componentDidMount","Promise","all","getClientsCountOffice","response","marginBottom","backgroundColor","primary","lg","datasets","labels","options","tooltips","enabled","deleteOffice","updateOffice","_","omit","createOffice"],"mappings":"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","file":"static/js/14.3da718a7.chunk.js","sourcesContent":["import React from \"react\";\nimport { CButton, CCol, CRow } from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\n\nconst ButtonOptionTable = ({ onPress, color, icon }) => {\n  return (\n    <td className=\"py-2\">\n      <CRow className=\"align-items-center\">\n        <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n          <CButton color={color} onClick={onPress}>\n            <CIcon content={icon} size=\"xl\" />\n          </CButton>\n        </CCol>\n      </CRow>\n    </td>\n  );\n};\n\nexport default ButtonOptionTable;\n","const UploadFile = ({ children, value, onChange, disabled, accept }) => {\n  return (\n    <label htmlFor=\"contained-button-file\" className=\"m-0 w-100\">\n      <input\n        value={value}\n        accept={accept}\n        disabled={disabled}\n        style={{ display: \"none\" }}\n        id=\"contained-button-file\"\n        multiple\n        type=\"file\"\n        onChange={disabled ? () => {} : onChange}\n      />\n      {children}\n    </label>\n  );\n};\n\nexport default UploadFile;\n","import { supabase } from \"src/config/configSupabase\";\n\nconst getProducts = (limit) =>\n  supabase\n    .from(\"Product\")\n    .select(\"*\")\n    .limit(limit * 5 + 1)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst getProductByIDUser = (UserID) =>\n  supabase\n    .from(\"UserProduct\")\n    .select(\"*,ProductID(*)\")\n    .eq(\"UserID\", UserID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst countProductUsed = (productID) =>\n  supabase\n    .from(\"UserProduct\")\n    .select(\"*\", { count: \"exact\" })\n    .eq(\"ProductID\", productID)\n    .then(({ count }) => count);\n\nexport { getProducts, getProductByIDUser, countProductUsed };\n","import React, { useEffect, useState } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CDataTable,\n  CInput,\n  CRow,\n  CSwitch,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { getProducts } from \"src/state/querys/Product\";\n\nconst SelecteProductsTable = ({\n  type,\n  productsSelected,\n  setProductsSelected,\n}) => {\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const fields = [\n    \"Nombre\",\n    \"Precio\",\n    \"activo\",\n    type === \"select\" && \"personalizar_precio\",\n  ];\n  const productEffect = (limit) => {\n    setLoading(true);\n    getProducts(limit).then((productsApi) => {\n      setProducts(\n        productsApi.map((product) => ({\n          ...product,\n          Nombre: product.Name,\n          Precio: new Intl.NumberFormat(\"es-CL\", {\n            currency: \"CLP\",\n            style: \"currency\",\n          }).format(product.BasePrice),\n        }))\n      );\n      setLoading(false);\n    });\n  };\n\n  useEffect(productEffect, []);\n  return (\n    <CDataTable\n      items={products}\n      fields={fields}\n      itemsPerPage={5}\n      onPageChange={productEffect}\n      loading={loading}\n      pagination\n      scopedSlots={{\n        personalizar_precio: (item) =>\n          type === \"select\" && (\n            <td className=\"py-2\">\n              <CCol col=\"4\" xs=\"4\" sm=\"4\" md=\"4\" className=\"mb-2 mb-xl-0\">\n                <CInput\n                  placeholder=\"10.000\"\n                  defaultValue={item.BasePrice}\n                  onChange={({ target: { value } }) =>\n                    setProductsSelected(\n                      productsSelected.map((product) =>\n                        product.ProductID === item.ID\n                          ? { ...product, Price: parseInt(value) }\n                          : { ...product }\n                      )\n                    )\n                  }\n                />\n              </CCol>\n            </td>\n          ),\n        activo: (item) => (\n          <td className=\"py-2\">\n            {type === \"select\" ? (\n              <CRow className=\"align-items-center\" key={item.ID}>\n                <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n                  <CSwitch\n                    className={\"mx-1\"}\n                    variant={\"3d\"}\n                    color={\"success\"}\n                    value={\n                      productsSelected.filter(\n                        (product) => item.ID === product.ProductID\n                      ).length === 1\n                    }\n                    checked={\n                      productsSelected.filter(\n                        (product) => item.ID === product.ProductID\n                      ).length === 1\n                    }\n                    onChange={({ target: { checked } }) => {\n                      checked\n                        ? setProductsSelected([\n                            ...productsSelected,\n                            {\n                              UserID: \"\",\n                              ProductID: item.ID,\n                              Price: item.BasePrice,\n                              label: item.Nombre,\n                            },\n                          ])\n                        : setProductsSelected(\n                            productsSelected.filter(\n                              (product) => item.ID !== product.ProductID\n                            )\n                          );\n                    }}\n                  />\n                </CCol>\n              </CRow>\n            ) : (\n              <CRow className=\"align-items-center\">\n                <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n                  <CButton\n                    color=\"primary\"\n                    onClick={() => {\n                      //   setProduct(item);\n                      //   setModalVisible(true);\n                    }}\n                  >\n                    <CIcon\n                      name=\"cil-pencil\"\n                      style={{ paddingLeft: 10 }}\n                      customClasses=\"c-sidebar-nav-icon\"\n                    />\n                  </CButton>\n                </CCol>\n                <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n                  <CButton\n                    color=\"danger\"\n                    onClick={() => {\n                      //   setProduct(item);\n                      //   setDeleteModal(true);\n                    }}\n                  >\n                    <CIcon\n                      name=\"cil-trash\"\n                      style={{ paddingLeft: 10 }}\n                      customClasses=\"c-sidebar-nav-icon\"\n                    />\n                  </CButton>\n                </CCol>\n              </CRow>\n            )}\n          </td>\n        ),\n      }}\n    />\n  );\n};\n\nexport default SelecteProductsTable;\n","import {\n  CButton,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n} from \"@coreui/react\";\nimport React from \"react\";\nimport SelecteProductsTable from \"../Tables/SelecteProductsTable\";\n\nconst SelectProductModal = ({\n  show,\n  setShow,\n  onFinish,\n  productsSelected,\n  setProductsSelected,\n}) => {\n  return (\n    <CModal show={show} onClose={setShow} size=\"lg\">\n      <CModalHeader closeButton>\n        <CModalTitle>\n          Selecciona los productos que quieres asignar a este usuario\n        </CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <SelecteProductsTable\n          type={\"select\"}\n          productsSelected={productsSelected}\n          setProductsSelected={setProductsSelected}\n        />\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"success\" onClick={onFinish}>\n          Aceptar\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n};\n\nexport default SelectProductModal;\n","import {\n  CButton,\n  CCol,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport React from \"react\";\n\nconst DeleteModal = ({ show, setShow, onFinish }) => {\n  return (\n    <CModal show={show} color=\"danger\" onClose={() => setShow(false)} size=\"sm\">\n      <CModalHeader>\n        <CModalTitle\n          style={{\n            fontWeight: \"bold\",\n            width: \"100%\",\n            textAlign: \"center\",\n          }}\n        >\n          Estas seguro?\n        </CModalTitle>\n      </CModalHeader>\n      <CModalFooter>\n        <CRow style={{ width: \"100%\" }}>\n          <CCol col=\"6\">\n            <CButton\n              color=\"danger\"\n              onClick={onFinish}\n              style={{ fontWeight: \"bold\", width: \"100%\" }}\n            >\n              Si\n            </CButton>\n          </CCol>\n          <CCol col=\"6\">\n            <CButton\n              onClick={() => setShow(false)}\n              color=\"secondary\"\n              style={{ fontWeight: \"bold\", width: \"100%\" }}\n            >\n              No\n            </CButton>\n          </CCol>\n        </CRow>\n      </CModalFooter>\n    </CModal>\n  );\n};\n\nexport default DeleteModal;\n","import {\n  CButton,\n  CCol,\n  CForm,\n  CInput,\n  CLabel,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\n\nconst ChargesPayModal = ({ onFinish, show, setShow, nameEdit }) => {\n  const [name, setName] = useState(nameEdit || \"\");\n  const [validated, setValidated] = useState(false);\n\n  useEffect(() => setName(nameEdit || \"\"), [nameEdit]);\n  return (\n    <CModal show={show} onClose={setShow} size=\"sm\">\n      <CForm className={validated ? \"was-validated\" : \"\"}>\n        <CModalHeader>\n          <CModalTitle\n            style={{\n              fontWeight: \"bold\",\n              width: \"100%\",\n              textAlign: \"center\",\n            }}\n          >\n            {`${nameEdit ? \"Editar\" : \"Crear\"} `} Cargo\n          </CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <CLabel\n            htmlFor=\"name\"\n            style={{\n              fontWeight: \"bold\",\n            }}\n          >\n            Nombre\n          </CLabel>\n          <CInput\n            id=\"name\"\n            name=\"name\"\n            value={name}\n            required\n            onChange={({ target: { value } }) => setName(value)}\n          />\n        </CModalBody>\n        <CModalFooter>\n          <CRow style={{ width: \"100%\" }}>\n            <CCol col=\"6\">\n              <CButton\n                color=\"success\"\n                onClick={() => {\n                  if (name === \"\") return setValidated(true);\n\n                  onFinish(name);\n                  setValidated(false);\n                }}\n                style={{ fontWeight: \"bold\", width: \"100%\" }}\n              >\n                {`${nameEdit ? \"Editar\" : \"Crear\"}`}\n              </CButton>\n            </CCol>\n            <CCol col=\"6\">\n              <CButton\n                onClick={() => setShow(false)}\n                color=\"secondary\"\n                style={{ fontWeight: \"bold\", width: \"100%\" }}\n              >\n                Cancelar\n              </CButton>\n            </CCol>\n          </CRow>\n        </CModalFooter>\n      </CForm>\n    </CModal>\n  );\n};\n\nexport default ChargesPayModal;\n","import { freeSet } from \"@coreui/icons\";\nimport { CDataTable } from \"@coreui/react\";\nimport React from \"react\";\nimport { ButtonOptionTable } from \"../buttons\";\n\nconst fields = [\"ID\", \"nombre\", \"editar\", \"eliminar\"];\nconst ChargesPayTable = ({\n  charges,\n  onPageChange,\n  loading,\n  onPressEdit,\n  onPressDeleted,\n}) => {\n  return (\n    <CDataTable\n      items={charges}\n      fields={fields}\n      itemsPerPage={5}\n      onPageChange={onPageChange}\n      loading={loading}\n      pagination\n      scopedSlots={{\n        editar: (item) => (\n          <ButtonOptionTable\n            color=\"info\"\n            icon={freeSet.cilPencil}\n            onPress={() => {\n              onPressEdit(item);\n            }}\n          />\n        ),\n        eliminar: (item) => (\n          <ButtonOptionTable\n            color=\"danger\"\n            icon={freeSet.cilTrash}\n            onPress={() => {\n              onPressDeleted(item);\n            }}\n          />\n        ),\n      }}\n    />\n  );\n};\n\nexport default ChargesPayTable;\n","import React, { useEffect, useState } from \"react\";\nimport { CCol, CDataTable, CRow, CSwitch } from \"@coreui/react\";\nimport { getOffices } from \"src/state/querys/Office\";\n\nconst SelectOfficesTable = ({ setOffice, office }) => {\n  const [offices, setOffices] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const fields = [\"ID\", \"nombre\", \"opciones\"];\n  const officesEffects = () => {\n    setLoading(true);\n    getOffices().then((Offices) => {\n      setOffices(\n        Offices.map((officeApi) => ({ ...officeApi, nombre: officeApi.Name }))\n      );\n      setLoading(false);\n    });\n  };\n\n  useEffect(officesEffects, []);\n  return (\n    <CDataTable\n      items={offices}\n      fields={fields}\n      itemsPerPage={5}\n      onPageChange={officesEffects}\n      loading={loading}\n      pagination\n      scopedSlots={{\n        opciones: (item) => (\n          <td className=\"py-2\">\n            <CRow className=\"align-items-center\" key={item.ID}>\n              <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n                <CSwitch\n                  className={\"mx-1\"}\n                  variant={\"3d\"}\n                  color={\"success\"}\n                  value={office?.ID === item.ID}\n                  checked={office?.ID === item.ID}\n                  onChange={() => setOffice(item)}\n                />\n              </CCol>\n            </CRow>\n          </td>\n        ),\n      }}\n    />\n  );\n};\n\nexport default SelectOfficesTable;\n","import { freeSet } from \"@coreui/icons\";\nimport { CDataTable } from \"@coreui/react\";\nimport React from \"react\";\nimport { ButtonOptionTable } from \"../buttons\";\n\nconst fields = [\"ID\", \"nombre\", \"editar\", \"eliminar\"];\nconst OfficesTable = ({\n  offices,\n  onPageChange,\n  loading,\n  onPressEdit,\n  onPressDeleted,\n}) => {\n  return (\n    <CDataTable\n      items={offices}\n      fields={fields}\n      itemsPerPage={5}\n      onPageChange={onPageChange}\n      loading={loading}\n      pagination\n      scopedSlots={{\n        editar: (item) => (\n          <ButtonOptionTable\n            color=\"info\"\n            icon={freeSet.cilPencil}\n            onPress={() => {\n              onPressEdit(item);\n            }}\n          />\n        ),\n        eliminar: (item) => (\n          <ButtonOptionTable\n            color=\"danger\"\n            icon={freeSet.cilTrash}\n            onPress={() => {\n              onPressDeleted(item);\n            }}\n          />\n        ),\n      }}\n    />\n  );\n};\n\nexport default OfficesTable;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CInput,\n  CLabel,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport _ from \"lodash\";\nimport {\n  createOffice,\n  deleteOffice,\n  getOffices,\n  updateOffice,\n} from \"src/state/querys/Office\";\nimport { OfficesTable } from \"src/components/Tables\";\nimport { useKeySelector } from \"src/hook/general\";\nimport { CChartBar } from \"@coreui/react-chartjs\";\nimport { getClientsCountOffice } from \"src/state/querys/Users\";\nimport { DeleteModal } from \"src/components/Modals\";\n\nconst Offices = () => {\n  const { colors } = useKeySelector([\"colors\"]);\n  const [loading, setLoading] = useState(false);\n  const [validated, setValidated] = useState(false);\n  const [offices, setOffices] = useState([]);\n  const [charData, setCharData] = useState([]);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [office, setOffice] = useState({});\n\n  const componentDidMount = (limit = 1) => {\n    setLoading(true);\n    getOffices(limit)\n      .then((snapshot) =>\n        Promise.all(\n          snapshot.map((office) =>\n            getClientsCountOffice(office.ID, 1).then((count) => ({\n              count,\n              Name: office.Name,\n            }))\n          )\n        ).then((response) => {\n          setCharData(response);\n          setOffices(\n            snapshot.map((office) => ({\n              ...office,\n              nombre: office.Name,\n            }))\n          );\n          setLoading(false);\n        })\n      )\n      .catch(console.error);\n  };\n  const handleDeleteOffice = () =>\n    deleteOffice(office.ID).then(() => {\n      setLoading(false);\n      setOffice({});\n      componentDidMount();\n      setShowDeleteModal(false);\n    });\n\n  const handleCreateOffice = () => {\n    if (!office?.Name) return setValidated(true);\n\n    if (!office.ID)\n      return createOffice(office).then(() => {\n        setOffice({});\n        componentDidMount();\n        setShowModal(false);\n        setValidated(false);\n      });\n\n    updateOffice(office.ID, _.omit({ ...office }, \"ID\", \"nombre\")).then(() => {\n      setOffice({});\n      componentDidMount();\n      setShowModal(false);\n      setValidated(false);\n    });\n  };\n\n  useEffect(componentDidMount, []);\n  return (\n    <>\n      <CRow className=\"align-items-center\" style={{ marginBottom: 16 }}>\n        <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-3 mb-xl-0\">\n          <CButton\n            onClick={() => setShowModal(true)}\n            style={{\n              backgroundColor: colors.primary,\n              color: \"#fff\",\n              fontWeight: \"bold\",\n            }}\n          >\n            Crear Sucursal\n          </CButton>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs=\"12\" lg=\"6\">\n          <CCard>\n            <CCardHeader\n              style={{\n                backgroundColor: colors.primary,\n                color: \"#fff\",\n                fontWeight: \"bold\",\n              }}\n            >\n              Sucursales\n            </CCardHeader>\n            <CCardBody>\n              <OfficesTable\n                offices={offices}\n                onPageChange={componentDidMount}\n                loading={loading}\n                onPressEdit={(item) => {\n                  setOffice(item);\n                  setShowModal(true);\n                }}\n                onPressDeleted={(item) => {\n                  setShowDeleteModal(true);\n                  setOffice(item);\n                }}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n        <CCol xs=\"12\" lg=\"6\">\n          <CCard>\n            <CCardHeader\n              style={{\n                backgroundColor: colors.primary,\n                color: \"#fff\",\n                fontWeight: \"bold\",\n              }}\n            >\n              Usuarios Por Sucursal\n            </CCardHeader>\n            <CCardBody>\n              <CChartBar\n                datasets={[\n                  {\n                    label: \"Sucursales\",\n                    backgroundColor: colors.primary,\n                    data: charData.map(({ count }) => count),\n                  },\n                ]}\n                labels={charData.map(({ Name }) => Name)}\n                options={{\n                  tooltips: {\n                    enabled: true,\n                  },\n                }}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <DeleteModal\n        show={showDeleteModal}\n        setShow={() => {\n          setShowDeleteModal(false);\n          setOffice({});\n        }}\n        onFinish={handleDeleteOffice}\n      />\n      <CModal\n        show={showModal}\n        onClose={() => {\n          setShowModal(false);\n        }}\n        size=\"sm\"\n      >\n        <CModalHeader>\n          <CModalTitle\n            style={{\n              fontWeight: \"bold\",\n              width: \"100%\",\n              textAlign: \"center\",\n            }}\n          >{`${office.ID ? \"Editar\" : \"Crear\"}  Sucursal`}</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <CRow>\n            <CCol xs=\"12\">\n              <CForm className={validated ? \"was-validated\" : \"\"}>\n                <CLabel\n                  htmlFor=\"product\"\n                  style={{\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  Nombre\n                </CLabel>\n                <CInput\n                  id=\"product\"\n                  placeholder=\"ingresa el nombre de la sucursal\"\n                  value={office.Name}\n                  onChange={({ target: { value } }) =>\n                    setOffice({ ...office, Name: value })\n                  }\n                  required\n                />\n              </CForm>\n            </CCol>\n          </CRow>\n        </CModalBody>\n        <CModalFooter>\n          <CRow style={{ width: \"100%\" }}>\n            <CCol col=\"6\">\n              <CButton\n                color=\"success\"\n                onClick={handleCreateOffice}\n                style={{ fontWeight: \"bold\", width: \"100%\" }}\n              >\n                {office.ID ? \"Editar\" : \"Crear\"}\n              </CButton>\n            </CCol>\n            <CCol col=\"6\">\n              <CButton\n                color=\"secondary\"\n                onClick={() => {\n                  setOffice({});\n                  setShowModal(false);\n                }}\n                style={{ fontWeight: \"bold\", width: \"100%\" }}\n              >\n                Cancelar\n              </CButton>\n            </CCol>\n          </CRow>\n        </CModalFooter>\n      </CModal>\n    </>\n  );\n};\n\nexport default Offices;\n"],"sourceRoot":""}