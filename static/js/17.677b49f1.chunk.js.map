{"version":3,"sources":["components/buttons/ButtonOptionTable.js","components/buttons/UploadFile.js","state/querys/Charges.js","components/Tables/TechniciansTable.js","state/querys/Discount.js","components/Tables/TasksTable.js","views/base/tables/TasksPending.js"],"names":["ButtonOptionTable","onPress","color","icon","className","col","xs","sm","md","onClick","content","size","UploadFile","children","value","onChange","disabled","accept","htmlFor","style","display","id","multiple","type","supabase","require","getCharges","limit","from","select","then","snapshot","data","catch","console","error","createCharge","chargesData","insert","deleteCharge","ID","delete","match","updateCharge","update","eq","chargeAutomatic","map","user","productSnapshot","products","length","ChargeTypeID","CreatedAt","moment","toDate","Charge","reduce","previousValue","currentValue","Product","BasePrice","ClientID","State","Remaining","getChargeUserID","UserID","getAllChargeUserID","order","ascending","createPay","UrlImage","DocumentData","DocumentID","UrlDocument","urlPublicView","createTypeCharge","dataCharge","getTypeCharge","updateChargeType","deleteChargeType","countChargeAssigned","count","TechniciansTable","setTechnicianID","TechnicianID","isAllData","useState","technicians","setTechnicians","loading","setLoading","techniciansEffect","getTechnicians","techniciansApi","technician","nombre","Names","apellido","LastName","useEffect","items","fields","itemsPerPage","onPageChange","pagination","scopedSlots","opciones","item","variant","checked","createDiscount","DiscountData","updateDiscount","discountID","TasksTable","tasks","taskEffect","useKeySelector","dispatch","useDispatch","showCollapseCommentTask","setShowCollapseCommentTask","showCollapseInfoTask","setShowCollapseInfoTask","deleteModal","setDeleteModal","showTechnicalModal","setShowTechnicalModal","showTechnicalPaymentModal","setShowTechnicalPaymentModal","taskSelected","setTaskSelected","comments","setComments","textComment","setTextComment","technicalSelected","setTechnicalSelected","chargesUserTask","setChargesUserTask","chargesSelected","setChargesSelected","getBadge","status","getColorPriority","priority","orderPriority","Object","keys","sort","a","b","lg","borderRadius","backgroundColor","fontWeight","fontSize","textAlign","_","groupBy","date","width","format","task","border","padding","marginTop","TypeID","Name","StateID","name","Priority","TaskID","target","payload","show","label","updateTask","setTimeout","getCommentsTask","commentsApi","commentsTaskEffect","freeSet","cilCommentBubble","cilZoomIn","RolID","AssignedID","cilUser","dataTask","upsert","User","updateUserFinishTask","omit","Products","Address","OfficeID","createUserFinishTask","Promise","all","updateUserID","changeStateTask","Data","cilCheck","cilCash","comment","paddingBottom","Comment","position","bottom","right","placeholder","createCommentTask","newCommentID","createAt","cilSend","PhoneNumber","Rut","AddressID","AddressName","AddressNumber","Note","onClose","closeButton","alignHorizontal","isMulti","options","filter","charge","parseInt","classNamePrefix","files","TaskPending","setTasks","technicals","setTechnicals","filterTechnicalID","setFilterTechnicalID","fetchTask","or","ZoneID","getTechnicalZone","AddressZoneID","marginBottom"],"mappings":"oRAkBeA,EAdW,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC3C,OACE,oBAAIC,UAAU,OAAd,SACE,cAAC,KAAD,CAAMA,UAAU,qBAAhB,SACE,cAAC,IAAD,CAAMC,IAAI,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIJ,UAAU,eAA7C,SACE,cAAC,IAAD,CAASF,MAAOA,EAAOO,QAASR,EAAhC,SACE,cAAC,IAAD,CAAOS,QAASP,EAAMQ,KAAK,gBCQxBC,EAlBI,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OACzD,OACE,wBAAOC,QAAQ,wBAAwBd,UAAU,YAAjD,UACE,uBACEU,MAAOA,EACPG,OAAQA,EACRD,SAAUA,EACVG,MAAO,CAAEC,QAAS,QAClBC,GAAG,wBACHC,UAAQ,EACRC,KAAK,OACLR,SAAUC,EAAW,aAAWD,IAEjCF,O,iCCbP,gdAEQW,EAAaC,EAAQ,IAArBD,SAEFE,EAAa,SAACC,GAAD,OACjBH,EACGI,KAAK,cACLC,OAAO,KACPF,MAAc,EAARA,EAAY,GAClBG,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,QAEbC,EAAe,SAACC,GAAD,OACnBb,EACGI,KAAK,UACLU,OAAOD,GACPP,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,QAEbI,EAAe,SAACC,GAAD,OACnBhB,EACGI,KAAK,UACLa,SACAC,MAAM,CAAEF,OACRV,MAAK,SAACC,GAAD,OAAcA,EAASC,SAE3BW,EAAe,SAACN,EAAaG,GAAd,OACnBhB,EACGI,KAAK,UACLgB,OAAOP,GACPQ,GAAG,KAAML,GACTV,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,QAEbW,EAAkB,kBACtBtB,EACGI,KAAK,QACLC,OAAO,KACPgB,GAAG,QAAS,GACZf,MAAK,SAACC,GACSA,EAASC,KACjBe,KAAI,SAACC,GAAD,OACRxB,EACGI,KAAK,eACLC,OAAO,uBACPgB,GAAG,SAAUG,EAAKR,IAClBV,MAAK,SAACmB,GACL,IAAMC,EAAWD,EAAgBjB,KACjC,OAAwB,IAApBkB,EAASC,OAAqB,KAE3Bf,EAAa,CAClBgB,aAAc,EACdC,UAAWC,MAASC,SACpBC,OAAQN,EAASO,QACf,SAACC,EAAeC,GAAhB,OACED,EAAgBC,EAAaC,QAAQC,YACvC,GAEFC,SAAUd,EAAKR,GACfuB,OAAO,EACPC,UAAW,aAKpB/B,MAAMC,QAAQC,QAEb8B,EAAkB,SAACC,GAAD,OACtB1C,EACGI,KAAK,UACLC,OAAO,qBACPgB,GAAG,WAAYqB,GACfrB,GAAG,SAAS,GACZf,MAAK,qBAAGE,SAEPmC,EAAqB,SAACD,GAAD,OACzB1C,EACGI,KAAK,UACLC,OAAO,qBACPgB,GAAG,WAAYqB,GACfE,MAAM,YAAa,CAAEC,WAAW,IAChCvC,MAAK,SAACC,GAAD,OAAcA,EAASC,SAE3BsC,EAAY,SAAC9B,EAAI+B,EAAUC,GAAf,OAChBhD,EACGI,KAAK,UACLgB,OAAO,CACNmB,OAAO,EACPQ,WACAE,WAAYD,EAAanD,GACzBqD,YAAaF,EAAaG,gBAE3B9B,GAAG,KAAML,GACTV,MAAK,SAACC,GAAD,OAAcA,EAASC,SAE3B4C,EAAmB,SAACC,GAAD,OACvBrD,EACGI,KAAK,cACLU,OAAOuC,GACP/C,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,QAEb2C,EAAgB,kBACpBtD,EACGI,KAAK,cACLC,OAAO,KACPC,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,QAEb4C,EAAmB,SAACvC,EAAIR,GAAL,OACvBR,EAASI,KAAK,cAAcgB,OAAOZ,GAAMa,GAAG,KAAML,IAE9CwC,EAAmB,SAACxC,GAAD,OACvBhB,EACGI,KAAK,cACLa,SACAC,MAAM,CAAEF,OACRV,MAAK,SAACC,GAAD,OAAcA,EAASC,SAE3BiD,EAAsB,SAAC7B,GAAD,OAC1B5B,EACGI,KAAK,UACLC,OAAO,IAAK,CAAEqD,MAAO,UACrBrC,GAAG,eAAgBO,GACnBtB,MAAK,qBAAGoD,W,sFC/DEC,IAzDU,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,gBAAiBC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACzD,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EAAoB,WACxBD,GAAW,GACXE,cAAiB/D,MAAK,SAACgE,GACrBL,EACEK,EAAe/C,KAAI,SAACgD,GAAD,mBAAC,eACfA,GADc,IAEjBC,OAAQD,EAAWE,MACnBC,SAAUH,EAAWI,eAGzBR,GAAW,OAKf,OADAS,oBAAUR,EAAmB,IAE3B,cAAC,IAAD,CACES,MAAOb,EACPc,OAnBW,CAAC,SAAU,WAAY,YAoBlCC,aAAc,EACdC,aAAcZ,EACdF,QAASA,EACTe,YAAU,EACVC,YAAa,CACXC,SAAU,SAACC,GAAD,OACR,oBAAIxG,UAAU,OAAd,SACE,cAAC,KAAD,CAAMA,UAAU,qBAAhB,SACE,cAAC,IAAD,CAAMC,IAAI,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIJ,UAAU,eAA7C,SACE,cAAC,KAAD,CACEA,UAAW,OACXyG,QAAS,KACT3G,MAAO,UACPY,MACEwE,GACgB,OAAZD,QAAY,IAAZA,OAAA,EAAAA,EAAc7C,MAAOoE,EAAKpE,GAC1B6C,IAAiBuB,EAAKpE,GAE5BsE,QACExB,GACgB,OAAZD,QAAY,IAAZA,OAAA,EAAAA,EAAc7C,MAAOoE,EAAKpE,GAC1B6C,IAAiBuB,EAAKpE,GAE5BzB,SAAU,kBAAMqE,EAAgBE,EAAYsB,EAAOA,EAAKpE,UAhBpBoE,EAAKpE,Y,iCClC3D,wEAAQhB,EAAaC,EAAQ,IAArBD,SAEFuF,EAAiB,SAACC,GAAD,OACrBxF,EACGI,KAAK,YACLU,OAAO0E,GACPlF,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,QAEb8E,EAAiB,SAACD,EAAcE,GAAf,OACrB1F,EACGI,KAAK,YACLgB,OAAOoE,GACPnE,GAAG,KAAMqE,GACTpF,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,S,qOCkhCJgF,IAh/BI,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WACnBrE,EAASsE,YAAe,CAAC,SAAzBtE,KACFuE,EAAWC,cACjB,EAA8DjC,mBAAS,IAAvE,mBAAOkC,EAAP,KAAgCC,EAAhC,KACA,EAAwDnC,mBAAS,IAAjE,mBAAOoC,EAAP,KAA6BC,EAA7B,KAEA,EAAsCrC,oBAAS,GAA/C,mBAAOsC,EAAP,KAAoBC,EAApB,KACA,EAAoDvC,oBAAS,GAA7D,mBAAOwC,EAAP,KAA2BC,EAA3B,KACA,EACEzC,oBAAS,GADX,mBAAO0C,EAAP,KAAkCC,EAAlC,KAEA,EAAwC3C,mBAAS,IAAjD,mBAAO4C,EAAP,KAAqBC,EAArB,KACA,EAAgC7C,mBAAS,IAAzC,mBAAO8C,EAAP,KAAiBC,EAAjB,KACA,EAAsC/C,mBAAS,IAA/C,oBAAOgD,GAAP,MAAoBC,GAApB,MACA,GAAkDjD,mBAAS,IAA3D,qBAAOkD,GAAP,MAA0BC,GAA1B,MACA,GAA8CnD,mBAAS,IAAvD,qBAAOoD,GAAP,MAAwBC,GAAxB,MACA,GAA8CrD,mBAAS,IAAvD,qBAAOsD,GAAP,MAAwBC,GAAxB,MA4HMC,GAAW,SAACC,GAChB,OAAQA,GACN,KAAK,EACH,MAAO,UACT,QACE,MAAO,SAGPC,GAAmB,SAACC,GACxB,OAAQA,GACN,IAAK,OACH,MAAO,UACT,IAAK,QACH,MAAO,UACT,QACE,MAAO,YAqHPC,GAAgB,SAACD,GACrB,OAAQA,GACN,IAAK,OACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,QACE,OAAO,IA0Cb,OACE,qCACE,cAAC,KAAD,UACGE,OAAOC,KAAKjC,GACVkC,MAAK,SAACC,EAAGC,GAAJ,OAAUL,GAAcI,GAAKJ,GAAcK,MAChDzG,KAAI,SAACmG,GAAD,OACH,cAAC,IAAD,CAAM5I,GAAG,KAAKmJ,GAAG,IAAjB,SACE,eAAC,IAAD,CAAOtI,MAAO,CAAEuI,aAAc,IAA9B,UACE,cAAC,IAAD,CACEvI,MAAO,CACLwI,gBAAiBV,GAAiBC,GAClCU,WAAY,OACZ1J,MAAO,OACP2J,SAAU,GACVC,UAAW,UANf,SASGZ,IAEH,cAAC,IAAD,UACGE,OAAOC,KAAKU,IAAEC,QAAQ5C,EAAM8B,GAAW,aAAanG,KACnD,SAACkH,GAAD,OACE,qCACE,cAAC,KAAD,UACE,oBACE9I,MAAO,CACL0I,SAAU,GACVD,WAAY,OACZE,UAAW,SACXI,MAAO,QALX,SAQG5G,IAAO2G,GAAME,OAAO,kBAGxBJ,IAAEC,QAAQ5C,EAAM8B,GAAW,YAAYe,GAAMlH,KAC5C,SAACqH,GAAD,qBACE,mCACE,eAAC,IAAD,CACE9J,GAAG,KACHmJ,GAAG,KACHtI,MAAO,CACLuI,aAAc,EACdW,OAAO,aAAD,OAAepB,GACnBC,IAEFoB,QAAS,GACTC,UAAW,IATf,UAYE,eAAC,KAAD,WACE,eAAC,IAAD,CAAMjK,GAAG,IAAImJ,GAAG,IAAhB,UACE,oBACEtI,MAAO,CACL0I,SAAU,GACVD,WAAY,QAHhB,mBAMMQ,EAAK5H,GANX,YAMiB4H,EAAKI,OAAOC,QAE7B,cAAC,IAAD,CAAQvK,MAAO6I,GAASqB,EAAKM,SAA7B,SACoB,IAAjBN,EAAKM,QACF,aACA,qBAIR,cAAC,IAAD,CAAMpK,GAAG,IAAImJ,GAAG,IAAhB,SACE,eAAC,KAAD,CACEkB,KAAI,0BAAqBP,EAAK5H,IAC9BnB,GAAE,0BAAqB+I,EAAK5H,IAC5B7B,KAAK,KACLQ,MAAO,CACLkJ,OAAO,aAAD,OAAepB,GACnBC,KAGJpI,MAAOsJ,EAAKQ,SACZ7J,SAAU,gBA5LZ8J,EAAQD,EA4LiB9J,EAAb,EAAGgK,OAAUhK,MAAb,OA5LZ+J,EA6L6BT,EAAK5H,GA7L1BoI,EA6L8B9J,EA5LtEyG,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CAAEC,MAAM,EAAMzJ,KAAM,UAAW0J,MAAO,sBAEjDC,YAAW,CAAE1I,GAAIqI,EAAQD,aAAY9I,MAAK,WACxCuF,IACAE,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CACPC,MAAM,EACNzJ,KAAM,UACN0J,MAAO,sCAGXE,YAAW,WACT5D,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CACPC,MAAM,EACNzJ,KAAM,GACN0J,MAAO,QAGV,SA0J2B,UAcE,wBAAQnK,MAAM,OAAd,kBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,OAAd,0BAIN,eAAC,KAAD,CAAMK,MAAO,CAAEoJ,UAAW,IAA1B,UACE,cAAC,IAAD,CAAMjK,GAAG,IAAImJ,GAAG,IAAhB,SACE,cAAC,IAAD,CACEvJ,MAAM,YACNO,QAAS,kBA/PlB,SAACoK,GAC1B,GAAIpD,IAA4BoD,EAG9B,OAFArC,GAAe,IACfF,EAAY,IACLZ,EAA2B,IAEpC0D,YAAgBP,GAAQ/I,MAAK,SAACuJ,GAC5B/C,EAAY+C,GACZ3D,EACED,IAA4BoD,EAAS,GAAKA,MAuPVS,CAAmBlB,EAAK5H,KAH5B,SAME,cAAC,IAAD,CACE9B,QAAS6K,IAAQC,iBACjB7K,KAAK,WAIX,cAAC,IAAD,CAAML,GAAG,IAAImJ,GAAG,IAAhB,SACE,cAAC,IAAD,CACEvJ,MAAM,OACNO,QAAS,kBACPmH,EACED,IAAyByC,EAAK5H,GAC1B,GACA4H,EAAK5H,KANf,SAUE,cAAC,IAAD,CACE9B,QAAS6K,IAAQE,UACjB9K,KAAK,WAIS,KAAf,OAAJqC,QAAI,IAAJA,OAAA,EAAAA,EAAM0I,MAAMlJ,KACgB,KAA3B,UAAA4H,EAAKuB,kBAAL,eAAiBD,QACf,cAAC,IAAD,CAAMpL,GAAG,IAAImJ,GAAG,IAAhB,SACE,cAAC,IAAD,CACEvJ,MAAM,UACNO,QAAS,WACPiI,GAAqB,CACnBiD,WAAYvB,EAAKuB,WACjBd,OAAQT,EAAK5H,KAEfwF,GAAsB,IAP1B,SAUE,cAAC,IAAD,CACEtH,QAAS6K,IAAQK,QACjBjL,KAAK,WAKG,IAAjByJ,EAAKM,SACJ,cAAC,IAAD,CAAMpK,GAAG,IAAImJ,GAAG,IAAhB,SACE,cAAC,IAAD,CACEhJ,QAAS,kBA1ZvB,SAACoL,EAAUtK,EAAMS,GAKvC,GAJAuF,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CAAEC,MAAM,EAAMzJ,KAAM,UAAW0J,MAAO,iBAExB,IAArBY,EAASnB,QAAe,OAAO,KACtB,IAATnJ,GAAuB,IAATA,IACZS,EAAKQ,GACPhB,WACGI,KAAK,WACLkK,OAAO9J,GACPF,MAAK,eAERN,WACGI,KAAK,WACLU,OAAON,GACPF,MAAK,gBAGC,IAATP,GAAuB,IAATA,IACZS,EAAK+J,KAAKvJ,GACZwJ,YACEjC,IAAEkC,KAAKjK,EAAK+J,KAAM,WAClB/J,EAAKkK,SACLlK,EAAKmK,QACLnK,EAAKoK,UAGPC,YACErK,EAAK+J,KACL/J,EAAKkK,SACLlK,EAAKmK,QACLnK,EAAKoK,WAIE,KAAT7K,GAAwB,KAATA,KACjB,OAAIS,QAAJ,IAAIA,OAAJ,EAAIA,EAAMQ,IACRG,YAAaoH,IAAEkC,KAAKjK,EAAM,MAAOA,EAAKQ,IAEtCJ,YAAaJ,IAGJ,KAATT,GACF+K,QAAQC,IAAI,CAACvK,EAAKe,KAAI,gBAAGP,EAAH,EAAGA,GAAH,OAAY8B,YAAU9B,QAEjC,KAATjB,GAAwB,KAATA,IACbS,EAAKQ,GACPyE,YAAe8C,IAAEkC,KAAKjK,EAAM,MAAOA,EAAKQ,IAExCuE,YAAegD,IAAEkC,KAAKjK,EAAM,QAGnB,KAATT,GACFiL,YAAa,CAAEhK,GAAIqJ,EAAS/H,SAAU4G,QAAS,IAAK5I,MAAK,eAE9C,KAATP,GACFiL,YAAa,CAAEhK,GAAIqJ,EAAS/H,SAAU4G,QAAS,IAAK5I,MAAK,eAE3DN,WACGI,KAAK,QACLgB,OAAOiJ,GACPhJ,GAAG,KAAMgJ,EAASrJ,IAClBV,MAAK,WACJuF,IACAS,GAAe,GACfP,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CACPC,MAAM,EACNzJ,KAAM,UACN0J,MAAO,wBAGXE,YAAW,WACT5D,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CACPC,MAAM,EACNzJ,KAAM,GACN0J,MAAO,QAGV,QAwU+BwB,CACE,CACEjK,GAAI4H,EAAK5H,GACTkI,QACmB,IAAjBN,EAAKM,QAAgB,EAAI,EAC3B5G,SAAUsG,EAAKtG,SAAStB,IAE1B4H,EAAKI,OAAOhI,GACZ4H,EAAKsC,OAGTxM,MAAM,UAbR,SAeE,cAAC,IAAD,CACEQ,QAAS6K,IAAQoB,SACjBhM,KAAK,WAKO,KAAnByJ,EAAKI,OAAOhI,IAA8B,IAAjB4H,EAAKM,SAC7B,cAAC,IAAD,CAAMpK,GAAG,IAAImJ,GAAG,IAAhB,SACE,cAAC,IAAD,CACEhJ,QAAS,WACPwD,YACEmG,EAAKtG,SAAStB,IACdV,KAAK8G,IACPR,EAAgBgC,GAChBlC,GAA6B,IAE/BhI,MAAM,UARR,SAUE,cAAC,IAAD,CACEQ,QAAS6K,IAAQqB,QACjBjM,KAAK,cAMf,cAAC,IAAD,CACEqK,KAAMvD,IAA4B2C,EAAK5H,GADzC,SAGE,eAAC,IAAD,WACG6F,EAAStF,KAAI,SAAC8J,GAAD,OACZ,eAAC,KAAD,WACE,cAAC,IAAD,CAAMvM,GAAG,KAAKmJ,GAAG,IAAjB,SACE,cAAC,IAAD,CACE/I,QAAS6K,IAAQK,QACjBjL,KAAK,SAGT,cAAC,IAAD,CAAML,GAAG,KAAKmJ,GAAG,KAAjB,SACE,uCAAQoD,EAAQ3I,OAAO+B,MAAvB,YAAgC4G,EAAQ3I,OAAOiC,cAEjD,cAAC,IAAD,CAAMsD,GAAG,MACT,eAAC,IAAD,CAAMnJ,GAAG,KAAKmJ,GAAG,KAAjB,UACE,mBACEtI,MAAO,CACLwI,gBAAiB,YACjBD,aAAc,EACdY,QAAS,EACTwC,cAAe,IALnB,SAQGD,EAAQE,UAEX,mBACE5L,MAAO,CACL0I,SAAU,GACVD,WAAY,OACZoD,SAAU,WACVC,OAAQ,EACRC,MAAO,IANX,SASG5J,IAAOuJ,EAAQxJ,WAAW8G,OACzB,qBAhCG0C,EAAQrK,OAuCrB,cAAC,KAAD,UACE,cAAC,IAAD,CACElC,GAAG,KACHmJ,GAAG,KACHtI,MAAO,CAAEoJ,UAAW,IAHtB,SAKE,cAAC,IAAD,CAAM/J,GAAG,KAAT,SACE,eAAC,IAAD,CACEW,MAAO,CACLkJ,OAAQ,kBACRX,aAAc,GAHlB,UAME,cAAC,IAAD,CACEnI,KAAK,QACLF,GAAG,gBACHsJ,KAAK,gBACLwC,YAAY,wBACZhM,MAAO,CACLkJ,OAAQ,mBAEVvJ,MAAOyH,GACPxH,SAAU,gBACED,EADF,EACRgK,OAAUhK,MADF,OAEJ0H,GAAe1H,MAEvB,cAAC,IAAD,UACE,cAAC,IAAD,CACEL,QAAS,kBArZzBoK,EAsZuCT,EAAK5H,GArZxE+E,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CAAEC,MAAM,EAAMzJ,KAAM,UAAW0J,MAAO,sBAEjDmC,YAAkB,CAAEvC,SAAQkC,QAASxE,GAAarE,OAAQlB,EAAKR,KAAMV,MACnE,SAACuL,GACC/E,EAAY,GAAD,mBACND,GADM,CAET,CACE7F,GAAI6K,EACJnJ,OAAQ,CAAE+B,MAAOjD,EAAKiD,MAAOE,SAAUnD,EAAKmD,UAC5CmH,SAAUhK,MAASC,SACnBsH,SACAkC,QAASxE,OAGbhB,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CACPC,MAAM,EACNzJ,KAAM,UACN0J,MAAO,4BAGXE,YAAW,WACT5D,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CACPC,MAAM,EACNzJ,KAAM,GACN0J,MAAO,QAGV,KACHzC,GAAe,IACf4C,YAAgBP,MApCO,IAACA,GAoZc,SAKE,cAAC,IAAD,CACEnK,QAAS6K,IAAQgC,4BAUnC,cAAC,IAAD,CACEvC,KAAMrD,IAAyByC,EAAK5H,GADtC,SAGE,eAAC,IAAD,WACE,eAAC,KAAD,CACErB,MAAO,CACLwI,gBAAiB,YACjBD,aAAc,EACdY,QAAS,EACTC,UAAW,IALf,UAQE,cAAC,IAAD,CAAMd,GAAG,KAAT,SACE,oBAAItI,MAAO,CAAEyI,WAAY,QAAzB,2BACcQ,EAAKtG,SAASmC,MAD5B,YACqCmE,EAAKtG,SAASqC,cAGrD,cAAC,IAAD,CAAMsD,GAAG,KAAT,SACE,oBAAItI,MAAO,CAAEyI,WAAY,QAAzB,6BACgBQ,EAAKtG,SAAS0J,iBAGhC,cAAC,IAAD,CAAM/D,GAAG,KAAT,SACE,oBAAItI,MAAO,CAAEyI,WAAY,QAAzB,wBACWQ,EAAKtG,SAAS2J,SAG3B,cAAC,IAAD,CAAMhE,GAAG,KAAT,SACE,oBAAItI,MAAO,CAAEyI,WAAY,QAAzB,wCACiBQ,EAAKtG,gBADtB,iBACiB,EAAeqI,QAAQ,GAAGuB,iBAD3C,aACiB,EAAqCC,YADtD,uBACsEvD,EAAKtG,gBAD3E,iBACsE,EAAeqI,QAAQ,GAAGuB,iBADhG,aACsE,EAAqCE,sBAI3F,KAAf,OAAJ5K,QAAI,IAAJA,OAAA,EAAAA,EAAM0I,MAAMlJ,KACX,eAAC,KAAD,CACErB,MAAO,CACLwI,gBAAiB,YACjBD,aAAc,EACdY,QAAS,EACTC,UAAW,IALf,UAQE,cAAC,IAAD,CAAMd,GAAG,KAAT,SACE,oBAAItI,MAAO,CAAEyI,WAAY,QAAzB,iCAIF,cAAC,IAAD,CAAMH,GAAG,KAAT,SACE,oBAAItI,MAAO,CAAEyI,WAAY,QAAzB,2BACcQ,EAAKuB,WAAW1F,MAD9B,YACuCmE,EAAKuB,WAAWxF,cAGzD,cAAC,IAAD,CAAMsD,GAAG,KAAT,SACE,oBAAItI,MAAO,CAAEyI,WAAY,QAAzB,6BACgBQ,EAAKuB,WAAW6B,iBAGlC,cAAC,IAAD,CAAM/D,GAAG,KAAT,SACE,oBAAItI,MAAO,CAAEyI,WAAY,QAAzB,wBACWQ,EAAKuB,WAAW8B,YAKjC,eAAC,KAAD,CACEtM,MAAO,CACLwI,gBAAiB,YACjBD,aAAc,EACdY,QAAS,EACTC,UAAW,IALf,UAQE,cAAC,IAAD,CAAMd,GAAG,KAAT,SACE,oBAAItI,MAAO,CAAEyI,WAAY,QAAzB,oBAIF,cAAC,IAAD,CAAMH,GAAG,KAAT,SACE,4BAAIW,EAAKyD,YAGb,eAAC,KAAD,CACE1M,MAAO,CACLwI,gBAAiB,YACjBD,aAAc,EACdY,QAAS,EACTC,UAAW,IALf,UAQE,cAAC,IAAD,CAAMd,GAAG,KAAT,SACE,oBAAItI,MAAO,CAAEyI,WAAY,QAAzB,qCAIF,cAAC,IAAD,CAAMH,GAAG,yCAoNzC,eAAC,KAAD,CACEuB,KAAMnD,EACN3H,MAAM,SACN4N,QAAS,WACP1F,IACAN,GAAgBD,IAElBlH,KAAK,KAPP,UASE,cAAC,KAAD,CAAcoN,aAAW,EAAzB,SACE,cAAC,KAAD,+BAEF,eAAC,KAAD,WACE,cAAC,IAAD,CAAS7N,MAAM,SAASO,QA33Bb,WACjB8G,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CAAEC,MAAM,EAAMzJ,KAAM,UAAW0J,MAAO,iBAEjDzJ,WACGI,KAAK,QACLa,SACAC,MAAM,CAAEF,GAAI2F,EAAa3F,KACzBV,MAAK,WACJsG,IACAf,IACAS,GAAe,GACfP,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CACPC,MAAM,EACNzJ,KAAM,UACN0J,MAAO,sBAGXE,YAAW,WACT5D,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CACPC,MAAM,EACNzJ,KAAM,GACN0J,MAAO,QAGV,SA61BD,gBAGA,cAAC,IAAD,CACExK,QAAS,WACP2H,IACAN,GAAgBD,IAElB3H,MAAM,YALR,sBAWJ,eAAC,KAAD,CAAQ8K,KAAMjD,EAAoB+F,QAAS9F,EAA3C,UACE,cAAC,KAAD,CAAc+F,aAAW,EAAzB,SACE,cAAC,KAAD,wDAEF,cAAC,KAAD,UACE,cAAC,IAAD,CACE3I,gBAAiB,SAACtE,GAChB4H,GAAqB,2BAAKD,IAAN,IAAyBkD,WAAY7K,MAE3DuE,aAAY,OAAEoD,SAAF,IAAEA,QAAF,EAAEA,GAAmBkD,eAGrC,cAAC,KAAD,UACE,cAAC,IAAD,CAASzL,MAAM,UAAUO,QA1rBC,WAChC8G,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CAAEC,MAAM,EAAMzJ,KAAM,UAAW0J,MAAO,iBAEjDC,YAAW,CACT1I,GAAIiG,GAAkBoC,OACtBc,WAAYlD,GAAkBkD,aAC7B7J,MAAK,WACN4G,IAAqB,GACrBV,GAAsB,GACtBX,IACAE,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CACPC,MAAM,EACNzJ,KAAM,UACN0J,MAAO,wBAGXE,YAAW,WACT5D,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CACPC,MAAM,EACNzJ,KAAM,GACN0J,MAAO,QAGV,SA6pBC,0BAKJ,eAAC,KAAD,CACED,KAAM/C,EACN6F,QAAS5F,EAFX,UAIE,cAAC,KAAD,CAAc6F,aAAW,EAAzB,SACE,cAAC,KAAD,2BAEF,cAAC,KAAD,UACE,eAAC,KAAD,CAAMC,gBAAgB,SAAtB,UACE,cAAC,IAAD,CAAM1N,GAAG,KAAKmJ,GAAG,IAAjB,SACE,cAAC,IAAD,CACEwE,SAAO,EACPtD,KAAK,SACLuD,QAASvF,GACNwF,QAAO,qBAAGpK,SACVhB,KAAI,SAACqL,GAAD,MAAa,CAChBtN,MAAOuN,SAASD,EAAO5K,QACvByH,MAAOmD,EAAOhL,aAAaqH,KAC3BjI,GAAI4L,EAAO5L,OAEfpC,UAAU,qBACVkO,gBAAgB,SAChBxN,MAAO+H,GACP9H,SAAU+H,OAGd,cAAC,IAAD,CAAMxI,GAAG,KAAKmJ,GAAG,IAAjB,SACE,cAAC,IAAD,CAASvJ,MAAM,OAAf,SACE,cAAC,IAAD,CACEa,SAAU,YAA2B,EAAxB+J,OAAUyD,MACrBhH,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CACPC,MAAM,EACNzJ,KAAM,UACN0J,MAAO,qBAGXE,YAAW,WACT5D,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CACPC,MAAM,EACNzJ,KAAM,GACN0J,MAAO,QAGV,MAnBP,oCA6BR,cAAC,KAAD,UACE,cAAC,IAAD,CAAS/K,MAAM,UAAUO,QA9sBT,WACtB8G,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CAAEC,MAAM,EAAMzJ,KAAM,UAAW0J,MAAO,iBAEjDqB,QAAQC,IAAI,CACV1D,GAAgB9F,KAAI,SAACqL,GAAD,OAAYzL,YAAa,CAAEoB,OAAO,GAAQqK,EAAO5L,OACrEgK,YAAa,CAAEhK,GAAI2F,EAAarE,SAAStB,GAAIkI,QAAS,IACtDQ,YAAW,CACT1I,GAAI2F,EAAa3F,GACjBkI,QAAS,MAEV5I,MAAK,WACNuF,IACAyB,GAAmB,IAEnBZ,GAA6B,GAC7BE,IACAb,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CACPC,MAAM,EACNzJ,KAAM,UACN0J,MAAO,wBAGXE,YAAW,WACT5D,EAAS,CACPhG,KAAM,WACNwJ,QAAS,CACPC,MAAM,EACNzJ,KAAM,GACN0J,MAAO,QAGV,SA2qBC,6B,iIC18BKuD,UApEK,WAClB,IAAQxL,EAASsE,YAAe,CAAC,SAAzBtE,KAER,EAA0BuC,mBAAS,IAAnC,mBAAO6B,EAAP,KAAcqH,EAAd,KACA,EAAoClJ,mBAAS,IAA7C,mBAAOmJ,EAAP,KAAmBC,EAAnB,KACA,EAAkDpJ,mBAAS,IAA3D,mBAAOqJ,EAAP,KAA0BC,EAA1B,KAEMxH,EAAa,WACjB,IAAIyH,EAAYtN,WACbI,KAAK,QACLC,OACC,qHAEDuC,MAAM,KAAM,CAAEC,WAAW,IACzB0K,GAAG,6BACHlM,GAAG,mBAAoB,GAEA,KAAtB+L,GACFE,EAAUjM,GAAG,gBAAiB+L,GAEhCE,EACGhN,MAAK,SAACC,GAAD,OAAc0M,EAAS1E,IAAEC,QAAQjI,EAASC,KAAM,gBACrDC,MAAMC,QAAQC,QAWnB,OAFAiE,oBAAUiB,EAAY,CAACuH,IACvBxI,qBAR0B,WACxB,UAAIpD,QAAJ,IAAIA,OAAJ,EAAIA,EAAMgM,OACR,OAAOC,YAAgB,OAACjM,QAAD,IAACA,OAAD,EAACA,EAAMgM,OAAO,GAAGtB,UAAUwB,eAAepN,KAC/D6M,KAKuB,QAAC3L,QAAD,IAACA,OAAD,EAACA,EAAMgM,SAElC,qCACE,eAAC,KAAD,CAAM7N,MAAO,CAAEgO,aAAc,IAA7B,UACE,cAAC,IAAD,CAAM7O,GAAG,KAAKmJ,GAAG,IAAjB,SACE,oBACEtI,MAAO,CACL0I,SAAU,GACVD,WAAY,QAHhB,oCASF,cAAC,IAAD,CAAMtJ,GAAG,KAAKmJ,GAAG,IAAjB,SACE,eAAC,KAAD,CACEkB,KAAK,mBACLtJ,GAAG,mBACHV,KAAK,KACLG,MAAO8N,EACP7N,SAAU,gBAAaD,EAAb,EAAGgK,OAAUhK,MAAb,OAA2B+N,EAAqB/N,IAL5D,UAOE,wBAAQA,MAAM,GAAd,mBACC4N,EAAW3L,KAAI,gBAAGgJ,EAAH,EAAGA,KAAH,OACd,wBACEjL,MAAOiL,EAAKvJ,GADd,mBAEKuJ,EAAK9F,MAFV,YAEmB8F,EAAK5F,uBAKhC,cAAC,IAAD,CAAYiB,MAAOA,EAAOC,WAAYA","file":"static/js/17.677b49f1.chunk.js","sourcesContent":["import React from \"react\";\nimport { CButton, CCol, CRow } from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\n\nconst ButtonOptionTable = ({ onPress, color, icon }) => {\n  return (\n    <td className=\"py-2\">\n      <CRow className=\"align-items-center\">\n        <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n          <CButton color={color} onClick={onPress}>\n            <CIcon content={icon} size=\"xl\" />\n          </CButton>\n        </CCol>\n      </CRow>\n    </td>\n  );\n};\n\nexport default ButtonOptionTable;\n","const UploadFile = ({ children, value, onChange, disabled, accept }) => {\n  return (\n    <label htmlFor=\"contained-button-file\" className=\"m-0 w-100\">\n      <input\n        value={value}\n        accept={accept}\n        disabled={disabled}\n        style={{ display: \"none\" }}\n        id=\"contained-button-file\"\n        multiple\n        type=\"file\"\n        onChange={disabled ? () => {} : onChange}\n      />\n      {children}\n    </label>\n  );\n};\n\nexport default UploadFile;\n","import moment from \"moment\";\n\nconst { supabase } = require(\"src/config/configSupabase\");\n\nconst getCharges = (limit) =>\n  supabase\n    .from(\"ChargeType\")\n    .select(\"*\")\n    .limit(limit * 5 + 1)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst createCharge = (chargesData) =>\n  supabase\n    .from(\"Charge\")\n    .insert(chargesData)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst deleteCharge = (ID) =>\n  supabase\n    .from(\"Charge\")\n    .delete()\n    .match({ ID })\n    .then((snapshot) => snapshot.data);\n\nconst updateCharge = (chargesData, ID) =>\n  supabase\n    .from(\"Charge\")\n    .update(chargesData)\n    .eq(\"ID\", ID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst chargeAutomatic = () =>\n  supabase\n    .from(\"User\")\n    .select(\"*\")\n    .eq(\"RolID\", 2)\n    .then((snapshot) => {\n      const users = snapshot.data;\n      users.map((user) =>\n        supabase\n          .from(\"UserProduct\")\n          .select(\"Product(*),ID,Price\")\n          .eq(\"UserID\", user.ID)\n          .then((productSnapshot) => {\n            const products = productSnapshot.data;\n            if (products.length === 0) return null;\n\n            return createCharge({\n              ChargeTypeID: 7,\n              CreatedAt: moment().toDate(),\n              Charge: products.reduce(\n                (previousValue, currentValue) =>\n                  previousValue + currentValue.Product.BasePrice,\n                0\n              ),\n              ClientID: user.ID,\n              State: false,\n              Remaining: 0,\n            });\n          })\n      );\n    })\n    .catch(console.error);\n\nconst getChargeUserID = (UserID) =>\n  supabase\n    .from(\"Charge\")\n    .select(\"*,ChargeTypeID(*)\")\n    .eq(\"ClientID\", UserID)\n    .eq(\"State\", false)\n    .then(({ data }) => data);\n\nconst getAllChargeUserID = (UserID) =>\n  supabase\n    .from(\"Charge\")\n    .select(\"*,ChargeTypeID(*)\")\n    .eq(\"ClientID\", UserID)\n    .order(\"CreatedAt\", { ascending: true })\n    .then((snapshot) => snapshot.data);\n\nconst createPay = (ID, UrlImage, DocumentData) =>\n  supabase\n    .from(\"Charge\")\n    .update({\n      State: true,\n      UrlImage,\n      DocumentID: DocumentData.id,\n      UrlDocument: DocumentData.urlPublicView,\n    })\n    .eq(\"ID\", ID)\n    .then((snapshot) => snapshot.data);\n\nconst createTypeCharge = (dataCharge) =>\n  supabase\n    .from(\"ChargeType\")\n    .insert(dataCharge)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst getTypeCharge = () =>\n  supabase\n    .from(\"ChargeType\")\n    .select(\"*\")\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst updateChargeType = (ID, data) =>\n  supabase.from(\"ChargeType\").update(data).eq(\"ID\", ID);\n\nconst deleteChargeType = (ID) =>\n  supabase\n    .from(\"ChargeType\")\n    .delete()\n    .match({ ID })\n    .then((snapshot) => snapshot.data);\n\nconst countChargeAssigned = (ChargeTypeID) =>\n  supabase\n    .from(\"Charge\")\n    .select(\"*\", { count: \"exact\" })\n    .eq(\"ChargeTypeID\", ChargeTypeID)\n    .then(({ count }) => count);\n\nexport {\n  createCharge,\n  deleteCharge,\n  updateCharge,\n  chargeAutomatic,\n  getChargeUserID,\n  getAllChargeUserID,\n  createPay,\n  createTypeCharge,\n  updateChargeType,\n  getTypeCharge,\n  getCharges,\n  deleteChargeType,\n  countChargeAssigned,\n};\n","import React, { useEffect, useState } from \"react\";\nimport { CCol, CDataTable, CRow, CSwitch } from \"@coreui/react\";\nimport { getTechnicians } from \"src/state/querys/Users\";\n\nconst TechniciansTable = ({ setTechnicianID, TechnicianID, isAllData }) => {\n  const [technicians, setTechnicians] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const fields = [\"nombre\", \"apellido\", \"opciones\"];\n  const techniciansEffect = () => {\n    setLoading(true);\n    getTechnicians().then((techniciansApi) => {\n      setTechnicians(\n        techniciansApi.map((technician) => ({\n          ...technician,\n          nombre: technician.Names,\n          apellido: technician.LastName,\n        }))\n      );\n      setLoading(false);\n    });\n  };\n\n  useEffect(techniciansEffect, []);\n  return (\n    <CDataTable\n      items={technicians}\n      fields={fields}\n      itemsPerPage={5}\n      onPageChange={techniciansEffect}\n      loading={loading}\n      pagination\n      scopedSlots={{\n        opciones: (item) => (\n          <td className=\"py-2\">\n            <CRow className=\"align-items-center\" key={item.ID}>\n              <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n                <CSwitch\n                  className={\"mx-1\"}\n                  variant={\"3d\"}\n                  color={\"success\"}\n                  value={\n                    isAllData\n                      ? TechnicianID?.ID === item.ID\n                      : TechnicianID === item.ID\n                  }\n                  checked={\n                    isAllData\n                      ? TechnicianID?.ID === item.ID\n                      : TechnicianID === item.ID\n                  }\n                  onChange={() => setTechnicianID(isAllData ? item : item.ID)}\n                />\n              </CCol>\n            </CRow>\n          </td>\n        ),\n      }}\n    />\n  );\n};\n\nexport default TechniciansTable;\n","const { supabase } = require(\"src/config/configSupabase\");\n\nconst createDiscount = (DiscountData) =>\n  supabase\n    .from(\"Discount\")\n    .insert(DiscountData)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst updateDiscount = (DiscountData, discountID) =>\n  supabase\n    .from(\"Discount\")\n    .update(DiscountData)\n    .eq(\"ID\", discountID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nexport { createDiscount, updateDiscount };\n","import {\n  CBadge,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CCollapse,\n  CInput,\n  CInputGroup,\n  CInputGroupAppend,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n  CSelect,\n} from \"@coreui/react\";\nimport React, { useState } from \"react\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport Select from \"react-select\";\n\nimport { supabase } from \"src/config/configSupabase\";\nimport { useKeySelector } from \"src/hook/general\";\nimport {\n  createCharge,\n  createPay,\n  getChargeUserID,\n  updateCharge,\n} from \"src/state/querys/Charges\";\nimport { createDiscount, updateDiscount } from \"src/state/querys/Discount\";\nimport {\n  createUserFinishTask,\n  updateUserFinishTask,\n  updateUserID,\n} from \"src/state/querys/Users\";\nimport {\n  createCommentTask,\n  getCommentsTask,\n  updateTask,\n} from \"src/state/querys/Tasks\";\nimport CIcon from \"@coreui/icons-react\";\nimport { freeSet } from \"@coreui/icons\";\nimport TechniciansTable from \"./TechniciansTable\";\nimport { UploadFile } from \"../buttons\";\nimport { useDispatch } from \"react-redux\";\n\nconst TasksTable = ({ tasks, taskEffect }) => {\n  const { user } = useKeySelector([\"user\"]);\n  const dispatch = useDispatch();\n  const [showCollapseCommentTask, setShowCollapseCommentTask] = useState(\"\");\n  const [showCollapseInfoTask, setShowCollapseInfoTask] = useState(\"\");\n\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [showTechnicalModal, setShowTechnicalModal] = useState(false);\n  const [showTechnicalPaymentModal, setShowTechnicalPaymentModal] =\n    useState(false);\n  const [taskSelected, setTaskSelected] = useState({});\n  const [comments, setComments] = useState([]);\n  const [textComment, setTextComment] = useState(\"\");\n  const [technicalSelected, setTechnicalSelected] = useState({});\n  const [chargesUserTask, setChargesUserTask] = useState([]);\n  const [chargesSelected, setChargesSelected] = useState([]);\n  // const [files, setFiles] = useState([]);\n\n  const deleteTask = () => {\n    dispatch({\n      type: \"SET_TOAS\",\n      payload: { show: true, type: \"loading\", label: \"Cargando...\" },\n    });\n    supabase\n      .from(\"Task\")\n      .delete()\n      .match({ ID: taskSelected.ID })\n      .then(() => {\n        setTaskSelected();\n        taskEffect();\n        setDeleteModal(false);\n        dispatch({\n          type: \"SET_TOAS\",\n          payload: {\n            show: true,\n            type: \"success\",\n            label: \"Tarea Eliminada!\",\n          },\n        });\n        setTimeout(() => {\n          dispatch({\n            type: \"SET_TOAS\",\n            payload: {\n              show: false,\n              type: \"\",\n              label: \"\",\n            },\n          });\n        }, 3000);\n      });\n  };\n\n  const changeStateTask = (dataTask, type, data) => {\n    dispatch({\n      type: \"SET_TOAS\",\n      payload: { show: true, type: \"loading\", label: \"Cargando...\" },\n    });\n    if (dataTask.StateID === 1) return null;\n    if (type === 6 || type === 7) {\n      if (data.ID) {\n        supabase\n          .from(\"Product\")\n          .upsert(data)\n          .then(() => {});\n      } else {\n        supabase\n          .from(\"Product\")\n          .insert(data)\n          .then(() => {});\n      }\n    }\n    if (type === 8 || type === 9) {\n      if (data.User.ID) {\n        updateUserFinishTask(\n          _.omit(data.User, \"Address\"),\n          data.Products,\n          data.Address,\n          data.OfficeID\n        );\n      } else {\n        createUserFinishTask(\n          data.User,\n          data.Products,\n          data.Address,\n          data.OfficeID\n        );\n      }\n    }\n    if (type === 10 || type === 11) {\n      if (data?.ID) {\n        updateCharge(_.omit(data, \"ID\"), data.ID);\n      } else {\n        createCharge(data);\n      }\n    }\n    if (type === 12) {\n      Promise.all([data.map(({ ID }) => createPay(ID))]);\n    }\n    if (type === 13 || type === 14) {\n      if (data.ID) {\n        updateDiscount(_.omit(data, \"ID\"), data.ID);\n      } else {\n        createDiscount(_.omit(data, \"ID\"));\n      }\n    }\n    if (type === 16) {\n      updateUserID({ ID: dataTask.ClientID, StateID: 2 }).then(() => {});\n    }\n    if (type === 17) {\n      updateUserID({ ID: dataTask.ClientID, StateID: 1 }).then(() => {});\n    }\n    supabase\n      .from(\"Task\")\n      .update(dataTask)\n      .eq(\"ID\", dataTask.ID)\n      .then(() => {\n        taskEffect();\n        setDeleteModal(false);\n        dispatch({\n          type: \"SET_TOAS\",\n          payload: {\n            show: true,\n            type: \"success\",\n            label: \"Operacion Exitosa!\",\n          },\n        });\n        setTimeout(() => {\n          dispatch({\n            type: \"SET_TOAS\",\n            payload: {\n              show: false,\n              type: \"\",\n              label: \"\",\n            },\n          });\n        }, 3000);\n      });\n  };\n\n  const getBadge = (status) => {\n    switch (status) {\n      case 2:\n        return \"success\";\n      default:\n        return \"info\";\n    }\n  };\n  const getColorPriority = (priority) => {\n    switch (priority) {\n      case \"Alta\":\n        return \"#b50909\";\n      case \"Media\":\n        return \"#ffbe2e\";\n      default:\n        return \"#00bde3\";\n    }\n  };\n  const commentsTaskEffect = (TaskID) => {\n    if (showCollapseCommentTask === TaskID) {\n      setTextComment(\"\");\n      setComments([]);\n      return setShowCollapseCommentTask(\"\");\n    }\n    getCommentsTask(TaskID).then((commentsApi) => {\n      setComments(commentsApi);\n      setShowCollapseCommentTask(\n        showCollapseCommentTask === TaskID ? \"\" : TaskID\n      );\n    });\n  };\n  const handleCreateComments = (TaskID) => {\n    dispatch({\n      type: \"SET_TOAS\",\n      payload: { show: true, type: \"loading\", label: \"Cargando...\" },\n    });\n    createCommentTask({ TaskID, Comment: textComment, UserID: user.ID }).then(\n      (newCommentID) => {\n        setComments([\n          ...comments,\n          {\n            ID: newCommentID,\n            UserID: { Names: user.Names, LastName: user.LastName },\n            createAt: moment().toDate(),\n            TaskID,\n            Comment: textComment,\n          },\n        ]);\n        dispatch({\n          type: \"SET_TOAS\",\n          payload: {\n            show: true,\n            type: \"success\",\n            label: \"Comentario Guardado...\",\n          },\n        });\n        setTimeout(() => {\n          dispatch({\n            type: \"SET_TOAS\",\n            payload: {\n              show: false,\n              type: \"\",\n              label: \"\",\n            },\n          });\n        }, 3000);\n        setTextComment(\"\");\n        getCommentsTask(TaskID);\n      }\n    );\n  };\n  const handleChangePriorityTask = (TaskID, Priority) => {\n    dispatch({\n      type: \"SET_TOAS\",\n      payload: { show: true, type: \"loading\", label: \"Cargando...\" },\n    });\n    updateTask({ ID: TaskID, Priority }).then(() => {\n      taskEffect();\n      dispatch({\n        type: \"SET_TOAS\",\n        payload: {\n          show: true,\n          type: \"success\",\n          label: \"Prioridad Cambiada Correctamente\",\n        },\n      });\n      setTimeout(() => {\n        dispatch({\n          type: \"SET_TOAS\",\n          payload: {\n            show: false,\n            type: \"\",\n            label: \"\",\n          },\n        });\n      }, 3000);\n    });\n  };\n\n  const handleChangeTechnicalTask = () => {\n    dispatch({\n      type: \"SET_TOAS\",\n      payload: { show: true, type: \"loading\", label: \"Cargando...\" },\n    });\n    updateTask({\n      ID: technicalSelected.TaskID,\n      AssignedID: technicalSelected.AssignedID,\n    }).then(() => {\n      setTechnicalSelected(false);\n      setShowTechnicalModal(false);\n      taskEffect();\n      dispatch({\n        type: \"SET_TOAS\",\n        payload: {\n          show: true,\n          type: \"success\",\n          label: \"Operacion Exitosa!\",\n        },\n      });\n      setTimeout(() => {\n        dispatch({\n          type: \"SET_TOAS\",\n          payload: {\n            show: false,\n            type: \"\",\n            label: \"\",\n          },\n        });\n      }, 3000);\n    });\n  };\n\n  const orderPriority = (priority) => {\n    switch (priority) {\n      case \"Alta\":\n        return 0;\n      case \"Media\":\n        return 1;\n      default:\n        return 2;\n    }\n  };\n  const onFinishPayment = () => {\n    dispatch({\n      type: \"SET_TOAS\",\n      payload: { show: true, type: \"loading\", label: \"Cargando...\" },\n    });\n    Promise.all([\n      chargesSelected.map((charge) => updateCharge({ State: true }, charge.ID)),\n      updateUserID({ ID: taskSelected.ClientID.ID, StateID: 1 }),\n      updateTask({\n        ID: taskSelected.ID,\n        StateID: 2,\n      }),\n    ]).then(() => {\n      taskEffect();\n      setChargesSelected([]);\n      // setFiles();\n      setShowTechnicalPaymentModal(false);\n      setTaskSelected();\n      dispatch({\n        type: \"SET_TOAS\",\n        payload: {\n          show: true,\n          type: \"success\",\n          label: \"Operacion Exitosa!\",\n        },\n      });\n      setTimeout(() => {\n        dispatch({\n          type: \"SET_TOAS\",\n          payload: {\n            show: false,\n            type: \"\",\n            label: \"\",\n          },\n        });\n      }, 3000);\n    });\n  };\n\n  return (\n    <>\n      <CRow>\n        {Object.keys(tasks)\n          .sort((a, b) => orderPriority(a) - orderPriority(b))\n          .map((priority) => (\n            <CCol xs=\"12\" lg=\"4\">\n              <CCard style={{ borderRadius: 20 }}>\n                <CCardHeader\n                  style={{\n                    backgroundColor: getColorPriority(priority),\n                    fontWeight: \"bold\",\n                    color: \"#fff\",\n                    fontSize: 16,\n                    textAlign: \"center\",\n                  }}\n                >\n                  {priority}\n                </CCardHeader>\n                <CCardBody>\n                  {Object.keys(_.groupBy(tasks[priority], \"DeadLine\")).map(\n                    (date) => (\n                      <>\n                        <CRow>\n                          <h6\n                            style={{\n                              fontSize: 16,\n                              fontWeight: \"bold\",\n                              textAlign: \"center\",\n                              width: \"100%\",\n                            }}\n                          >\n                            {moment(date).format(\"DD-MM-YYYY\")}\n                          </h6>\n                        </CRow>\n                        {_.groupBy(tasks[priority], \"DeadLine\")[date].map(\n                          (task) => (\n                            <>\n                              <CCol\n                                xs=\"12\"\n                                lg=\"12\"\n                                style={{\n                                  borderRadius: 6,\n                                  border: `3px solid ${getColorPriority(\n                                    priority\n                                  )}`,\n                                  padding: 16,\n                                  marginTop: 12,\n                                }}\n                              >\n                                <CRow>\n                                  <CCol xs=\"7\" lg=\"7\">\n                                    <h6\n                                      style={{\n                                        fontSize: 16,\n                                        fontWeight: \"bold\",\n                                      }}\n                                    >\n                                      {`${task.ID}-${task.TypeID.Name}`}\n                                    </h6>\n                                    <CBadge color={getBadge(task.StateID)}>\n                                      {task.StateID === 2\n                                        ? \"Finalizada\"\n                                        : \"En Proceso...\"}\n                                    </CBadge>\n                                  </CCol>\n\n                                  <CCol xs=\"4\" lg=\"4\">\n                                    <CSelect\n                                      name={`select-priority-${task.ID}`}\n                                      id={`select-priority-${task.ID}`}\n                                      size=\"sm\"\n                                      style={{\n                                        border: `3px solid ${getColorPriority(\n                                          priority\n                                        )}`,\n                                      }}\n                                      value={task.Priority}\n                                      onChange={({ target: { value } }) =>\n                                        handleChangePriorityTask(task.ID, value)\n                                      }\n                                    >\n                                      <option value=\"Alta\">Alta</option>\n                                      <option value=\"Media\">Media</option>\n                                      <option value=\"Baja\">Baja</option>\n                                    </CSelect>\n                                  </CCol>\n                                </CRow>\n                                <CRow style={{ marginTop: 12 }}>\n                                  <CCol xs=\"2\" lg=\"2\">\n                                    <CButton\n                                      color=\"secondary\"\n                                      onClick={() =>\n                                        commentsTaskEffect(task.ID)\n                                      }\n                                    >\n                                      <CIcon\n                                        content={freeSet.cilCommentBubble}\n                                        size=\"xl\"\n                                      />\n                                    </CButton>\n                                  </CCol>\n                                  <CCol xs=\"2\" lg=\"2\">\n                                    <CButton\n                                      color=\"info\"\n                                      onClick={() =>\n                                        setShowCollapseInfoTask(\n                                          showCollapseInfoTask === task.ID\n                                            ? \"\"\n                                            : task.ID\n                                        )\n                                      }\n                                    >\n                                      <CIcon\n                                        content={freeSet.cilZoomIn}\n                                        size=\"xl\"\n                                      />\n                                    </CButton>\n                                  </CCol>\n                                  {user?.RolID.ID !== 1 &&\n                                    task.AssignedID?.RolID === 1 && (\n                                      <CCol xs=\"2\" lg=\"2\">\n                                        <CButton\n                                          color=\"warning\"\n                                          onClick={() => {\n                                            setTechnicalSelected({\n                                              AssignedID: task.AssignedID,\n                                              TaskID: task.ID,\n                                            });\n                                            setShowTechnicalModal(true);\n                                          }}\n                                        >\n                                          <CIcon\n                                            content={freeSet.cilUser}\n                                            size=\"xl\"\n                                          />\n                                        </CButton>\n                                      </CCol>\n                                    )}\n                                  {task.StateID === 3 && (\n                                    <CCol xs=\"2\" lg=\"2\">\n                                      <CButton\n                                        onClick={() =>\n                                          changeStateTask(\n                                            {\n                                              ID: task.ID,\n                                              StateID:\n                                                task.StateID === 2 ? 3 : 2,\n                                              ClientID: task.ClientID.ID,\n                                            },\n                                            task.TypeID.ID,\n                                            task.Data\n                                          )\n                                        }\n                                        color=\"success\"\n                                      >\n                                        <CIcon\n                                          content={freeSet.cilCheck}\n                                          size=\"xl\"\n                                        />\n                                      </CButton>\n                                    </CCol>\n                                  )}\n                                  {task.TypeID.ID === 16 && task.StateID === 3 && (\n                                    <CCol xs=\"2\" lg=\"2\">\n                                      <CButton\n                                        onClick={() => {\n                                          getChargeUserID(\n                                            task.ClientID.ID\n                                          ).then(setChargesUserTask);\n                                          setTaskSelected(task);\n                                          setShowTechnicalPaymentModal(true);\n                                        }}\n                                        color=\"success\"\n                                      >\n                                        <CIcon\n                                          content={freeSet.cilCash}\n                                          size=\"xl\"\n                                        />\n                                      </CButton>\n                                    </CCol>\n                                  )}\n                                </CRow>\n                                <CCollapse\n                                  show={showCollapseCommentTask === task.ID}\n                                >\n                                  <CCardBody>\n                                    {comments.map((comment) => (\n                                      <CRow key={comment.ID}>\n                                        <CCol xs=\"12\" lg=\"1\">\n                                          <CIcon\n                                            content={freeSet.cilUser}\n                                            size=\"xl\"\n                                          />\n                                        </CCol>\n                                        <CCol xs=\"12\" lg=\"10\">\n                                          <h6>{`${comment.UserID.Names} ${comment.UserID.LastName}`}</h6>\n                                        </CCol>\n                                        <CCol lg=\"2\" />\n                                        <CCol xs=\"12\" lg=\"10\">\n                                          <p\n                                            style={{\n                                              backgroundColor: \"#d7d7d799\",\n                                              borderRadius: 6,\n                                              padding: 6,\n                                              paddingBottom: 20,\n                                            }}\n                                          >\n                                            {comment.Comment}\n                                          </p>\n                                          <p\n                                            style={{\n                                              fontSize: 12,\n                                              fontWeight: \"bold\",\n                                              position: \"absolute\",\n                                              bottom: 0,\n                                              right: 30,\n                                            }}\n                                          >\n                                            {moment(comment.CreatedAt).format(\n                                              \"DD-MM-YYYY\"\n                                            )}\n                                          </p>\n                                        </CCol>\n                                      </CRow>\n                                    ))}\n\n                                    <CRow>\n                                      <CCol\n                                        xs=\"12\"\n                                        lg=\"12\"\n                                        style={{ marginTop: 10 }}\n                                      >\n                                        <CCol md=\"12\">\n                                          <CInputGroup\n                                            style={{\n                                              border: \"2px solid #9999\",\n                                              borderRadius: 2,\n                                            }}\n                                          >\n                                            <CInput\n                                              type=\"email\"\n                                              id=\"input2-group1\"\n                                              name=\"input2-group1\"\n                                              placeholder=\"Escribe un comentario\"\n                                              style={{\n                                                border: \"0px solid #9999\",\n                                              }}\n                                              value={textComment}\n                                              onChange={({\n                                                target: { value },\n                                              }) => setTextComment(value)}\n                                            />\n                                            <CInputGroupAppend>\n                                              <CButton\n                                                onClick={() =>\n                                                  handleCreateComments(task.ID)\n                                                }\n                                              >\n                                                <CIcon\n                                                  content={freeSet.cilSend}\n                                                />\n                                              </CButton>\n                                            </CInputGroupAppend>\n                                          </CInputGroup>\n                                        </CCol>\n                                      </CCol>\n                                    </CRow>\n                                  </CCardBody>\n                                </CCollapse>\n                                <CCollapse\n                                  show={showCollapseInfoTask === task.ID}\n                                >\n                                  <CCardBody>\n                                    <CRow\n                                      style={{\n                                        backgroundColor: \"#d7d7d799\",\n                                        borderRadius: 6,\n                                        padding: 6,\n                                        marginTop: 12,\n                                      }}\n                                    >\n                                      <CCol lg=\"12\">\n                                        <h6 style={{ fontWeight: \"bold\" }}>\n                                          {`Nombre: ${task.ClientID.Names} ${task.ClientID.LastName}`}\n                                        </h6>\n                                      </CCol>\n                                      <CCol lg=\"12\">\n                                        <h6 style={{ fontWeight: \"bold\" }}>\n                                          {`Contacto: ${task.ClientID.PhoneNumber}`}\n                                        </h6>\n                                      </CCol>\n                                      <CCol lg=\"12\">\n                                        <h6 style={{ fontWeight: \"bold\" }}>\n                                          {`Rut: ${task.ClientID.Rut}`}\n                                        </h6>\n                                      </CCol>\n                                      <CCol lg=\"12\">\n                                        <h6 style={{ fontWeight: \"bold\" }}>\n                                          {`Direccion: ${task.ClientID?.Address[0].AddressID?.AddressName}  ${task.ClientID?.Address[0].AddressID?.AddressNumber}`}\n                                        </h6>\n                                      </CCol>\n                                    </CRow>\n                                    {user?.RolID.ID !== 1 && (\n                                      <CRow\n                                        style={{\n                                          backgroundColor: \"#d7d7d799\",\n                                          borderRadius: 6,\n                                          padding: 6,\n                                          marginTop: 12,\n                                        }}\n                                      >\n                                        <CCol lg=\"12\">\n                                          <h6 style={{ fontWeight: \"bold\" }}>\n                                            {`Tecnico Encargado`}\n                                          </h6>\n                                        </CCol>\n                                        <CCol lg=\"12\">\n                                          <h6 style={{ fontWeight: \"bold\" }}>\n                                            {`Nombre: ${task.AssignedID.Names} ${task.AssignedID.LastName}`}\n                                          </h6>\n                                        </CCol>\n                                        <CCol lg=\"12\">\n                                          <h6 style={{ fontWeight: \"bold\" }}>\n                                            {`Contacto: ${task.AssignedID.PhoneNumber}`}\n                                          </h6>\n                                        </CCol>\n                                        <CCol lg=\"12\">\n                                          <h6 style={{ fontWeight: \"bold\" }}>\n                                            {`Rut: ${task.AssignedID.Rut}`}\n                                          </h6>\n                                        </CCol>\n                                      </CRow>\n                                    )}\n                                    <CRow\n                                      style={{\n                                        backgroundColor: \"#d7d7d799\",\n                                        borderRadius: 6,\n                                        padding: 6,\n                                        marginTop: 12,\n                                      }}\n                                    >\n                                      <CCol lg=\"12\">\n                                        <h6 style={{ fontWeight: \"bold\" }}>\n                                          Nota\n                                        </h6>\n                                      </CCol>\n                                      <CCol lg=\"12\">\n                                        <p>{task.Note}</p>\n                                      </CCol>\n                                    </CRow>\n                                    <CRow\n                                      style={{\n                                        backgroundColor: \"#d7d7d799\",\n                                        borderRadius: 6,\n                                        padding: 6,\n                                        marginTop: 12,\n                                      }}\n                                    >\n                                      <CCol lg=\"12\">\n                                        <h6 style={{ fontWeight: \"bold\" }}>\n                                          Informacion adicional\n                                        </h6>\n                                      </CCol>\n                                      <CCol lg=\"12\"></CCol>\n                                    </CRow>\n                                  </CCardBody>\n                                </CCollapse>\n                              </CCol>\n                            </>\n                          )\n                        )}\n                      </>\n                    )\n                  )}\n                </CCardBody>\n              </CCard>\n            </CCol>\n          ))}\n      </CRow>\n      {/* <CRow>\n    {Object.keys(tasks).map((date) => (\n      <CCol xs=\"12\" lg=\"12\" key={date}>\n        <CCard>\n          <CCardHeader>Tareas: {date}</CCardHeader>\n          <CCardBody>\n            <CDataTable\n              items={tasks[date]}\n              fields={fields}\n              itemsPerPage={5}\n              onPageChange={taskEffect}\n              loading={loading}\n              pagination\n              scopedSlots={{\n                cliente: (item) => (\n                  <td className=\"py-2\">\n                    <CButton\n                      color={\n                        !details.includes(item.ID) ? \"info\" : \"secondary\"\n                      }\n                      onClick={() => toggleDetails(item.ID)}\n                    >\n                      <CIcon content={freeSet.cilUser} size=\"xl\" />\n                    </CButton>\n                  </td>\n                ),\n                estado: (item) => (\n                  <td>\n                    <CBadge color={getBadge(item.StateID)}>\n                      {item.StateID === 2 ? \"Finalizada\" : \"En Proceso...\"}\n                    </CBadge>\n                  </td>\n                ),\n                cambiar_estado: (item) => (\n                  <td className=\"py-2\">\n                    {item.StateID !== 2 && (\n                      <CRow className=\"align-items-center\">\n                        <CCol\n                          col=\"2\"\n                          xs=\"2\"\n                          sm=\"2\"\n                          md=\"2\"\n                          className=\"mb-2 mb-xl-0\"\n                        >\n                          <CButton\n                            color={\n                              item.StateID === 2 ? \"success\" : \"secondary\"\n                            }\n                            onClick={() =>\n                              changeStateTask(\n                                {\n                                  ID: item.ID,\n                                  StateID: item.StateID === 2 ? 3 : 2,\n                                  ClientID: item.ClientID.ID,\n                                },\n                                item.TypeID.ID,\n                                item.Data\n                              )\n                            }\n                          >\n                            <CIcon content={freeSet.cilCheck} size=\"xl\" />\n                          </CButton>\n                        </CCol>\n                        {user?.RolID.ID === 8 && (\n                          <CCol\n                            col=\"2\"\n                            xs=\"2\"\n                            sm=\"2\"\n                            md=\"2\"\n                            className=\"mb-2 mb-xl-0\"\n                          >\n                            <CButton\n                              color=\"danger\"\n                              onClick={() => {\n                                setDeleteModal(true);\n                                setTaskSelected(item);\n                              }}\n                            >\n                              <CIcon content={freeSet.cilTrash} size=\"xl\" />\n                            </CButton>\n                          </CCol>\n                        )}\n                      </CRow>\n                    )}\n                  </td>\n                ),\n                details: (item, index) => (\n                  <CCollapse show={details.includes(item.ID)}>\n                    <CCardBody>\n                      <CRow>\n                        <CCol lg=\"4\">\n                          <h4>\n                            {`Nombre: ${item.ClientID.Names} ${item.ClientID.LastName}`}\n                          </h4>\n                          <h4>{`Rut: ${item.ClientID.Rut}`}</h4>\n                          <h4>{`Contacto:${item.ClientID.PhoneNumber}`}</h4>\n                        </CCol>\n                        {user?.RolID.ID === 8 && (\n                          <CCol lg=\"3\">\n                            <h4>Nota</h4>\n                            <h6>{item.Note}</h6>\n                          </CCol>\n                        )}\n                        {(item.TypeID.ID === 8 || item.TypeID.ID === 9) && (\n                          <CCol lg=\"3\">\n                            <h4>Cliente</h4>\n                            <h6>{`Nombre: ${item.Data.User.Names} ${item.Data.User.LastName}`}</h6>\n                            <h6>{`Rut: ${item.Data.User.Rut}`}</h6>\n                          </CCol>\n                        )}\n                        {(item.TypeID.ID === 10 ||\n                          item.TypeID.ID === 11) && (\n                          <CCol lg=\"3\">\n                            <h4>Cargo</h4>\n                            <h6>Nombre :{item.Data.Name}</h6>\n                            <h6>\n                              {`Monto : ${chile\n                                .format(item.Data.Charge)\n                                .replace(\"$\", \"\")}`}\n                            </h6>\n                          </CCol>\n                        )}\n                        {(item.TypeID.ID === 8 || item.TypeID.ID === 9) && (\n                          <CCol lg=\"2\">\n                            <h4>Productos</h4>\n                            {item.Data.Products.map((product) => (\n                              <>\n                                <h6>Producto ID: {product.ProductID}</h6>\n                                <h6>\n                                  {`Precio: ${chile\n                                    .format(product.Price)\n                                    .replace(\"$\", \"\")}`}\n                                </h6>\n                              </>\n                            ))}\n                          </CCol>\n                        )}\n\n                        {(item.TypeID.ID === 6 || item.TypeID.ID === 7) && (\n                          <CCol lg=\"3\">\n                            <h4>Producto</h4>\n                            <h6>{`Nombre: ${item.Data.Name}`}</h6>\n                            <h6>{`Precio Base: ${item.Data.BasePrice}`}</h6>\n                          </CCol>\n                        )}\n                        {item.TypeID.ID === 12 && (\n                          <CCol lg=\"2\">\n                            <h4>Archivos adjuntos</h4>\n                            <CButton\n                              color=\"info\"\n                              onClick={() => {\n                                const { publicURL } = getUrlImage(\n                                  item.Files\n                                );\n                                saveAs(publicURL, `${moment().unix()}.jpg`);\n                              }}\n                            >\n                              <CIcon\n                                content={freeSet.cilCloudDownload}\n                                size=\"xl\"\n                              />\n                            </CButton>\n                          </CCol>\n                        )}\n                        {(item.TypeID.ID === 13 ||\n                          item.TypeID.ID === 14) && (\n                          <CCol lg=\"3\">\n                            <h4>Descuento</h4>\n                            <h6>{`Tipo de descuento: ${item.Data.TypeID}`}</h6>\n                            <h6>{`Descuento: ${\n                              item.Data.IsPercentage\n                                ? `${item.Data.Discount}%`\n                                : chile\n                                    .format(item.Data.Discount)\n                                    .replace(\"$\", \"\")\n                            }`}</h6>\n                          </CCol>\n                        )}\n                        {(item.TypeID.ID === 16 ||\n                          item.TypeID.ID === 17) && (\n                          <CCol lg=\"3\">\n                            <h4>Direccion</h4>\n                            <h6>{`${item.ClientID?.Address[0].AddressID?.AddressName}  ${item.ClientID?.Address[0].AddressID?.AddressNumber}`}</h6>\n                          </CCol>\n                        )}\n                      </CRow>\n                    </CCardBody>\n                  </CCollapse>\n                ),\n              }}\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    ))}\n  </CRow> */}\n      <CModal\n        show={deleteModal}\n        color=\"danger\"\n        onClose={() => {\n          setTaskSelected();\n          setDeleteModal(!deleteModal);\n        }}\n        size=\"sm\"\n      >\n        <CModalHeader closeButton>\n          <CModalTitle>Eliminar Tarea</CModalTitle>\n        </CModalHeader>\n        <CModalFooter>\n          <CButton color=\"danger\" onClick={deleteTask}>\n            Si\n          </CButton>\n          <CButton\n            onClick={() => {\n              setTaskSelected();\n              setDeleteModal(!deleteModal);\n            }}\n            color=\"secondary\"\n          >\n            No\n          </CButton>\n        </CModalFooter>\n      </CModal>\n      <CModal show={showTechnicalModal} onClose={setShowTechnicalModal}>\n        <CModalHeader closeButton>\n          <CModalTitle>Selecciona el tecnico que vas a asignar</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <TechniciansTable\n            setTechnicianID={(value) => {\n              setTechnicalSelected({ ...technicalSelected, AssignedID: value });\n            }}\n            TechnicianID={technicalSelected?.AssignedID}\n          />\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"success\" onClick={handleChangeTechnicalTask}>\n            Aceptar\n          </CButton>\n        </CModalFooter>\n      </CModal>\n      <CModal\n        show={showTechnicalPaymentModal}\n        onClose={setShowTechnicalPaymentModal}\n      >\n        <CModalHeader closeButton>\n          <CModalTitle>Crear Pago</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <CRow alignHorizontal=\"center\">\n            <CCol xs=\"12\" lg=\"8\">\n              <Select\n                isMulti\n                name=\"colors\"\n                options={chargesUserTask\n                  .filter(({ State }) => !State)\n                  .map((charge) => ({\n                    value: parseInt(charge.Charge),\n                    label: charge.ChargeTypeID.Name,\n                    ID: charge.ID,\n                  }))}\n                className=\"basic-multi-select\"\n                classNamePrefix=\"select\"\n                value={chargesSelected}\n                onChange={setChargesSelected}\n              />\n            </CCol>\n            <CCol xs=\"12\" lg=\"3\">\n              <CButton color=\"info\">\n                <UploadFile\n                  onChange={({ target: { files } }) => {\n                    dispatch({\n                      type: \"SET_TOAS\",\n                      payload: {\n                        show: true,\n                        type: \"success\",\n                        label: \"Archivo Cargado\",\n                      },\n                    });\n                    setTimeout(() => {\n                      dispatch({\n                        type: \"SET_TOAS\",\n                        payload: {\n                          show: false,\n                          type: \"\",\n                          label: \"\",\n                        },\n                      });\n                    }, 3000);\n                    // setFiles(files);\n                  }}\n                >\n                  Subir Archivo\n                </UploadFile>\n              </CButton>\n            </CCol>\n          </CRow>\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"success\" onClick={onFinishPayment}>\n            Pagar\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  );\n};\n\nexport default TasksTable;\n","import React, { useEffect } from \"react\";\nimport { CCol, CRow, CSelect } from \"@coreui/react\";\nimport { supabase } from \"src/config/configSupabase\";\nimport _ from \"lodash\";\nimport { useKeySelector } from \"src/hook/general\";\n\nimport { useState } from \"react\";\nimport TasksTable from \"src/components/Tables/TasksTable\";\nimport { getTechnicalZone } from \"src/state/querys/Zones\";\n\nconst TaskPending = () => {\n  const { user } = useKeySelector([\"user\"]);\n\n  const [tasks, setTasks] = useState({});\n  const [technicals, setTechnicals] = useState([]);\n  const [filterTechnicalID, setFilterTechnicalID] = useState(\"\");\n\n  const taskEffect = () => {\n    let fetchTask = supabase\n      .from(\"Task\")\n      .select(\n        \"*,TypeID(Name,ID),AssignedID!inner(*),ClientID(*,Address:UserAddress!inner(AddressID(AddressName,AddressNumber)))\"\n      )\n      .order(\"ID\", { ascending: false })\n      .or(\"StateID.eq.2,StateID.eq.3\")\n      .eq(\"AssignedID.RolID\", 1);\n\n    if (filterTechnicalID !== \"\")\n      fetchTask.eq(\"AssignedID.ID\", filterTechnicalID);\n\n    fetchTask\n      .then((snapshot) => setTasks(_.groupBy(snapshot.data, \"Priority\")))\n      .catch(console.error);\n  };\n  const componentDidMount = () => {\n    if (user?.ZoneID) {\n      return getTechnicalZone(user?.ZoneID[0].AddressID.AddressZoneID).then(\n        setTechnicals\n      );\n    }\n  };\n  useEffect(taskEffect, [filterTechnicalID]);\n  useEffect(componentDidMount, [user?.ZoneID]);\n  return (\n    <>\n      <CRow style={{ marginBottom: 22 }}>\n        <CCol xs=\"12\" lg=\"2\">\n          <h6\n            style={{\n              fontSize: 16,\n              fontWeight: \"bold\",\n            }}\n          >\n            Filtrar por tecnico:\n          </h6>\n        </CCol>\n        <CCol xs=\"12\" lg=\"4\">\n          <CSelect\n            name=\"select-technical\"\n            id=\"select-technical\"\n            size=\"sm\"\n            value={filterTechnicalID}\n            onChange={({ target: { value } }) => setFilterTechnicalID(value)}\n          >\n            <option value=\"\">Todos</option>\n            {technicals.map(({ User }) => (\n              <option\n                value={User.ID}\n              >{`${User.Names} ${User.LastName}`}</option>\n            ))}\n          </CSelect>\n        </CCol>\n      </CRow>\n      <TasksTable tasks={tasks} taskEffect={taskEffect} />\n    </>\n  );\n};\n\nexport default TaskPending;\n"],"sourceRoot":""}