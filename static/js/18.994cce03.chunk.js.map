{"version":3,"sources":["state/querys/Users.js","state/querys/Tasks.js","state/querys/Zones.js","state/querys/Office.js","state/querys/Address.js","views/pages/login/Login.js"],"names":["getTechnicians","supabase","from","select","eq","then","snapshot","data","catch","console","error","getUserByRut","rut","getUserByEmail","email","createUser","userData","insert","ID","createUserAddress","userAddressData","createUserProduct","userProductData","updateUserID","update","updateUserAddress","updateUserProduct","getUserByID","getUsersClients","limit","value","ilike","getClientsCount","stateID","nameState","count","name","getClientsCountOffice","officeID","createUserFinishTask","user","products","address","newUserID","Promise","all","map","product","UserID","createTask","TypeID","AssignedID","TechnicianID","ClientID","createClientOffice","addres","createAddress","newaddressID","AddressID","updateUserFinishTask","updateOfficeToClient","updateAddress","getUserBySearch","textSearch","or","unsubscribedProcessUser","ZoneID","getTechnicalZone","result","technical","_","random","length","StateID","User","subscribedProcessUser","getUserStates","require","taskData","Priority","log","getTypesTasks","getTaskByUserID","order","ascending","updateTask","getLastTaskByUserID","finishTaskPending","TaskID","finishTaskProcessUnSubscribe","createTaskforAdmin","addressZoneID","task","getAdminZone","response","getCommentsTask","createCommentTask","commentData","getStateTask","createZone","updateZone","getZones","getAddressNames","AddressName","createOffice","updateOffice","OfficeID","getOffices","getOfficesToUserID","deleteOffice","delete","match","addressData","getAddressByUserID","Login","dispatch","useDispatch","useState","password","loginForm","setloginForm","setError","className","md","type","placeholder","autoComplete","style","borderColor","onChange","target","xs","color","onClick","auth","signIn","payload"],"mappings":"63BAOMA,EAAiB,kBACrBC,WACGC,KAAK,QACLC,OAAO,KACPC,GAAG,QAAS,GACZC,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,QAEbC,EAAe,SAACC,GAAD,OACnBX,WACGC,KAAK,QACLC,OAAO,KACPC,GAAG,MAAOQ,GACVP,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,QAEbG,EAAiB,SAACC,GAAD,OACrBb,WACGC,KAAK,QACLC,OAAO,2DACPC,GAAG,QAASU,GACZT,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,QAEbK,EAAa,SAACC,GAAD,OACjBf,WACGC,KAAK,QACLe,OAAOD,GACPX,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAK,GAAGW,OAEnCC,EAAoB,SAACC,GAAD,OACxBnB,WACGC,KAAK,eACLe,OAAOG,GACPf,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAK,GAAGW,OAEnCG,EAAoB,SAACC,GAAD,OACxBrB,WACGC,KAAK,eACLe,OAAOK,GACPjB,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAK,GAAGW,OAEnCK,EAAe,SAACP,GAAD,OACnBf,WAASC,KAAK,QAAQsB,OAAOR,GAAUZ,GAAG,KAAMY,EAASE,KAErDO,EAAoB,SAACL,GAAD,OACxBnB,WACGC,KAAK,eACLsB,OAAOJ,GACPhB,GAAG,KAAMgB,EAAgBF,KAExBQ,EAAoB,SAACJ,GAAD,OACxBrB,WACGC,KAAK,eACLsB,OAAOF,GACPlB,GAAG,KAAMkB,EAAgBJ,KAExBS,EAAc,SAACT,GAAD,OAClBjB,WACGC,KAAK,QACLC,OAAO,oDACPC,GAAG,KAAMc,GACTb,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAK,MACjCC,MAAMC,QAAQC,QAoBbkB,EAAkB,SAACC,EAAOC,GAAR,OACtB7B,WACGC,KAAK,QACLC,OAAO,KACPC,GAAG,QAAS,GACZ2B,MAAM,MAJT,WAIoBD,EAJpB,MAKGD,MAAc,EAARA,EAAY,GAClBxB,MAAK,qBAAGE,QACRC,MAAMC,QAAQC,QAEbsB,EAAkB,SAACC,EAASC,GAAV,OACtBjC,WACGC,KAAK,QACLC,OAAO,IAAK,CAAEgC,MAAO,UACrB/B,GAAG,QAAS,GACZA,GAAG,UAAW6B,GACd5B,MAAK,kBAAgB,CAAE8B,MAAlB,EAAGA,MAAsBC,KAAMF,EAAWD,cAC/CzB,MAAMC,QAAQC,QAEb2B,EAAwB,SAACC,EAAUL,GAAX,OAC5BhC,WACGC,KAAK,cACLC,OAAO,gCAAiC,CAAEgC,MAAO,UACjD/B,GAAG,aAAc,GACjBA,GAAG,eAAgB6B,GACnB7B,GAAG,YAAakC,GAChBjC,MAAK,qBAAG8B,SACR3B,MAAMC,QAAQC,QAEb6B,EAAuB,SAACC,EAAMC,EAAUC,EAASJ,GACrDvB,EAAWyB,GAAMnC,MAAK,SAACsC,GACrBC,QAAQC,IAAI,CACVJ,EAASK,KAAI,SAACC,GAAD,OACX1B,EAAkB,2BAAK0B,GAAN,IAAeC,OAAQL,QAE1CM,YAAW,CACTC,OAAQ,EACRC,WAAYX,EAAKY,aACjBC,SAAUV,IAEZW,YAAmBX,EAAWL,GAC9BI,EAAQI,KAAI,SAACS,GAAD,OACVC,YAAcD,GAAQlD,MAAK,SAACoD,GAC1BtC,EAAkB,CAChBuC,UAAWD,EACXT,OAAQL,gBAOdgB,EAAuB,SAACnB,EAAMC,EAAUC,EAASJ,GAA1B,OAC3Bf,EAAaiB,GAAMnC,MAAK,WACtBuC,QAAQC,IAAI,CACVJ,EAASK,KAAI,SAACC,GAAD,OACXA,EAAQ7B,GACJQ,EAAkB,2BAAKqB,GAAN,IAAeC,OAAQR,EAAKtB,MAC7CG,EAAkB,2BAAK0B,GAAN,IAAeC,OAAQR,EAAKtB,SAEnD0C,YAAqBpB,EAAKtB,GAAIoB,GAC9BI,EAAQI,KAAI,SAACS,GAAD,OACVA,EAAOrC,GACH2C,YAAcN,GAAQlD,MAAK,SAACoD,GAC1BhC,EAAkB,CAChBiC,UAAWD,EACXT,OAAQR,EAAKtB,QAGjBsC,YAAcD,GAAQlD,MAAK,SAACoD,GAC1BtC,EAAkB,CAChBuC,UAAWD,EACXT,OAAQR,EAAKtB,iBAOvB4C,EAAkB,SAACC,GAAD,IAAalC,EAAb,uDAAqB,EAArB,OACtB5B,WACGC,KAAK,QACLC,OAAO,gBACP6D,GAHH,uBAIoBD,EAJpB,6BAImDA,EAJnD,wBAI6EA,EAJ7E,MAMG3D,GAAG,QAAS,GACZyB,MAAc,EAARA,EAAY,GAClBxB,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,QAEbuD,EAA0B,SAACjB,EAAQkB,GAAT,OAC9BC,YAAiBD,GAAQ7D,MAAK,SAAC+D,GAC7B,IAAMC,EAAYD,EAAOE,IAAEC,OAAO,EAAGH,EAAOI,OAAS,IACrDjD,EAAa,CAAEL,GAAI8B,EAAQyB,QAAS,IAAKpE,MAAK,WAC5C4C,YAAW,CACTC,OAAQ,GACRC,WAAYkB,EAAUK,KAAKxD,GAC3BmC,SAAUL,EACVyB,QAAS,WAKXE,EAAwB,SAAC3B,EAAQkB,GAAT,OAC5BC,YAAiBD,GAAQ7D,MAAK,SAAC+D,GAC7B,IAAMC,EAAYD,EAAOE,IAAEC,OAAO,EAAGH,EAAOI,OAAS,IACrDjD,EAAa,CAAEL,GAAI8B,EAAQyB,QAAS,IAAKpE,MAAK,WAC5C4C,YAAW,CACTC,OAAQ,GACRC,WAAYkB,EAAUK,KAAKxD,GAC3BmC,SAAUL,EACVyB,QAAS,WAKXG,EAAgB,kBACpB3E,WACGC,KAAK,aACLC,OAAO,KACPE,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,S,4aClNXT,EAAa4E,EAAQ,IAArB5E,SAEFgD,EAAa,SAAC6B,GAAD,OACjB7E,EACGC,KAAK,QACLe,OAFH,2BAEe6D,GAFf,IAEyBC,SAAU,WAChC1E,MAAK,SAACC,GAAD,OAAcG,QAAQuE,IAAI1E,OAE9B2E,EAAgB,kBACpBhF,EACGC,KAAK,YACLC,OAAO,KACPE,MAAK,qBAAGE,SAEP2E,EAAkB,SAAClC,GAAD,OACtB/C,EACGC,KAAK,QACLC,OAAO,kBACPgF,MAAM,KAAM,CAAEC,WAAW,IACzBhF,GAAG,WAAY4C,GACf3C,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,QAEb2E,EAAa,SAACA,GAAD,OACjBpF,EAASC,KAAK,QAAQsB,OAAO6D,GAAYjF,GAAG,KAAMiF,EAAWnE,KAEzDoE,EAAsB,SAACtC,GAAD,OAC1B/C,EACGC,KAAK,QACLC,OAAO,KACPgF,MAAM,KAAM,CAAEC,WAAW,IACzBhF,GAAG,WAAY4C,GACfgB,GAAG,yCACH3D,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,QAEb6E,EAAoB,SAACC,GAAD,OACxBvF,EACGC,KAAK,QACLsB,OAAO,CAAEiD,QAAS,IAClBrE,GAAG,KAAMoF,GACTnF,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAK,GAAGW,OASnCuE,EAA+B,SAACzC,GAAD,OACnC/C,EACGC,KAAK,QACLsB,OAAO,CAAEiD,QAAS,IAClBrE,GAAG,UAAW,GACdA,GAAG,cAAe4C,GAClB5C,GAAG,YAAa,IAChBC,MAAK,SAACC,GAAD,OAAcA,EAASC,SAE3BmF,EAAqB,SAACC,EAAeC,GAAhB,OACzBC,YAAaF,GAAetF,MAAK,SAACyF,GAAD,OAC/B7C,EAAW,2BAAK2C,GAAN,IAAYzC,WAAY2C,EAAS,GAAGpB,KAAKxD,GAAIuD,QAAS,SAG9DsB,EAAkB,SAACP,GAAD,OACtBvF,EACGC,KAAK,gBACLC,OAAO,4BACPC,GAAG,SAAUoF,GACbnF,MAAK,SAACC,GAAD,OAAcA,EAASC,SAE3ByF,EAAoB,SAACC,GAAD,OACxBhG,EACGC,KAAK,gBACLe,OAAOgF,GACP5F,MAAK,SAACC,GAAD,oBAAcA,QAAd,IAAcA,GAAd,UAAcA,EAAUC,KAAK,UAA7B,aAAc,EAAmBW,OAErCgF,EAAe,kBACnBjG,EACGC,KAAK,aACLC,OAAO,mBACPE,MAAK,SAACC,GAAD,OAAcA,EAASC,U,iCCnFjC,gNAAQN,EAAa4E,EAAQ,IAArB5E,SAEFkG,EAAa,SAAC5F,GAAD,OACjBN,EACGC,KAAK,SACLe,OAAOV,GACPF,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAK,GAAGW,OAEnCkF,EAAa,SAAClF,EAAIX,GAAL,OACjBN,EAASC,KAAK,SAASsB,OAAOjB,GAAMH,GAAG,KAAMc,IAEzCmF,EAAW,kBACfpG,EACGC,KAAK,SACLC,OAAO,KACPE,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,QAEbmF,EAAe,SAAC3B,GAAD,OACnBjE,EACGC,KAAK,eACLC,OAAO,kCACPC,GAAG,aAAc,GACjBA,GAAG,wBAAyB8D,GAC5B7D,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,QAEbyD,EAAmB,SAACD,GAAD,OACvBjE,EACGC,KAAK,eACLC,OAAO,kCACPC,GAAG,aAAc,GACjBA,GAAG,wBAAyB8D,GAC5B7D,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,QAEb4F,EAAkB,SAACC,GAAD,OACtBtG,EACGC,KAAK,eACLC,OAAO,kCACPC,GAAG,aAAc,GACjB2B,MAAM,sBAJT,WAIoCwE,EAJpC,MAKGlG,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,S,iCC3CnB,kPAAQT,EAAa4E,EAAQ,IAArB5E,SAEFuG,EAAe,SAACjG,GAAD,OACnBN,EACGC,KAAK,UACLe,OAAOV,GACPF,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAK,GAAGW,OAEnCuF,EAAe,SAACvF,EAAIX,GAAL,OACnBN,EAASC,KAAK,UAAUsB,OAAOjB,GAAMH,GAAG,KAAMc,IAE1C0C,EAAuB,SAACZ,EAAQV,GAAT,OAC3BrC,EACGC,KAAK,cACLsB,OAAO,CAAEkF,SAAUpE,IACnBlC,GAAG,SAAU4C,GACb3C,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,QAEb4C,EAAqB,SAACN,EAAQ0D,GAAT,OACzBzG,EACGC,KAAK,cACLe,OAAO,CAAEyF,WAAU1D,WACnB3C,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAK,GAAGW,OAEnCyF,EAAa,eAAC9E,EAAD,uDAAS,EAAT,OACjB5B,EACGC,KAAK,UACLC,OAAO,KACP0B,MAAc,EAARA,EAAY,GAClBxB,MAAK,SAACC,GAAD,OAAcA,EAASC,SAE3BqG,EAAqB,SAAC5D,GAAD,OACzB/C,EACGC,KAAK,cACLC,OAAO,iBACPC,GAAG,SAAU4C,GACb3C,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAK,OAEhCsG,EAAe,SAAC3F,GAAD,OAAQjB,EAASC,KAAK,UAAU4G,SAASC,MAAM,CAAE7F,S,iCCvCtE,kHAEMsC,EAAgB,SAACwD,GAAD,OACpB/G,WACGC,KAAK,WACLe,OAAO+F,GACP3G,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAK,GAAGW,OAEnC2C,EAAgB,SAACmD,GAAD,OACpB/G,WAASC,KAAK,WAAWsB,OAAOwF,GAAa5G,GAAG,KAAM4G,EAAY9F,KAE9D+F,EAAqB,SAACjE,GAAD,OACzB/C,WACGC,KAAK,eACLC,OAAO,iBACPC,GAAG,SAAU4C,GACb3C,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,MAAMC,QAAQC,S,uHC6HJwG,UAzHD,WACZ,IAAMC,EAAWC,cACjB,EAAkCC,mBAAS,CACzCvG,MAAO,GACPwG,SAAU,KAFZ,mBAAOC,EAAP,KAAkBC,EAAlB,KAIA,EAA0BH,oBAAS,GAAnC,mBAAO3G,EAAP,KAAc+G,EAAd,KAWA,OACE,qBAAKC,UAAU,qDAAf,SACE,cAAC,IAAD,UACE,cAAC,KAAD,CAAMA,UAAU,yBAAhB,SACE,cAAC,IAAD,CAAMC,GAAG,IAAT,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOD,UAAU,MAAjB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,+CAEChH,EACC,oBAAGgH,UAAU,cAAb,gDACmC,OAGnC,mBAAGA,UAAU,aAAb,+BAEF,eAAC,IAAD,CAAaA,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOtF,KAAK,iBAGhB,cAAC,IAAD,CACEwF,KAAK,QACLC,YAAY,QACZC,aAAa,QACbC,MAAO,CAAEC,YAAatH,EAAQ,MAAQ,SACtCuH,SAAU,gBAAanG,EAAb,EAAGoG,OAAUpG,MAAb,OACR0F,EAAa,2BAAKD,GAAN,IAAiBzG,MAAOgB,MAEtCA,MAAOyF,EAAUzG,WAGrB,eAAC,IAAD,CAAa4G,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOtF,KAAK,wBAGhB,cAAC,IAAD,CACEwF,KAAK,WACLC,YAAY,WACZC,aAAa,mBACbC,MAAO,CAAEC,YAAatH,EAAQ,MAAQ,SACtCuH,SAAU,gBAAanG,EAAb,EAAGoG,OAAUpG,MAAb,OACR0F,EAAa,2BAAKD,GAAN,IAAiBD,SAAUxF,MAEzCA,MAAOyF,EAAUD,cAGrB,cAAC,KAAD,UACE,cAAC,IAAD,CAAMa,GAAG,IAAT,SACE,cAAC,IAAD,CACEC,MAAM,UACNV,UAAU,OACVW,QAAS,kBAjE/BpI,WAASqI,KACNC,OAAOhB,GACPlH,MAAK,gBAAWS,EAAX,EAAG0B,KAAQ1B,MAAX,OACJD,YAAeC,GAAOT,MAAK,SAACyF,GAAD,OACzBqB,EAAS,CAAES,KAAM,WAAYY,QAAS1C,EAAS,WAGlDtF,OAAM,kBAAMiH,GAAS,OAuDJ","file":"static/js/18.994cce03.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport { supabase } from \"src/config/configSupabase\";\nimport { createAddress, updateAddress } from \"./Address\";\nimport { createClientOffice, updateOfficeToClient } from \"./Office\";\nimport { createTask } from \"./Tasks\";\nimport { getTechnicalZone } from \"./Zones\";\n\nconst getTechnicians = () =>\n  supabase\n    .from(\"User\")\n    .select(\"*\")\n    .eq(\"RolID\", 1)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst getUserByRut = (rut) =>\n  supabase\n    .from(\"User\")\n    .select(\"*\")\n    .eq(\"Rut\", rut)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst getUserByEmail = (email) =>\n  supabase\n    .from(\"User\")\n    .select(\"*,RolID(*),ZoneID:UserAddress(AddressID(AddressZoneID))\")\n    .eq(\"Email\", email)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst createUser = (userData) =>\n  supabase\n    .from(\"User\")\n    .insert(userData)\n    .then((snapshot) => snapshot.data[0].ID);\n\nconst createUserAddress = (userAddressData) =>\n  supabase\n    .from(\"UserAddress\")\n    .insert(userAddressData)\n    .then((snapshot) => snapshot.data[0].ID);\n\nconst createUserProduct = (userProductData) =>\n  supabase\n    .from(\"UserProduct\")\n    .insert(userProductData)\n    .then((snapshot) => snapshot.data[0].ID);\n\nconst updateUserID = (userData) =>\n  supabase.from(\"User\").update(userData).eq(\"ID\", userData.ID);\n\nconst updateUserAddress = (userAddressData) =>\n  supabase\n    .from(\"UserAddress\")\n    .update(userAddressData)\n    .eq(\"ID\", userAddressData.ID);\n\nconst updateUserProduct = (userProductData) =>\n  supabase\n    .from(\"UserProduct\")\n    .update(userProductData)\n    .eq(\"ID\", userProductData.ID);\n\nconst getUserByID = (ID) =>\n  supabase\n    .from(\"User\")\n    .select(\"*,UserAddress!inner(Address(*,AddressZoneID(*)))\")\n    .eq(\"ID\", ID)\n    .then((snapshot) => snapshot.data[0])\n    .catch(console.error);\n\nconst queryUserToClient = () =>\n  supabase\n    .from(\"User\")\n    .select(\"*\")\n    .range(0, 1000)\n    .is(\"RolID\", null)\n    .then((snapshot) => {\n      console.log(snapshot.data);\n    });\nconst getClients = (limit) =>\n  supabase\n    .from(\"User\")\n    .select(\"*\")\n    .eq(\"RolID\", 2)\n    .limit(limit * 5 + 1)\n    .then(({ data }) => data)\n    .catch(console.error);\n\nconst getUsersClients = (limit, value) =>\n  supabase\n    .from(\"User\")\n    .select(\"*\")\n    .eq(\"RolID\", 2)\n    .ilike(\"Rut\", `%${value}%`)\n    .limit(limit * 5 + 1)\n    .then(({ data }) => data)\n    .catch(console.error);\n\nconst getClientsCount = (stateID, nameState) =>\n  supabase\n    .from(\"User\")\n    .select(\"*\", { count: \"exact\" })\n    .eq(\"RolID\", 2)\n    .eq(\"StateID\", stateID)\n    .then(({ count }) => ({ count, name: nameState, stateID }))\n    .catch(console.error);\n\nconst getClientsCountOffice = (officeID, stateID) =>\n  supabase\n    .from(\"OfficeUser\")\n    .select(\"User!inner(*),Office!inner(*)\", { count: \"exact\" })\n    .eq(\"User.RolID\", 2)\n    .eq(\"User.StateID\", stateID)\n    .eq(\"Office.ID\", officeID)\n    .then(({ count }) => count)\n    .catch(console.error);\n\nconst createUserFinishTask = (user, products, address, officeID) => {\n  createUser(user).then((newUserID) => {\n    Promise.all([\n      products.map((product) =>\n        createUserProduct({ ...product, UserID: newUserID })\n      ),\n      createTask({\n        TypeID: 1,\n        AssignedID: user.TechnicianID,\n        ClientID: newUserID,\n      }),\n      createClientOffice(newUserID, officeID),\n      address.map((addres) =>\n        createAddress(addres).then((newaddressID) => {\n          createUserAddress({\n            AddressID: newaddressID,\n            UserID: newUserID,\n          });\n        })\n      ),\n    ]);\n  });\n};\nconst updateUserFinishTask = (user, products, address, officeID) =>\n  updateUserID(user).then(() => {\n    Promise.all([\n      products.map((product) =>\n        product.ID\n          ? updateUserProduct({ ...product, UserID: user.ID })\n          : createUserProduct({ ...product, UserID: user.ID })\n      ),\n      updateOfficeToClient(user.ID, officeID),\n      address.map((addres) =>\n        addres.ID\n          ? updateAddress(addres).then((newaddressID) => {\n              updateUserAddress({\n                AddressID: newaddressID,\n                UserID: user.ID,\n              });\n            })\n          : createAddress(addres).then((newaddressID) => {\n              createUserAddress({\n                AddressID: newaddressID,\n                UserID: user.ID,\n              });\n            })\n      ),\n    ]);\n  });\n\nconst getUserBySearch = (textSearch, limit = 1) =>\n  supabase\n    .from(\"User\")\n    .select(\"*,Address(*)\")\n    .or(\n      `Names.ilike.%${textSearch}%,LastName.ilike.%${textSearch}%,Rut.ilike.%${textSearch}%`\n    )\n    .eq(\"RolID\", 2)\n    .limit(limit * 5 + 1)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst unsubscribedProcessUser = (UserID, ZoneID) =>\n  getTechnicalZone(ZoneID).then((result) => {\n    const technical = result[_.random(0, result.length - 1)];\n    updateUserID({ ID: UserID, StateID: 5 }).then(() => {\n      createTask({\n        TypeID: 16,\n        AssignedID: technical.User.ID,\n        ClientID: UserID,\n        StateID: 3,\n      });\n    });\n  });\n\nconst subscribedProcessUser = (UserID, ZoneID) =>\n  getTechnicalZone(ZoneID).then((result) => {\n    const technical = result[_.random(0, result.length - 1)];\n    updateUserID({ ID: UserID, StateID: 6 }).then(() => {\n      createTask({\n        TypeID: 17,\n        AssignedID: technical.User.ID,\n        ClientID: UserID,\n        StateID: 3,\n      });\n    });\n  });\n\nconst getUserStates = () =>\n  supabase\n    .from(\"UserState\")\n    .select(\"*\")\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nexport {\n  getTechnicians,\n  createUser,\n  createUserAddress,\n  createUserProduct,\n  getUserByRut,\n  updateUserID,\n  updateUserProduct,\n  updateUserAddress,\n  getUserByID,\n  queryUserToClient,\n  getClients,\n  getUserByEmail,\n  getClientsCount,\n  getClientsCountOffice,\n  createUserFinishTask,\n  updateUserFinishTask,\n  getUsersClients,\n  getUserBySearch,\n  unsubscribedProcessUser,\n  subscribedProcessUser,\n  getUserStates,\n};\n","import { getAdminZone } from \"./Zones\";\n\nconst { supabase } = require(\"src/config/configSupabase\");\n\nconst createTask = (taskData) =>\n  supabase\n    .from(\"Task\")\n    .insert({ ...taskData, Priority: \"Media\" })\n    .then((snapshot) => console.log(snapshot));\n\nconst getTypesTasks = () =>\n  supabase\n    .from(\"TaskType\")\n    .select(\"*\")\n    .then(({ data }) => data);\n\nconst getTaskByUserID = (UserID) =>\n  supabase\n    .from(\"Task\")\n    .select(\"*,TypeID(Name)\")\n    .order(\"ID\", { ascending: false })\n    .eq(\"ClientID\", UserID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst updateTask = (updateTask) =>\n  supabase.from(\"Task\").update(updateTask).eq(\"ID\", updateTask.ID);\n\nconst getLastTaskByUserID = (UserID) =>\n  supabase\n    .from(\"Task\")\n    .select(\"*\")\n    .order(\"ID\", { ascending: false })\n    .eq(\"ClientID\", UserID)\n    .or(\"StateID.eq.1,StateID.eq.3,TypeID.eq.4\")\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst finishTaskPending = (TaskID) =>\n  supabase\n    .from(\"Task\")\n    .update({ StateID: 2 })\n    .eq(\"ID\", TaskID)\n    .then((snapshot) => snapshot.data[0].ID);\n\nconst getTaskPending = () =>\n  supabase\n    .from(\"Task\")\n    .select(\"*, ClientID(*),TypeID(Name)\")\n    .eq(\"StateID\", 1)\n    .then((snapshot) => snapshot.data);\n\nconst finishTaskProcessUnSubscribe = (UserID) =>\n  supabase\n    .from(\"Task\")\n    .update({ StateID: 2 })\n    .eq(\"StateID\", 3)\n    .eq(\"ClientID.ID\", UserID)\n    .eq(\"TypeID.ID\", 16)\n    .then((snapshot) => snapshot.data);\n\nconst createTaskforAdmin = (addressZoneID, task) =>\n  getAdminZone(addressZoneID).then((response) =>\n    createTask({ ...task, AssignedID: response[0].User.ID, StateID: 3 })\n  );\n\nconst getCommentsTask = (TaskID) =>\n  supabase\n    .from(\"TaskComments\")\n    .select(\"*,UserID(Names,LastName)\")\n    .eq(\"TaskID\", TaskID)\n    .then((snapshot) => snapshot.data);\n\nconst createCommentTask = (commentData) =>\n  supabase\n    .from(\"TaskComments\")\n    .insert(commentData)\n    .then((snapshot) => snapshot?.data[0]?.ID);\n\nconst getStateTask = () =>\n  supabase\n    .from(\"TaskState\")\n    .select(\"*,Task!inner(*)\")\n    .then((snapshot) => snapshot.data);\n\nexport {\n  createTask,\n  getTypesTasks,\n  getTaskByUserID,\n  updateTask,\n  getLastTaskByUserID,\n  finishTaskPending,\n  getTaskPending,\n  createTaskforAdmin,\n  finishTaskProcessUnSubscribe,\n  getCommentsTask,\n  createCommentTask,\n  getStateTask,\n};\n","const { supabase } = require(\"src/config/configSupabase\");\n\nconst createZone = (data) =>\n  supabase\n    .from(\"Zones\")\n    .insert(data)\n    .then((snapshot) => snapshot.data[0].ID);\n\nconst updateZone = (ID, data) =>\n  supabase.from(\"Zones\").update(data).eq(\"ID\", ID);\n\nconst getZones = () =>\n  supabase\n    .from(\"Zones\")\n    .select(\"*\")\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst getAdminZone = (ZoneID) =>\n  supabase\n    .from(\"UserAddress\")\n    .select(\"User!inner(*),Address!inner(*)\")\n    .eq(\"User.RolID\", 8)\n    .eq(\"Address.AddressZoneID\", ZoneID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst getTechnicalZone = (ZoneID) =>\n  supabase\n    .from(\"UserAddress\")\n    .select(\"User!inner(*),Address!inner(*)\")\n    .eq(\"User.RolID\", 1)\n    .eq(\"Address.AddressZoneID\", ZoneID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst getAddressNames = (AddressName) =>\n  supabase\n    .from(\"UserAddress\")\n    .select(\"User!inner(*),Address!inner(*)\")\n    .eq(\"User.RolID\", 2)\n    .ilike(\"Address.AddressName\", `%${AddressName}%`)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nexport {\n  createZone,\n  updateZone,\n  getZones,\n  getAdminZone,\n  getTechnicalZone,\n  getAddressNames,\n};\n","const { supabase } = require(\"src/config/configSupabase\");\n\nconst createOffice = (data) =>\n  supabase\n    .from(\"Office\")\n    .insert(data)\n    .then((snapshot) => snapshot.data[0].ID);\n\nconst updateOffice = (ID, data) =>\n  supabase.from(\"Office\").update(data).eq(\"ID\", ID);\n\nconst updateOfficeToClient = (UserID, officeID) =>\n  supabase\n    .from(\"OfficeUser\")\n    .update({ OfficeID: officeID })\n    .eq(\"UserID\", UserID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst createClientOffice = (UserID, OfficeID) =>\n  supabase\n    .from(\"OfficeUser\")\n    .insert({ OfficeID, UserID })\n    .then((snapshot) => snapshot.data[0].ID);\n\nconst getOffices = (limit = 1) =>\n  supabase\n    .from(\"Office\")\n    .select(\"*\")\n    .limit(limit * 5 + 1)\n    .then((snapshot) => snapshot.data);\n\nconst getOfficesToUserID = (UserID) =>\n  supabase\n    .from(\"OfficeUser\")\n    .select(\"*,OfficeID(*)\")\n    .eq(\"UserID\", UserID)\n    .then((snapshot) => snapshot.data[0]);\n\nconst deleteOffice = (ID) => supabase.from(\"Office\").delete().match({ ID });\n\nexport {\n  createOffice,\n  updateOffice,\n  createClientOffice,\n  getOffices,\n  updateOfficeToClient,\n  getOfficesToUserID,\n  deleteOffice,\n};\n","import { supabase } from \"src/config/configSupabase\";\n\nconst createAddress = (addressData) =>\n  supabase\n    .from(\"Address\")\n    .insert(addressData)\n    .then((snapshot) => snapshot.data[0].ID);\n\nconst updateAddress = (addressData) =>\n  supabase.from(\"Address\").update(addressData).eq(\"ID\", addressData.ID);\n\nconst getAddressByUserID = (UserID) =>\n  supabase\n    .from(\"UserAddress\")\n    .select(\"*,Address (*)\")\n    .eq(\"UserID\", UserID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nexport { createAddress, getAddressByUserID, updateAddress };\n","import React, { useState } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { supabase } from \"src/config/configSupabase\";\nimport { getUserByEmail } from \"src/state/querys/Users\";\n\nimport { useDispatch } from \"react-redux\";\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const [loginForm, setloginForm] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [error, setError] = useState(false);\n\n  const handleLogin = () =>\n    supabase.auth\n      .signIn(loginForm)\n      .then(({ user: { email } }) =>\n        getUserByEmail(email).then((response) =>\n          dispatch({ type: \"SET_USER\", payload: response[0] })\n        )\n      )\n      .catch(() => setError(true));\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"5\">\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm>\n                    <h1>Bienvenido!!!</h1>\n\n                    {error ? (\n                      <p className=\"text-danger\">\n                        Usuario o contraseña incorrectos{\" \"}\n                      </p>\n                    ) : (\n                      <p className=\"text-muted\">Ingresa tu Cuenta</p>\n                    )}\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-user\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput\n                        type=\"email\"\n                        placeholder=\"email\"\n                        autoComplete=\"email\"\n                        style={{ borderColor: error ? \"red\" : \"#9999\" }}\n                        onChange={({ target: { value } }) =>\n                          setloginForm({ ...loginForm, email: value })\n                        }\n                        value={loginForm.email}\n                      />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-lock-locked\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        autoComplete=\"current-password\"\n                        style={{ borderColor: error ? \"red\" : \"#9999\" }}\n                        onChange={({ target: { value } }) =>\n                          setloginForm({ ...loginForm, password: value })\n                        }\n                        value={loginForm.password}\n                      />\n                    </CInputGroup>\n                    <CRow>\n                      <CCol xs=\"6\">\n                        <CButton\n                          color=\"primary\"\n                          className=\"px-4\"\n                          onClick={() => handleLogin()}\n                        >\n                          Ingresar\n                        </CButton>\n                      </CCol>\n                      {/* <CCol xs=\"6\" className=\"text-right\">\n                        <CButton color=\"link\" className=\"px-0\">\n                          Forgot password?\n                        </CButton>\n                      </CCol> */}\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n              {/* <CCard\n                className=\"text-white bg-primary py-5 d-md-down-none\"\n                style={{ width: \"44%\" }}\n              >\n                <CCardBody className=\"text-center\">\n                  <div>\n                    <h2>Sign up</h2>\n                    <p>\n                      Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n                      sed do eiusmod tempor incididunt ut labore et dolore magna\n                      aliqua.\n                    </p>\n                    <Link to=\"/register\">\n                      <CButton\n                        color=\"primary\"\n                        className=\"mt-3\"\n                        active\n                        tabIndex={-1}\n                      >\n                        Register Now!\n                      </CButton>\n                    </Link>\n                  </div>\n                </CCardBody>\n              </CCard> */}\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  );\n};\n\nexport default Login;\n"],"sourceRoot":""}