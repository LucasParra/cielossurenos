{"version":3,"sources":["components/buttons/ButtonOptionTable.js","components/buttons/UploadFile.js","components/Tables/TechniciansTable.js","components/Tables/TasksTable.js","views/users/User.js"],"names":["ButtonOptionTable","onPress","color","icon","className","col","xs","sm","md","onClick","content","size","UploadFile","children","value","onChange","disabled","accept","htmlFor","style","display","id","multiple","type","TechniciansTable","setTechnicianID","TechnicianID","isAllData","useState","technicians","setTechnicians","loading","setLoading","techniciansEffect","getTechnicians","then","techniciansApi","map","technician","nombre","Names","apellido","LastName","useEffect","items","fields","itemsPerPage","onPageChange","pagination","scopedSlots","opciones","item","variant","ID","checked","TasksTable","tasks","taskEffect","user","useKeySelector","dispatch","useDispatch","showCollapseCommentTask","setShowCollapseCommentTask","showCollapseInfoTask","setShowCollapseInfoTask","deleteModal","setDeleteModal","showTechnicalModal","setShowTechnicalModal","showTechnicalPaymentModal","setShowTechnicalPaymentModal","taskSelected","setTaskSelected","comments","setComments","textComment","setTextComment","technicalSelected","setTechnicalSelected","chargesUserTask","setChargesUserTask","chargesSelected","setChargesSelected","getBadge","status","getColorPriority","priority","orderPriority","Object","keys","sort","a","b","lg","borderRadius","backgroundColor","fontWeight","fontSize","textAlign","_","groupBy","date","width","moment","format","task","border","padding","marginTop","TypeID","Name","StateID","name","Priority","TaskID","target","payload","show","label","updateTask","setTimeout","getCommentsTask","commentsApi","commentsTaskEffect","freeSet","cilCommentBubble","cilZoomIn","RolID","AssignedID","cilUser","dataTask","data","supabase","from","upsert","insert","User","updateUserFinishTask","omit","Products","Address","OfficeID","createUserFinishTask","updateCharge","createCharge","Promise","all","createPay","updateDiscount","createDiscount","updateUserID","ClientID","update","eq","changeStateTask","Data","cilCheck","getChargeUserID","cilCash","comment","UserID","paddingBottom","Comment","position","bottom","right","CreatedAt","placeholder","createCommentTask","newCommentID","createAt","toDate","cilSend","PhoneNumber","Rut","AddressID","AddressName","AddressNumber","Note","onClose","closeButton","delete","match","alignHorizontal","isMulti","options","filter","State","charge","parseInt","Charge","ChargeTypeID","classNamePrefix","files","history","useHistory","useParams","modalTechnicians","setModalTechnicians","refreshPayments","setRefreshPayments","types","setTypes","setTasks","taskForm","setTaskForm","setUser","componentDidMount","getUserByID","select","order","ascending","or","snapshot","catch","console","error","getTypesTasks","flexDirection","justifyContent","alignItems","borderWidth","borderStyle","goBack","cilArrowLeft","state","userID","paddingTop","height","marginBottom","Email","client","custom","createTask"],"mappings":"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","file":"static/js/21.88f6b966.chunk.js","sourcesContent":["import React from \"react\";\nimport { CButton, CCol, CRow } from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\n\nconst ButtonOptionTable = ({ onPress, color, icon }) => {\n  return (\n    <td className=\"py-2\">\n      <CRow className=\"align-items-center\">\n        <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n          <CButton color={color} onClick={onPress}>\n            <CIcon content={icon} size=\"xl\" />\n          </CButton>\n        </CCol>\n      </CRow>\n    </td>\n  );\n};\n\nexport default ButtonOptionTable;\n","const UploadFile = ({ children, value, onChange, disabled, accept }) => {\n  return (\n    <label htmlFor=\"contained-button-file\" className=\"m-0 w-100\">\n      <input\n        value={value}\n        accept={accept}\n        disabled={disabled}\n        style={{ display: \"none\" }}\n        id=\"contained-button-file\"\n        multiple\n        type=\"file\"\n        onChange={disabled ? () => {} : onChange}\n      />\n      {children}\n    </label>\n  );\n};\n\nexport default UploadFile;\n","import React, { useEffect, useState } from \"react\";\nimport { CCol, CDataTable, CRow, CSwitch } from \"@coreui/react\";\nimport { getTechnicians } from \"src/state/querys/Users\";\n\nconst TechniciansTable = ({ setTechnicianID, TechnicianID, isAllData }) => {\n  const [technicians, setTechnicians] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const fields = [\"nombre\", \"apellido\", \"opciones\"];\n  const techniciansEffect = () => {\n    setLoading(true);\n    getTechnicians().then((techniciansApi) => {\n      setTechnicians(\n        techniciansApi.map((technician) => ({\n          ...technician,\n          nombre: technician.Names,\n          apellido: technician.LastName,\n        }))\n      );\n      setLoading(false);\n    });\n  };\n\n  useEffect(techniciansEffect, []);\n  return (\n    <CDataTable\n      items={technicians}\n      fields={fields}\n      itemsPerPage={5}\n      onPageChange={techniciansEffect}\n      loading={loading}\n      pagination\n      scopedSlots={{\n        opciones: (item) => (\n          <td className=\"py-2\">\n            <CRow className=\"align-items-center\" key={item.ID}>\n              <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n                <CSwitch\n                  className={\"mx-1\"}\n                  variant={\"3d\"}\n                  color={\"success\"}\n                  value={\n                    isAllData\n                      ? TechnicianID?.ID === item.ID\n                      : TechnicianID === item.ID\n                  }\n                  checked={\n                    isAllData\n                      ? TechnicianID?.ID === item.ID\n                      : TechnicianID === item.ID\n                  }\n                  onChange={() => setTechnicianID(isAllData ? item : item.ID)}\n                />\n              </CCol>\n            </CRow>\n          </td>\n        ),\n      }}\n    />\n  );\n};\n\nexport default TechniciansTable;\n","import {\n  CBadge,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CCollapse,\n  CInput,\n  CInputGroup,\n  CInputGroupAppend,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n  CSelect,\n} from \"@coreui/react\";\nimport React, { useState } from \"react\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport Select from \"react-select\";\n\nimport { supabase } from \"src/config/configSupabase\";\nimport { useKeySelector } from \"src/hook/general\";\nimport {\n  createCharge,\n  createPay,\n  getChargeUserID,\n  updateCharge,\n} from \"src/state/querys/Charges\";\nimport { createDiscount, updateDiscount } from \"src/state/querys/Discount\";\nimport {\n  createUserFinishTask,\n  updateUserFinishTask,\n  updateUserID,\n} from \"src/state/querys/Users\";\nimport {\n  createCommentTask,\n  getCommentsTask,\n  updateTask,\n} from \"src/state/querys/Tasks\";\nimport CIcon from \"@coreui/icons-react\";\nimport { freeSet } from \"@coreui/icons\";\nimport TechniciansTable from \"./TechniciansTable\";\nimport { UploadFile } from \"../buttons\";\nimport { useDispatch } from \"react-redux\";\n\nconst TasksTable = ({ tasks, taskEffect }) => {\n  const { user } = useKeySelector([\"user\"]);\n  const dispatch = useDispatch();\n  const [showCollapseCommentTask, setShowCollapseCommentTask] = useState(\"\");\n  const [showCollapseInfoTask, setShowCollapseInfoTask] = useState(\"\");\n\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [showTechnicalModal, setShowTechnicalModal] = useState(false);\n  const [showTechnicalPaymentModal, setShowTechnicalPaymentModal] =\n    useState(false);\n  const [taskSelected, setTaskSelected] = useState({});\n  const [comments, setComments] = useState([]);\n  const [textComment, setTextComment] = useState(\"\");\n  const [technicalSelected, setTechnicalSelected] = useState({});\n  const [chargesUserTask, setChargesUserTask] = useState([]);\n  const [chargesSelected, setChargesSelected] = useState([]);\n  // const [files, setFiles] = useState([]);\n\n  const deleteTask = () => {\n    dispatch({\n      type: \"SET_TOAS\",\n      payload: { show: true, type: \"loading\", label: \"Cargando...\" },\n    });\n    supabase\n      .from(\"Task\")\n      .delete()\n      .match({ ID: taskSelected.ID })\n      .then(() => {\n        setTaskSelected();\n        taskEffect();\n        setDeleteModal(false);\n        dispatch({\n          type: \"SET_TOAS\",\n          payload: {\n            show: true,\n            type: \"success\",\n            label: \"Tarea Eliminada!\",\n          },\n        });\n        setTimeout(() => {\n          dispatch({\n            type: \"SET_TOAS\",\n            payload: {\n              show: false,\n              type: \"\",\n              label: \"\",\n            },\n          });\n        }, 3000);\n      });\n  };\n\n  const changeStateTask = (dataTask, type, data) => {\n    dispatch({\n      type: \"SET_TOAS\",\n      payload: { show: true, type: \"loading\", label: \"Cargando...\" },\n    });\n    if (dataTask.StateID === 1) return null;\n    if (type === 6 || type === 7) {\n      if (data.ID) {\n        supabase\n          .from(\"Product\")\n          .upsert(data)\n          .then(() => {});\n      } else {\n        supabase\n          .from(\"Product\")\n          .insert(data)\n          .then(() => {});\n      }\n    }\n    if (type === 8 || type === 9) {\n      if (data.User.ID) {\n        updateUserFinishTask(\n          _.omit(data.User, \"Address\"),\n          data.Products,\n          data.Address,\n          data.OfficeID\n        );\n      } else {\n        createUserFinishTask(\n          data.User,\n          data.Products,\n          data.Address,\n          data.OfficeID\n        );\n      }\n    }\n    if (type === 10 || type === 11) {\n      if (data?.ID) {\n        updateCharge(_.omit(data, \"ID\"), data.ID);\n      } else {\n        createCharge(data);\n      }\n    }\n    if (type === 12) {\n      Promise.all([data.map(({ ID }) => createPay(ID))]);\n    }\n    if (type === 13 || type === 14) {\n      if (data.ID) {\n        updateDiscount(_.omit(data, \"ID\"), data.ID);\n      } else {\n        createDiscount(_.omit(data, \"ID\"));\n      }\n    }\n    if (type === 16) {\n      updateUserID({ ID: dataTask.ClientID, StateID: 2 }).then(() => {});\n    }\n    if (type === 17) {\n      updateUserID({ ID: dataTask.ClientID, StateID: 1 }).then(() => {});\n    }\n    supabase\n      .from(\"Task\")\n      .update(dataTask)\n      .eq(\"ID\", dataTask.ID)\n      .then(() => {\n        taskEffect();\n        setDeleteModal(false);\n        dispatch({\n          type: \"SET_TOAS\",\n          payload: {\n            show: true,\n            type: \"success\",\n            label: \"Operacion Exitosa!\",\n          },\n        });\n        setTimeout(() => {\n          dispatch({\n            type: \"SET_TOAS\",\n            payload: {\n              show: false,\n              type: \"\",\n              label: \"\",\n            },\n          });\n        }, 3000);\n      });\n  };\n\n  const getBadge = (status) => {\n    switch (status) {\n      case 2:\n        return \"success\";\n      default:\n        return \"info\";\n    }\n  };\n  const getColorPriority = (priority) => {\n    switch (priority) {\n      case \"Alta\":\n        return \"#b50909\";\n      case \"Media\":\n        return \"#ffbe2e\";\n      default:\n        return \"#00bde3\";\n    }\n  };\n  const commentsTaskEffect = (TaskID) => {\n    if (showCollapseCommentTask === TaskID) {\n      setTextComment(\"\");\n      setComments([]);\n      return setShowCollapseCommentTask(\"\");\n    }\n    getCommentsTask(TaskID).then((commentsApi) => {\n      setComments(commentsApi);\n      setShowCollapseCommentTask(\n        showCollapseCommentTask === TaskID ? \"\" : TaskID\n      );\n    });\n  };\n  const handleCreateComments = (TaskID) => {\n    dispatch({\n      type: \"SET_TOAS\",\n      payload: { show: true, type: \"loading\", label: \"Cargando...\" },\n    });\n    createCommentTask({ TaskID, Comment: textComment, UserID: user.ID }).then(\n      (newCommentID) => {\n        setComments([\n          ...comments,\n          {\n            ID: newCommentID,\n            UserID: { Names: user.Names, LastName: user.LastName },\n            createAt: moment().toDate(),\n            TaskID,\n            Comment: textComment,\n          },\n        ]);\n        dispatch({\n          type: \"SET_TOAS\",\n          payload: {\n            show: true,\n            type: \"success\",\n            label: \"Comentario Guardado...\",\n          },\n        });\n        setTimeout(() => {\n          dispatch({\n            type: \"SET_TOAS\",\n            payload: {\n              show: false,\n              type: \"\",\n              label: \"\",\n            },\n          });\n        }, 3000);\n        setTextComment(\"\");\n        getCommentsTask(TaskID);\n      }\n    );\n  };\n  const handleChangePriorityTask = (TaskID, Priority) => {\n    dispatch({\n      type: \"SET_TOAS\",\n      payload: { show: true, type: \"loading\", label: \"Cargando...\" },\n    });\n    updateTask({ ID: TaskID, Priority }).then(() => {\n      taskEffect();\n      dispatch({\n        type: \"SET_TOAS\",\n        payload: {\n          show: true,\n          type: \"success\",\n          label: \"Prioridad Cambiada Correctamente\",\n        },\n      });\n      setTimeout(() => {\n        dispatch({\n          type: \"SET_TOAS\",\n          payload: {\n            show: false,\n            type: \"\",\n            label: \"\",\n          },\n        });\n      }, 3000);\n    });\n  };\n\n  const handleChangeTechnicalTask = () => {\n    dispatch({\n      type: \"SET_TOAS\",\n      payload: { show: true, type: \"loading\", label: \"Cargando...\" },\n    });\n    updateTask({\n      ID: technicalSelected.TaskID,\n      AssignedID: technicalSelected.AssignedID,\n    }).then(() => {\n      setTechnicalSelected(false);\n      setShowTechnicalModal(false);\n      taskEffect();\n      dispatch({\n        type: \"SET_TOAS\",\n        payload: {\n          show: true,\n          type: \"success\",\n          label: \"Operacion Exitosa!\",\n        },\n      });\n      setTimeout(() => {\n        dispatch({\n          type: \"SET_TOAS\",\n          payload: {\n            show: false,\n            type: \"\",\n            label: \"\",\n          },\n        });\n      }, 3000);\n    });\n  };\n\n  const orderPriority = (priority) => {\n    switch (priority) {\n      case \"Alta\":\n        return 0;\n      case \"Media\":\n        return 1;\n      default:\n        return 2;\n    }\n  };\n  const onFinishPayment = () => {\n    dispatch({\n      type: \"SET_TOAS\",\n      payload: { show: true, type: \"loading\", label: \"Cargando...\" },\n    });\n    Promise.all([\n      chargesSelected.map((charge) => updateCharge({ State: true }, charge.ID)),\n      updateUserID({ ID: taskSelected.ClientID.ID, StateID: 1 }),\n      updateTask({\n        ID: taskSelected.ID,\n        StateID: 2,\n      }),\n    ]).then(() => {\n      taskEffect();\n      setChargesSelected([]);\n      // setFiles();\n      setShowTechnicalPaymentModal(false);\n      setTaskSelected();\n      dispatch({\n        type: \"SET_TOAS\",\n        payload: {\n          show: true,\n          type: \"success\",\n          label: \"Operacion Exitosa!\",\n        },\n      });\n      setTimeout(() => {\n        dispatch({\n          type: \"SET_TOAS\",\n          payload: {\n            show: false,\n            type: \"\",\n            label: \"\",\n          },\n        });\n      }, 3000);\n    });\n  };\n\n  return (\n    <>\n      <CRow>\n        {Object.keys(tasks)\n          .sort((a, b) => orderPriority(a) - orderPriority(b))\n          .map((priority) => (\n            <CCol xs=\"12\" lg=\"4\">\n              <CCard style={{ borderRadius: 20 }}>\n                <CCardHeader\n                  style={{\n                    backgroundColor: getColorPriority(priority),\n                    fontWeight: \"bold\",\n                    color: \"#fff\",\n                    fontSize: 16,\n                    textAlign: \"center\",\n                  }}\n                >\n                  {priority}\n                </CCardHeader>\n                <CCardBody>\n                  {Object.keys(_.groupBy(tasks[priority], \"DeadLine\")).map(\n                    (date) => (\n                      <>\n                        <CRow>\n                          <h6\n                            style={{\n                              fontSize: 16,\n                              fontWeight: \"bold\",\n                              textAlign: \"center\",\n                              width: \"100%\",\n                            }}\n                          >\n                            {moment(date).format(\"DD-MM-YYYY\")}\n                          </h6>\n                        </CRow>\n                        {_.groupBy(tasks[priority], \"DeadLine\")[date].map(\n                          (task) => (\n                            <>\n                              <CCol\n                                xs=\"12\"\n                                lg=\"12\"\n                                style={{\n                                  borderRadius: 6,\n                                  border: `3px solid ${getColorPriority(\n                                    priority\n                                  )}`,\n                                  padding: 16,\n                                  marginTop: 12,\n                                }}\n                              >\n                                <CRow>\n                                  <CCol xs=\"7\" lg=\"7\">\n                                    <h6\n                                      style={{\n                                        fontSize: 16,\n                                        fontWeight: \"bold\",\n                                      }}\n                                    >\n                                      {`${task.ID}-${task.TypeID.Name}`}\n                                    </h6>\n                                    <CBadge color={getBadge(task.StateID)}>\n                                      {task.StateID === 2\n                                        ? \"Finalizada\"\n                                        : \"En Proceso...\"}\n                                    </CBadge>\n                                  </CCol>\n\n                                  <CCol xs=\"4\" lg=\"4\">\n                                    <CSelect\n                                      name={`select-priority-${task.ID}`}\n                                      id={`select-priority-${task.ID}`}\n                                      size=\"sm\"\n                                      style={{\n                                        border: `3px solid ${getColorPriority(\n                                          priority\n                                        )}`,\n                                      }}\n                                      value={task.Priority}\n                                      onChange={({ target: { value } }) =>\n                                        handleChangePriorityTask(task.ID, value)\n                                      }\n                                    >\n                                      <option value=\"Alta\">Alta</option>\n                                      <option value=\"Media\">Media</option>\n                                      <option value=\"Baja\">Baja</option>\n                                    </CSelect>\n                                  </CCol>\n                                </CRow>\n                                <CRow style={{ marginTop: 12 }}>\n                                  <CCol xs=\"2\" lg=\"2\">\n                                    <CButton\n                                      color=\"secondary\"\n                                      onClick={() =>\n                                        commentsTaskEffect(task.ID)\n                                      }\n                                    >\n                                      <CIcon\n                                        content={freeSet.cilCommentBubble}\n                                        size=\"xl\"\n                                      />\n                                    </CButton>\n                                  </CCol>\n                                  <CCol xs=\"2\" lg=\"2\">\n                                    <CButton\n                                      color=\"info\"\n                                      onClick={() =>\n                                        setShowCollapseInfoTask(\n                                          showCollapseInfoTask === task.ID\n                                            ? \"\"\n                                            : task.ID\n                                        )\n                                      }\n                                    >\n                                      <CIcon\n                                        content={freeSet.cilZoomIn}\n                                        size=\"xl\"\n                                      />\n                                    </CButton>\n                                  </CCol>\n                                  {user?.RolID.ID !== 1 &&\n                                    task.AssignedID?.RolID === 1 && (\n                                      <CCol xs=\"2\" lg=\"2\">\n                                        <CButton\n                                          color=\"warning\"\n                                          onClick={() => {\n                                            setTechnicalSelected({\n                                              AssignedID: task.AssignedID,\n                                              TaskID: task.ID,\n                                            });\n                                            setShowTechnicalModal(true);\n                                          }}\n                                        >\n                                          <CIcon\n                                            content={freeSet.cilUser}\n                                            size=\"xl\"\n                                          />\n                                        </CButton>\n                                      </CCol>\n                                    )}\n                                  {task.StateID === 3 && (\n                                    <CCol xs=\"2\" lg=\"2\">\n                                      <CButton\n                                        onClick={() =>\n                                          changeStateTask(\n                                            {\n                                              ID: task.ID,\n                                              StateID:\n                                                task.StateID === 2 ? 3 : 2,\n                                              ClientID: task.ClientID.ID,\n                                            },\n                                            task.TypeID.ID,\n                                            task.Data\n                                          )\n                                        }\n                                        color=\"success\"\n                                      >\n                                        <CIcon\n                                          content={freeSet.cilCheck}\n                                          size=\"xl\"\n                                        />\n                                      </CButton>\n                                    </CCol>\n                                  )}\n                                  {task.TypeID.ID === 16 && task.StateID === 3 && (\n                                    <CCol xs=\"2\" lg=\"2\">\n                                      <CButton\n                                        onClick={() => {\n                                          getChargeUserID(\n                                            task.ClientID.ID\n                                          ).then(setChargesUserTask);\n                                          setTaskSelected(task);\n                                          setShowTechnicalPaymentModal(true);\n                                        }}\n                                        color=\"success\"\n                                      >\n                                        <CIcon\n                                          content={freeSet.cilCash}\n                                          size=\"xl\"\n                                        />\n                                      </CButton>\n                                    </CCol>\n                                  )}\n                                </CRow>\n                                <CCollapse\n                                  show={showCollapseCommentTask === task.ID}\n                                >\n                                  <CCardBody>\n                                    {comments.map((comment) => (\n                                      <CRow key={comment.ID}>\n                                        <CCol xs=\"12\" lg=\"1\">\n                                          <CIcon\n                                            content={freeSet.cilUser}\n                                            size=\"xl\"\n                                          />\n                                        </CCol>\n                                        <CCol xs=\"12\" lg=\"10\">\n                                          <h6>{`${comment.UserID.Names} ${comment.UserID.LastName}`}</h6>\n                                        </CCol>\n                                        <CCol lg=\"2\" />\n                                        <CCol xs=\"12\" lg=\"10\">\n                                          <p\n                                            style={{\n                                              backgroundColor: \"#d7d7d799\",\n                                              borderRadius: 6,\n                                              padding: 6,\n                                              paddingBottom: 20,\n                                            }}\n                                          >\n                                            {comment.Comment}\n                                          </p>\n                                          <p\n                                            style={{\n                                              fontSize: 12,\n                                              fontWeight: \"bold\",\n                                              position: \"absolute\",\n                                              bottom: 0,\n                                              right: 30,\n                                            }}\n                                          >\n                                            {moment(comment.CreatedAt).format(\n                                              \"DD-MM-YYYY\"\n                                            )}\n                                          </p>\n                                        </CCol>\n                                      </CRow>\n                                    ))}\n\n                                    <CRow>\n                                      <CCol\n                                        xs=\"12\"\n                                        lg=\"12\"\n                                        style={{ marginTop: 10 }}\n                                      >\n                                        <CCol md=\"12\">\n                                          <CInputGroup\n                                            style={{\n                                              border: \"2px solid #9999\",\n                                              borderRadius: 2,\n                                            }}\n                                          >\n                                            <CInput\n                                              type=\"email\"\n                                              id=\"input2-group1\"\n                                              name=\"input2-group1\"\n                                              placeholder=\"Escribe un comentario\"\n                                              style={{\n                                                border: \"0px solid #9999\",\n                                              }}\n                                              value={textComment}\n                                              onChange={({\n                                                target: { value },\n                                              }) => setTextComment(value)}\n                                            />\n                                            <CInputGroupAppend>\n                                              <CButton\n                                                onClick={() =>\n                                                  handleCreateComments(task.ID)\n                                                }\n                                              >\n                                                <CIcon\n                                                  content={freeSet.cilSend}\n                                                />\n                                              </CButton>\n                                            </CInputGroupAppend>\n                                          </CInputGroup>\n                                        </CCol>\n                                      </CCol>\n                                    </CRow>\n                                  </CCardBody>\n                                </CCollapse>\n                                <CCollapse\n                                  show={showCollapseInfoTask === task.ID}\n                                >\n                                  <CCardBody>\n                                    <CRow\n                                      style={{\n                                        backgroundColor: \"#d7d7d799\",\n                                        borderRadius: 6,\n                                        padding: 6,\n                                        marginTop: 12,\n                                      }}\n                                    >\n                                      <CCol lg=\"12\">\n                                        <h6 style={{ fontWeight: \"bold\" }}>\n                                          {`Nombre: ${task.ClientID.Names} ${task.ClientID.LastName}`}\n                                        </h6>\n                                      </CCol>\n                                      <CCol lg=\"12\">\n                                        <h6 style={{ fontWeight: \"bold\" }}>\n                                          {`Contacto: ${task.ClientID.PhoneNumber}`}\n                                        </h6>\n                                      </CCol>\n                                      <CCol lg=\"12\">\n                                        <h6 style={{ fontWeight: \"bold\" }}>\n                                          {`Rut: ${task.ClientID.Rut}`}\n                                        </h6>\n                                      </CCol>\n                                      <CCol lg=\"12\">\n                                        <h6 style={{ fontWeight: \"bold\" }}>\n                                          {`Direccion: ${task.ClientID?.Address[0].AddressID?.AddressName}  ${task.ClientID?.Address[0].AddressID?.AddressNumber}`}\n                                        </h6>\n                                      </CCol>\n                                    </CRow>\n                                    {user?.RolID.ID !== 1 && (\n                                      <CRow\n                                        style={{\n                                          backgroundColor: \"#d7d7d799\",\n                                          borderRadius: 6,\n                                          padding: 6,\n                                          marginTop: 12,\n                                        }}\n                                      >\n                                        <CCol lg=\"12\">\n                                          <h6 style={{ fontWeight: \"bold\" }}>\n                                            {`Tecnico Encargado`}\n                                          </h6>\n                                        </CCol>\n                                        <CCol lg=\"12\">\n                                          <h6 style={{ fontWeight: \"bold\" }}>\n                                            {`Nombre: ${task.AssignedID.Names} ${task.AssignedID.LastName}`}\n                                          </h6>\n                                        </CCol>\n                                        <CCol lg=\"12\">\n                                          <h6 style={{ fontWeight: \"bold\" }}>\n                                            {`Contacto: ${task.AssignedID.PhoneNumber}`}\n                                          </h6>\n                                        </CCol>\n                                        <CCol lg=\"12\">\n                                          <h6 style={{ fontWeight: \"bold\" }}>\n                                            {`Rut: ${task.AssignedID.Rut}`}\n                                          </h6>\n                                        </CCol>\n                                      </CRow>\n                                    )}\n                                    <CRow\n                                      style={{\n                                        backgroundColor: \"#d7d7d799\",\n                                        borderRadius: 6,\n                                        padding: 6,\n                                        marginTop: 12,\n                                      }}\n                                    >\n                                      <CCol lg=\"12\">\n                                        <h6 style={{ fontWeight: \"bold\" }}>\n                                          Nota\n                                        </h6>\n                                      </CCol>\n                                      <CCol lg=\"12\">\n                                        <p>{task.Note}</p>\n                                      </CCol>\n                                    </CRow>\n                                    <CRow\n                                      style={{\n                                        backgroundColor: \"#d7d7d799\",\n                                        borderRadius: 6,\n                                        padding: 6,\n                                        marginTop: 12,\n                                      }}\n                                    >\n                                      <CCol lg=\"12\">\n                                        <h6 style={{ fontWeight: \"bold\" }}>\n                                          Informacion adicional\n                                        </h6>\n                                      </CCol>\n                                      <CCol lg=\"12\"></CCol>\n                                    </CRow>\n                                  </CCardBody>\n                                </CCollapse>\n                              </CCol>\n                            </>\n                          )\n                        )}\n                      </>\n                    )\n                  )}\n                </CCardBody>\n              </CCard>\n            </CCol>\n          ))}\n      </CRow>\n      {/* <CRow>\n    {Object.keys(tasks).map((date) => (\n      <CCol xs=\"12\" lg=\"12\" key={date}>\n        <CCard>\n          <CCardHeader>Tareas: {date}</CCardHeader>\n          <CCardBody>\n            <CDataTable\n              items={tasks[date]}\n              fields={fields}\n              itemsPerPage={5}\n              onPageChange={taskEffect}\n              loading={loading}\n              pagination\n              scopedSlots={{\n                cliente: (item) => (\n                  <td className=\"py-2\">\n                    <CButton\n                      color={\n                        !details.includes(item.ID) ? \"info\" : \"secondary\"\n                      }\n                      onClick={() => toggleDetails(item.ID)}\n                    >\n                      <CIcon content={freeSet.cilUser} size=\"xl\" />\n                    </CButton>\n                  </td>\n                ),\n                estado: (item) => (\n                  <td>\n                    <CBadge color={getBadge(item.StateID)}>\n                      {item.StateID === 2 ? \"Finalizada\" : \"En Proceso...\"}\n                    </CBadge>\n                  </td>\n                ),\n                cambiar_estado: (item) => (\n                  <td className=\"py-2\">\n                    {item.StateID !== 2 && (\n                      <CRow className=\"align-items-center\">\n                        <CCol\n                          col=\"2\"\n                          xs=\"2\"\n                          sm=\"2\"\n                          md=\"2\"\n                          className=\"mb-2 mb-xl-0\"\n                        >\n                          <CButton\n                            color={\n                              item.StateID === 2 ? \"success\" : \"secondary\"\n                            }\n                            onClick={() =>\n                              changeStateTask(\n                                {\n                                  ID: item.ID,\n                                  StateID: item.StateID === 2 ? 3 : 2,\n                                  ClientID: item.ClientID.ID,\n                                },\n                                item.TypeID.ID,\n                                item.Data\n                              )\n                            }\n                          >\n                            <CIcon content={freeSet.cilCheck} size=\"xl\" />\n                          </CButton>\n                        </CCol>\n                        {user?.RolID.ID === 8 && (\n                          <CCol\n                            col=\"2\"\n                            xs=\"2\"\n                            sm=\"2\"\n                            md=\"2\"\n                            className=\"mb-2 mb-xl-0\"\n                          >\n                            <CButton\n                              color=\"danger\"\n                              onClick={() => {\n                                setDeleteModal(true);\n                                setTaskSelected(item);\n                              }}\n                            >\n                              <CIcon content={freeSet.cilTrash} size=\"xl\" />\n                            </CButton>\n                          </CCol>\n                        )}\n                      </CRow>\n                    )}\n                  </td>\n                ),\n                details: (item, index) => (\n                  <CCollapse show={details.includes(item.ID)}>\n                    <CCardBody>\n                      <CRow>\n                        <CCol lg=\"4\">\n                          <h4>\n                            {`Nombre: ${item.ClientID.Names} ${item.ClientID.LastName}`}\n                          </h4>\n                          <h4>{`Rut: ${item.ClientID.Rut}`}</h4>\n                          <h4>{`Contacto:${item.ClientID.PhoneNumber}`}</h4>\n                        </CCol>\n                        {user?.RolID.ID === 8 && (\n                          <CCol lg=\"3\">\n                            <h4>Nota</h4>\n                            <h6>{item.Note}</h6>\n                          </CCol>\n                        )}\n                        {(item.TypeID.ID === 8 || item.TypeID.ID === 9) && (\n                          <CCol lg=\"3\">\n                            <h4>Cliente</h4>\n                            <h6>{`Nombre: ${item.Data.User.Names} ${item.Data.User.LastName}`}</h6>\n                            <h6>{`Rut: ${item.Data.User.Rut}`}</h6>\n                          </CCol>\n                        )}\n                        {(item.TypeID.ID === 10 ||\n                          item.TypeID.ID === 11) && (\n                          <CCol lg=\"3\">\n                            <h4>Cargo</h4>\n                            <h6>Nombre :{item.Data.Name}</h6>\n                            <h6>\n                              {`Monto : ${chile\n                                .format(item.Data.Charge)\n                                .replace(\"$\", \"\")}`}\n                            </h6>\n                          </CCol>\n                        )}\n                        {(item.TypeID.ID === 8 || item.TypeID.ID === 9) && (\n                          <CCol lg=\"2\">\n                            <h4>Productos</h4>\n                            {item.Data.Products.map((product) => (\n                              <>\n                                <h6>Producto ID: {product.ProductID}</h6>\n                                <h6>\n                                  {`Precio: ${chile\n                                    .format(product.Price)\n                                    .replace(\"$\", \"\")}`}\n                                </h6>\n                              </>\n                            ))}\n                          </CCol>\n                        )}\n\n                        {(item.TypeID.ID === 6 || item.TypeID.ID === 7) && (\n                          <CCol lg=\"3\">\n                            <h4>Producto</h4>\n                            <h6>{`Nombre: ${item.Data.Name}`}</h6>\n                            <h6>{`Precio Base: ${item.Data.BasePrice}`}</h6>\n                          </CCol>\n                        )}\n                        {item.TypeID.ID === 12 && (\n                          <CCol lg=\"2\">\n                            <h4>Archivos adjuntos</h4>\n                            <CButton\n                              color=\"info\"\n                              onClick={() => {\n                                const { publicURL } = getUrlImage(\n                                  item.Files\n                                );\n                                saveAs(publicURL, `${moment().unix()}.jpg`);\n                              }}\n                            >\n                              <CIcon\n                                content={freeSet.cilCloudDownload}\n                                size=\"xl\"\n                              />\n                            </CButton>\n                          </CCol>\n                        )}\n                        {(item.TypeID.ID === 13 ||\n                          item.TypeID.ID === 14) && (\n                          <CCol lg=\"3\">\n                            <h4>Descuento</h4>\n                            <h6>{`Tipo de descuento: ${item.Data.TypeID}`}</h6>\n                            <h6>{`Descuento: ${\n                              item.Data.IsPercentage\n                                ? `${item.Data.Discount}%`\n                                : chile\n                                    .format(item.Data.Discount)\n                                    .replace(\"$\", \"\")\n                            }`}</h6>\n                          </CCol>\n                        )}\n                        {(item.TypeID.ID === 16 ||\n                          item.TypeID.ID === 17) && (\n                          <CCol lg=\"3\">\n                            <h4>Direccion</h4>\n                            <h6>{`${item.ClientID?.Address[0].AddressID?.AddressName}  ${item.ClientID?.Address[0].AddressID?.AddressNumber}`}</h6>\n                          </CCol>\n                        )}\n                      </CRow>\n                    </CCardBody>\n                  </CCollapse>\n                ),\n              }}\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    ))}\n  </CRow> */}\n      <CModal\n        show={deleteModal}\n        color=\"danger\"\n        onClose={() => {\n          setTaskSelected();\n          setDeleteModal(!deleteModal);\n        }}\n        size=\"sm\"\n      >\n        <CModalHeader closeButton>\n          <CModalTitle>Eliminar Tarea</CModalTitle>\n        </CModalHeader>\n        <CModalFooter>\n          <CButton color=\"danger\" onClick={deleteTask}>\n            Si\n          </CButton>\n          <CButton\n            onClick={() => {\n              setTaskSelected();\n              setDeleteModal(!deleteModal);\n            }}\n            color=\"secondary\"\n          >\n            No\n          </CButton>\n        </CModalFooter>\n      </CModal>\n      <CModal show={showTechnicalModal} onClose={setShowTechnicalModal}>\n        <CModalHeader closeButton>\n          <CModalTitle>Selecciona el tecnico que vas a asignar</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <TechniciansTable\n            setTechnicianID={(value) => {\n              setTechnicalSelected({ ...technicalSelected, AssignedID: value });\n            }}\n            TechnicianID={technicalSelected?.AssignedID}\n          />\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"success\" onClick={handleChangeTechnicalTask}>\n            Aceptar\n          </CButton>\n        </CModalFooter>\n      </CModal>\n      <CModal\n        show={showTechnicalPaymentModal}\n        onClose={setShowTechnicalPaymentModal}\n      >\n        <CModalHeader closeButton>\n          <CModalTitle>Crear Pago</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <CRow alignHorizontal=\"center\">\n            <CCol xs=\"12\" lg=\"8\">\n              <Select\n                isMulti\n                name=\"colors\"\n                options={chargesUserTask\n                  .filter(({ State }) => !State)\n                  .map((charge) => ({\n                    value: parseInt(charge.Charge),\n                    label: charge.ChargeTypeID.Name,\n                    ID: charge.ID,\n                  }))}\n                className=\"basic-multi-select\"\n                classNamePrefix=\"select\"\n                value={chargesSelected}\n                onChange={setChargesSelected}\n              />\n            </CCol>\n            <CCol xs=\"12\" lg=\"3\">\n              <CButton color=\"info\">\n                <UploadFile\n                  onChange={({ target: { files } }) => {\n                    dispatch({\n                      type: \"SET_TOAS\",\n                      payload: {\n                        show: true,\n                        type: \"success\",\n                        label: \"Archivo Cargado\",\n                      },\n                    });\n                    setTimeout(() => {\n                      dispatch({\n                        type: \"SET_TOAS\",\n                        payload: {\n                          show: false,\n                          type: \"\",\n                          label: \"\",\n                        },\n                      });\n                    }, 3000);\n                    // setFiles(files);\n                  }}\n                >\n                  Subir Archivo\n                </UploadFile>\n              </CButton>\n            </CCol>\n          </CRow>\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"success\" onClick={onFinishPayment}>\n            Pagar\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  );\n};\n\nexport default TasksTable;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CLabel,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n  CSelect,\n  CTextarea,\n} from \"@coreui/react\";\nimport { useHistory, useParams } from \"react-router\";\nimport Discounts from \"../base/tables/Discounts\";\nimport Charges from \"../base/tables/Charges\";\nimport { getUserByID } from \"src/state/querys/Users\";\nimport CIcon from \"@coreui/icons-react\";\nimport { freeSet } from \"@coreui/icons\";\nimport { supabase } from \"src/config/configSupabase\";\nimport TechniciansTable from \"src/components/Tables/TechniciansTable\";\nimport { createTask, getTypesTasks } from \"src/state/querys/Tasks\";\nimport TasksTable from \"src/components/Tables/TasksTable\";\nimport _ from \"lodash\";\n\nconst User = () => {\n  const history = useHistory();\n  const { id } = useParams();\n  const [modalTechnicians, setModalTechnicians] = useState(false);\n  const [refreshPayments, setRefreshPayments] = useState(false);\n  const [types, setTypes] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [taskForm, setTaskForm] = useState({\n    TypeID: \"\",\n    AssignedID: \"\",\n    ClientID: id,\n    Priority: \"Media\",\n    Note: \"\",\n    StateID: 1,\n  });\n  const [user, setUser] = useState({});\n\n  const componentDidMount = () => {\n    getUserByID(id).then(setUser);\n    supabase\n      .from(\"Task\")\n      .select(\n        \"*,TypeID(Name,ID),AssignedID!inner(*),ClientID!inner(*,Address:UserAddress!inner(AddressID(AddressName,AddressNumber)))\"\n      )\n      .order(\"ID\", { ascending: false })\n      .or(\"StateID.eq.2,StateID.eq.3\")\n      .eq(\"ClientID.ID\", id)\n      .then((snapshot) => {\n        setTasks(_.groupBy(snapshot.data, \"Priority\"));\n      })\n      .catch(console.error);\n\n    getTypesTasks().then(setTypes);\n  };\n\n  useEffect(componentDidMount, [id]);\n  const changeStateUser = (state, userID) =>\n    supabase\n      .from(\"User\")\n      .update({ StateID: state === \"1\" ? \"2\" : \"1\" })\n      .eq(\"ID\", userID)\n      .then(() => history.goBack());\n\n  useEffect(componentDidMount, [id]);\n  return (\n    <CRow>\n      <CCol lg={4}>\n        <CCard>\n          <CCardHeader\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n            }}\n          >\n            <CButton\n              style={{ borderWidth: 1, borderStyle: \"solid\" }}\n              onClick={() => history.goBack()}\n            >\n              <CIcon content={freeSet.cilArrowLeft} size=\"l\" />\n            </CButton>\n            <CLabel style={{ fontSize: 20, fontWeight: \"bold\" }}>\n              Usuario\n            </CLabel>\n            <CButton\n              color={user.StateID === \"2\" ? \"danger\" : \"success\"}\n              onClick={() => changeStateUser(user.StateID, user.ID)}\n            >\n              {user.StateID !== \"2\" ? \"Dar de baja\" : \"Activar\"}\n            </CButton>\n          </CCardHeader>\n          <CCardBody\n            style={{\n              flexDirection: \"column\",\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              paddingTop: 45,\n            }}\n          >\n            <div\n              style={{\n                width: 100,\n                height: 100,\n                borderRadius: 80,\n                borderWidth: 3,\n                borderStyle: \"solid\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                display: \"flex\",\n                marginBottom: 10,\n              }}\n            >\n              <CIcon content={freeSet.cilUser} size=\"4xl\" />\n            </div>\n\n            <h4 style={{ marginBottom: 10 }}>{`${user.Rut}`}</h4>\n            <h5>{`${user.Names} ${user.LastName}`}</h5>\n            <h6>{user.PhoneNumber}</h6>\n            <h6>{user.Email}</h6>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol lg={8}>\n        <CCard>\n          <CCardHeader>\n            <CLabel style={{ fontSize: 20, fontWeight: \"bold\" }}>\n              Descuentos\n            </CLabel>\n          </CCardHeader>\n\n          <CCardBody>\n            <Discounts userID={id} />\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol lg={12}>\n        <CCard>\n          <CCardHeader>\n            <CLabel style={{ fontSize: 20, fontWeight: \"bold\" }}>Cargos</CLabel>\n          </CCardHeader>\n          <CCardBody>\n            <Charges\n              userID={id}\n              type=\"charge\"\n              setRefreshPayments={setRefreshPayments}\n              refreshPayments={refreshPayments}\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol lg={12}>\n        <CCard>\n          <CCardHeader>\n            <CLabel style={{ fontSize: 20, fontWeight: \"bold\" }}>Pagos</CLabel>\n          </CCardHeader>\n          <CCardBody>\n            <Charges\n              userID={id}\n              type=\"pay\"\n              client={user}\n              refreshPayments={refreshPayments}\n              setRefreshPayments={setRefreshPayments}\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol lg={12}>\n        <CCard>\n          <CCardHeader>\n            <CLabel style={{ fontSize: 20, fontWeight: \"bold\" }}>\n              Crear tareas\n            </CLabel>\n          </CCardHeader>\n          <CCardBody>\n            <CRow>\n              <CCol xs=\"3\" lg=\"3\">\n                <h4>Tipo</h4>\n                <CSelect\n                  custom\n                  size=\"xl\"\n                  name=\"DiscountType\"\n                  id=\"DiscountType\"\n                  value={taskForm.TypeID}\n                  onChange={({ target: { value } }) =>\n                    setTaskForm({ ...taskForm, TypeID: parseInt(value) })\n                  }\n                >\n                  <option value={\"\"}>selecciona un tipo</option>\n                  {types\n                    .filter(({ ID }) => ID < 6)\n                    .map((type) => (\n                      <option key={type.ID} value={type.ID}>\n                        {type.Name}\n                      </option>\n                    ))}\n                </CSelect>\n              </CCol>\n              <CCol xs=\"3\" lg=\"3\">\n                <h4>Tecnico Encargado</h4>\n                <CButton\n                  color=\"info\"\n                  onClick={() => setModalTechnicians(true)}\n                  style={{ marginBottom: 10 }}\n                >\n                  Tecnico\n                </CButton>\n              </CCol>\n              <CCol xs=\"3\" lg=\"3\">\n                <h4>Nota (Opcional)</h4>\n                <CTextarea\n                  id=\"name\"\n                  value={taskForm.Note}\n                  onChange={({ target: { value } }) =>\n                    setTaskForm({ ...taskForm, Note: value })\n                  }\n                />\n              </CCol>\n              <CCol xs=\"3\" lg=\"3\" style={{ paddingTop: 10 }}>\n                <CButton\n                  color=\"success\"\n                  onClick={() =>\n                    createTask(taskForm).then(() => {\n                      setTaskForm({\n                        TypeID: \"\",\n                        AssignedID: \"\",\n                        ClientID: \"\",\n                        Note: \"\",\n                        StateID: 1,\n                      });\n                      componentDidMount();\n                    })\n                  }\n                  style={{ marginBottom: 10 }}\n                >\n                  Crear\n                </CButton>\n              </CCol>\n            </CRow>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol lg={12}>\n        <CCard>\n          <CCardHeader>\n            <CLabel style={{ fontSize: 20, fontWeight: \"bold\" }}>Tareas</CLabel>\n          </CCardHeader>\n          <CCardBody>\n            <TasksTable tasks={tasks} taskEffect={componentDidMount} />\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CModal\n        show={modalTechnicians}\n        onClose={setModalTechnicians}\n        color=\"info\"\n      >\n        <CModalHeader closeButton>\n          <CModalTitle>Selecciona el tecnico encargado</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <TechniciansTable\n            setTechnicianID={(value) =>\n              setTaskForm({ ...taskForm, AssignedID: value })\n            }\n            TechnicianID={taskForm.AssignedID}\n          />\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"info\" onClick={() => setModalTechnicians(false)}>\n            Aceptar\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </CRow>\n  );\n};\n\nexport default User;\n"],"sourceRoot":""}