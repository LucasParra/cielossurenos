{"version":3,"sources":["utils/colors.js","utils/general.js","views/admin/AdminGeneral.js"],"names":["colorsChart","nameStateSpanish","stateID","AdminGeneral","colors","useKeySelector","useState","clients","setClients","tasks","setTasks","loading","setLoading","useEffect","getStateTask","then","getUserStates","states","Promise","all","map","state","getClientsCount","ID","Name","class","role","style","width","height","className","align","xs","sm","lg","borderRadius","backgroundColor","primary","color","fontWeight","datasets","data","client","count","labels","options","tooltips","enabled","task","Task","length"],"mappings":"iPAAA,IAAMA,EAAc,CAClB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WClDIC,EAAmB,SAACC,GACxB,OAAQA,GACN,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,gBACT,KAAK,EACH,MAAO,yBACT,KAAK,EACH,MAAO,wBAET,QACE,MAAO,gB,yHCoQEC,UA5QM,WACnB,IAAQC,EAAWC,YAAe,CAAC,WAA3BD,OACR,EAA8BE,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAaA,OADAC,qBAV0B,WACxBC,cAAeC,KAAKL,GACpBE,GAAW,GACXI,cAAgBD,MAAK,SAACE,GAAD,OACnBC,QAAQC,IACNF,EAAOG,KAAI,SAACC,GAAD,OAAWC,YAAgBD,EAAME,GAAIF,EAAMG,UACtDT,KAAKP,MAETI,GAAW,KAEgB,IAE3B,mCACGD,EACC,qBAAKc,MAAM,iCAAX,SACE,qBACEA,MAAM,yBACNC,KAAK,SACLC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAHlC,SAKE,sBAAMJ,MAAM,UAAZ,4BAIJ,qCACE,oBAAIK,UAAU,OAAOC,MAAM,SAA3B,4BAGA,cAAC,KAAD,UACE,cAAC,IAAD,CAAMC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAxB,SACE,eAAC,IAAD,CAAOP,MAAO,CAAEQ,aAAc,IAA9B,UACE,cAAC,IAAD,CACEJ,MAAM,SACNJ,MAAO,CACLS,gBAAiBhC,EAAOiC,QACxBC,MAAO,OACPC,WAAY,QALhB,iCAUA,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,SAAU,CACR,CACEJ,gBAAiB,CACf,UACA,MACA,UACA,UACA,UACA,WAEFK,KAAMlC,EAAQa,KAAI,SAACsB,GAAD,OAAYA,EAAOC,WAGzCC,OAAQrC,EAAQa,KAAI,SAACsB,GAAD,OAClBzC,YAAiByC,EAAOxC,YAE1B2C,QAAS,CACPC,SAAU,CACRC,SAAS,eAQvB,oBAAIjB,UAAU,OAAOC,MAAM,SAA3B,oBAGA,cAAC,KAAD,UACE,cAAC,IAAD,CAAMC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAxB,SACE,eAAC,IAAD,CAAOP,MAAO,CAAEQ,aAAc,IAA9B,UACE,cAAC,IAAD,CACEJ,MAAM,SACNJ,MAAO,CACLS,gBAAiBhC,EAAOiC,QACxBC,MAAO,OACPC,WAAY,QALhB,0CAUA,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,SAAU,CACR,CACEJ,gBAAiB,CACf,UACA,MACA,UACA,UACA,UACA,WAEFK,KAAMhC,EAAMW,KAAI,SAAC4B,GAAD,OAAUA,EAAKC,KAAKC,YAGxCN,OAAQnC,EAAMW,KAAI,SAAC4B,GAAD,OAAUA,EAAKxB,QACjCqB,QAAS,CACPC,SAAU,CACRC,SAAS","file":"static/js/52.cfd21b30.chunk.js","sourcesContent":["const colorsChart = [\n  \"#FF6633\",\n  \"#FFB399\",\n  \"#FF33FF\",\n  \"#FFFF99\",\n  \"#00B3E6\",\n  \"#E6B333\",\n  \"#3366E6\",\n  \"#999966\",\n  \"#99FF99\",\n  \"#B34D4D\",\n  \"#80B300\",\n  \"#809900\",\n  \"#E6B3B3\",\n  \"#6680B3\",\n  \"#66991A\",\n  \"#FF99E6\",\n  \"#CCFF1A\",\n  \"#FF1A66\",\n  \"#E6331A\",\n  \"#33FFCC\",\n  \"#66994D\",\n  \"#B366CC\",\n  \"#4D8000\",\n  \"#B33300\",\n  \"#CC80CC\",\n  \"#66664D\",\n  \"#991AFF\",\n  \"#E666FF\",\n  \"#4DB3FF\",\n  \"#1AB399\",\n  \"#E666B3\",\n  \"#33991A\",\n  \"#CC9999\",\n  \"#B3B31A\",\n  \"#00E680\",\n  \"#4D8066\",\n  \"#809980\",\n  \"#E6FF80\",\n  \"#1AFF33\",\n  \"#999933\",\n  \"#FF3380\",\n  \"#CCCC00\",\n  \"#66E64D\",\n  \"#4D80CC\",\n  \"#9900B3\",\n  \"#E64D66\",\n  \"#4DB380\",\n  \"#FF4D4D\",\n  \"#99E6E6\",\n  \"#6666FF\",\n];\n\nexport { colorsChart };\n","const nameStateSpanish = (stateID) => {\n  switch (stateID) {\n    case 1:\n      return \"activo\";\n    case 2:\n      return \"de baja\";\n    case 3:\n      return \"moroso\";\n    case 4:\n      return \"en aprobacion\";\n    case 5:\n      return \"desconexion en proceso\";\n    case 6:\n      return \"activacion en proceso\";\n\n    default:\n      return \"indefinido\";\n  }\n};\n\nexport { nameStateSpanish };\n","import { CCard, CCardBody, CCardHeader, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { getClientsCount, getUserStates } from \"src/state/querys/Users\";\nimport { CChartDoughnut } from \"@coreui/react-chartjs\";\nimport { useKeySelector } from \"src/hook/general\";\nimport { nameStateSpanish } from \"src/utils\";\nimport { getStateTask } from \"src/state/querys/Tasks\";\n\nconst AdminGeneral = () => {\n  const { colors } = useKeySelector([\"colors\"]);\n  const [clients, setClients] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const componentDidMount = () => {\n    getStateTask().then(setTasks);\n    setLoading(true);\n    getUserStates().then((states) =>\n      Promise.all(\n        states.map((state) => getClientsCount(state.ID, state.Name))\n      ).then(setClients)\n    );\n    setLoading(false);\n  };\n  useEffect(componentDidMount, []);\n  return (\n    <>\n      {loading ? (\n        <div class=\"d-flex justify-content-center \">\n          <div\n            class=\"spinner-grow text-info\"\n            role=\"status\"\n            style={{ width: \"5rem\", height: \"5rem\" }}\n          >\n            <span class=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      ) : (\n        <>\n          <h1 className=\"pt-3\" align=\"center\">\n            TOTAL CLIENTES\n          </h1>\n          <CRow>\n            <CCol xs=\"12\" sm=\"6\" lg=\"12\">\n              <CCard style={{ borderRadius: 24 }}>\n                <CCardHeader\n                  align=\"center\"\n                  style={{\n                    backgroundColor: colors.primary,\n                    color: \"#fff\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  Grafica de clientes\n                </CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    datasets={[\n                      {\n                        backgroundColor: [\n                          \"#41B883\",\n                          \"red\",\n                          \"#FA8900\",\n                          \"#28D2ED\",\n                          \"#ffce56\",\n                          \"#038BA1\",\n                        ],\n                        data: clients.map((client) => client.count),\n                      },\n                    ]}\n                    labels={clients.map((client) =>\n                      nameStateSpanish(client.stateID)\n                    )}\n                    options={{\n                      tooltips: {\n                        enabled: true,\n                      },\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n          <h1 className=\"pt-3\" align=\"center\">\n            TAREAS\n          </h1>\n          <CRow>\n            <CCol xs=\"12\" sm=\"6\" lg=\"12\">\n              <CCard style={{ borderRadius: 24 }}>\n                <CCardHeader\n                  align=\"center\"\n                  style={{\n                    backgroundColor: colors.primary,\n                    color: \"#fff\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  Grafica de tareas por estado\n                </CCardHeader>\n                <CCardBody>\n                  <CChartDoughnut\n                    datasets={[\n                      {\n                        backgroundColor: [\n                          \"#41B883\",\n                          \"red\",\n                          \"#FA8900\",\n                          \"#28D2ED\",\n                          \"#ffce56\",\n                          \"#038BA1\",\n                        ],\n                        data: tasks.map((task) => task.Task.length),\n                      },\n                    ]}\n                    labels={tasks.map((task) => task.Name)}\n                    options={{\n                      tooltips: {\n                        enabled: true,\n                      },\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n          {/* <h1 className=\"pt-3\" align=\"center\">\n            CLIENTES POR SUCURSAL\n          </h1>\n          <CRow>\n            {offices.map((office) => (\n              <CCol xs=\"12\" sm=\"6\" lg=\"3\" key={office.Name}>\n                <CCard>\n                  <CCardHeader\n                    align=\"center\"\n                    style={{\n                      backgroundColor: colors.primary,\n                      color: \"#fff\",\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    {office.Name}\n                  </CCardHeader>\n                  <CCardBody>\n                    <CChartDoughnut\n                      datasets={[\n                        {\n                          backgroundColor: [\"#41B883\", \"#E46651\"],\n                          data: [office.active, office.inactive],\n                        },\n                      ]}\n                      labels={[\"Activos\", \"Inactivos\"]}\n                      options={{\n                        tooltips: {\n                          enabled: true,\n                        },\n                      }}\n                    />\n                  </CCardBody>\n                </CCard>\n              </CCol>\n            ))}\n          </CRow> */}\n          {/* <h1 className=\"pt-3\" align=\"center\">\n            TAREAS PENDIENTES POR ZONA\n          </h1>\n          <CRow>\n            {Object.keys(tasks).map((key) => {\n              let taskOrderType = _.groupBy(tasks[key], \"Tipo\");\n              return (\n                <CCol xs=\"12\" sm=\"6\" md=\"6\">\n                  <CCard>\n                    <CCardHeader\n                      align=\"center\"\n                      style={{\n                        backgroundColor: colors.primary,\n                        color: \"#fff\",\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      {key}\n                    </CCardHeader>\n                    <CCardBody>\n                      {Object.keys(taskOrderType).map((keyType) => (\n                        <CCard className=\"mb-0\">\n                          <CCardHeader\n                            id=\"headingOne\"\n                            style={{\n                              backgroundColor: colors.primary,\n                              color: \"#fff\",\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            <CButton\n                              block\n                              className=\"text-left m-0 p-0\"\n                              onClick={() =>\n                                setAccordion(\n                                  accordion === `${key}-${keyType}`\n                                    ? null\n                                    : `${key}-${keyType}`\n                                )\n                              }\n                            >\n                              <h5\n                                className=\"m-0 p-0\"\n                                style={{\n                                  color: \"#fff\",\n                                  fontWeight: \"bold\",\n                                }}\n                              >\n                                {keyType}\n                              </h5>\n                            </CButton>\n                          </CCardHeader>\n                          <CCollapse show={accordion === `${key}-${keyType}`}>\n                            <CCardBody>\n                              <CDataTable\n                                items={taskOrderType[keyType]}\n                                fields={fields}\n                                loading={false}\n                                pagination\n                                scopedSlots={{\n                                  cliente: (item, index) => (\n                                    <td className=\"py-2\">\n                                      <CButton\n                                        color={\n                                          !details.includes(index)\n                                            ? \"info\"\n                                            : \"secondary\"\n                                        }\n                                        onClick={() => toggleDetails(item.ID)}\n                                      >\n                                        <CIcon\n                                          content={freeSet.cilUser}\n                                          size=\"xl\"\n                                        />\n                                      </CButton>\n                                    </td>\n                                  ),\n                                  details: (item) => (\n                                    <CCollapse show={details.includes(item.ID)}>\n                                      <CCardBody>\n                                        <CRow>\n                                          <CCol lg=\"6\">\n                                            <h4>\n                                              {`Nombre: ${item.ClientID.Names} ${item.ClientID.LastName}`}\n                                            </h4>\n                                            <h4>{`Rut: ${item.ClientID.Rut}`}</h4>\n                                            <h4>{`Contacto:${item.ClientID.PhoneNumber}`}</h4>\n                                          </CCol>\n                                          <CCol lg=\"6\">\n                                            <h4>{`Nota`}</h4>\n                                            <h5>{item.Note}</h5>\n                                          </CCol>\n                                        </CRow>\n                                      </CCardBody>\n                                    </CCollapse>\n                                  ),\n                                }}\n                              />\n                            </CCardBody>\n                          </CCollapse>\n                        </CCard>\n                      ))}\n                    </CCardBody>\n                  </CCard>\n                </CCol>\n              );\n            })}\n          </CRow> */}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default AdminGeneral;\n"],"sourceRoot":""}