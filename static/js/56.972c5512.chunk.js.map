{"version":3,"sources":["views/base/tables/Zones.js"],"names":["fields","Zones","useState","loading","setLoading","deleteModal","setDeleteModal","zonesSelected","setZonesSelected","zones","setZones","edit","setEdit","name","setName","validated","setValidated","searchText","setSearchText","handleSearchZones","text","limit","undefined","componentDidMount","supabase","from","select","or","then","snapshot","data","map","zone","nombre","Name","catch","console","error","useEffect","debounceFilter","useCallback","_","debounce","className","xs","lg","style","marginBottom","col","htmlFor","id","value","required","onChange","target","paddingTop","color","onClick","updateZone","ID","createZone","items","itemsPerPage","tableFilter","placeholder","label","onPageChange","number","onTableFilterChange","pagination","scopedSlots","editar","item","sm","md","content","freeSet","cilPencil","size","eliminar","cilTrash","show","onClose","closeButton","delete","match"],"mappings":"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","file":"static/js/56.972c5512.chunk.js","sourcesContent":["import CIcon from \"@coreui/icons-react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CForm,\n  CInput,\n  CLabel,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { freeSet } from \"@coreui/icons\";\nimport { supabase } from \"src/config/configSupabase\";\nimport { createZone, updateZone } from \"src/state/querys/Zones\";\nimport _ from \"lodash\";\n\nconst fields = [\"ID\", \"nombre\", \"editar\", \"eliminar\"];\n\nconst Zones = () => {\n  const [loading, setLoading] = useState(false);\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [zonesSelected, setZonesSelected] = useState({});\n  const [zones, setZones] = useState([]);\n  const [edit, setEdit] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [validated, setValidated] = useState(false);\n  const [searchText, setSearchText] = useState(\"\");\n\n  const handleSearchZones = (text, limit) => {\n    setSearchText(text);\n    if (text === undefined || text === \"\") return componentDidMount();\n    setLoading(true);\n    supabase\n      .from(\"Zones\")\n      .select(\"*\")\n      .or(`Name.ilike.%${text}%`)\n      .limit(limit * 5 + 1)\n      .then((snapshot) => {\n        setZones(\n          snapshot.data.map((zone) => ({\n            ...zone,\n            nombre: zone.Name,\n          }))\n        );\n        setLoading(false);\n      })\n      .catch(console.error);\n  };\n\n  const componentDidMount = (limit = 1) => {\n    setLoading(true);\n    supabase\n      .from(\"Zones\")\n      .select(\"*\")\n      .limit(limit * 5 + 1)\n      .then((snapshot) => {\n        setZones(\n          snapshot.data.map((zone) => ({\n            ...zone,\n            nombre: zone.Name,\n          }))\n        );\n        setLoading(false);\n      })\n      .catch(console.error);\n  };\n  const deleteZone = () =>\n    supabase\n      .from(\"Zones\")\n      .delete()\n      .match({ ID: zonesSelected.ID })\n      .then(() => {\n        setLoading(false);\n        setZonesSelected();\n        componentDidMount();\n        setDeleteModal(false);\n        setValidated(false);\n      });\n\n  const handleCrateZone = () =>\n    createZone({ Name: name }).then(() => {\n      setName(\"\");\n      componentDidMount();\n    });\n  const handleUpdateZone = () =>\n    updateZone(zonesSelected.ID, { Name: name }).then(() => {\n      setName(\"\");\n      setZonesSelected({});\n      componentDidMount();\n      setEdit(false);\n      setValidated(false);\n    });\n  useEffect(componentDidMount, []);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const debounceFilter = useCallback(_.debounce(handleSearchZones, 1000), []);\n  return (\n    <CForm className={validated ? \"was-validated\" : \"\"}>\n      <CRow>\n        <CCol xs=\"12\" lg=\"12\">\n          <CCard>\n            <CCardHeader>Zonas</CCardHeader>\n            <CCardBody>\n              <CRow style={{ marginBottom: 18 }}>\n                <CCol col=\"2\">\n                  <CLabel htmlFor=\"name\">Nombre</CLabel>\n                  <CInput\n                    id=\"name\"\n                    name=\"name\"\n                    value={name}\n                    required\n                    onChange={({ target: { value } }) => setName(value)}\n                  />\n                </CCol>\n                <CCol col=\"2\" style={{ paddingTop: 30 }}>\n                  <CButton\n                    color={!edit ? \"success\" : \"primary\"}\n                    onClick={() =>\n                      name === \"\"\n                        ? setValidated(true)\n                        : !edit\n                        ? handleCrateZone()\n                        : handleUpdateZone()\n                    }\n                  >\n                    {`${!edit ? \"Crear\" : \"Editar\"} Zona`}\n                  </CButton>\n                </CCol>\n                {edit && (\n                  <CCol col=\"2\" style={{ paddingTop: 30 }}>\n                    <CButton\n                      color={\"danger\"}\n                      onClick={() => {\n                        setEdit(false);\n                        setZonesSelected({});\n                        setName(\"\");\n                      }}\n                    >\n                      Cancelar Edicion\n                    </CButton>\n                  </CCol>\n                )}\n              </CRow>\n              <CDataTable\n                items={zones}\n                fields={fields}\n                itemsPerPage={5}\n                loading={loading}\n                tableFilter={{\n                  placeholder: \"Nombre\",\n                  label: \"Filtrar\",\n                }}\n                onPageChange={(number) => {\n                  if (!searchText !== \"\") return componentDidMount(number);\n                  else return handleSearchZones(searchText, number);\n                }}\n                onTableFilterChange={debounceFilter}\n                pagination\n                scopedSlots={{\n                  editar: (item) => (\n                    <td className=\"py-2\">\n                      <CRow className=\"align-items-center\">\n                        <CCol\n                          col=\"2\"\n                          xs=\"2\"\n                          sm=\"2\"\n                          md=\"2\"\n                          className=\"mb-2 mb-xl-0\"\n                        >\n                          <CButton\n                            color=\"info\"\n                            onClick={() => {\n                              setZonesSelected(item);\n                              setName(item.Name);\n                              setEdit(true);\n                            }}\n                          >\n                            <CIcon content={freeSet.cilPencil} size=\"xl\" />\n                          </CButton>\n                        </CCol>\n                      </CRow>\n                    </td>\n                  ),\n                  eliminar: (item) => (\n                    <td className=\"py-2\">\n                      <CRow className=\"align-items-center\">\n                        <CCol\n                          col=\"2\"\n                          xs=\"2\"\n                          sm=\"2\"\n                          md=\"2\"\n                          className=\"mb-2 mb-xl-0\"\n                        >\n                          <CButton\n                            color=\"danger\"\n                            onClick={() => {\n                              setDeleteModal(true);\n                              setZonesSelected(item);\n                            }}\n                          >\n                            <CIcon content={freeSet.cilTrash} size=\"xl\" />\n                          </CButton>\n                        </CCol>\n                      </CRow>\n                    </td>\n                  ),\n                }}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CModal\n        show={deleteModal}\n        color=\"danger\"\n        onClose={() => {\n          setZonesSelected();\n          setDeleteModal(!deleteModal);\n        }}\n        size=\"sm\"\n      >\n        <CModalHeader closeButton>\n          <CModalTitle>Eliminar Sucursal</CModalTitle>\n        </CModalHeader>\n        <CModalFooter>\n          <CButton color=\"danger\" onClick={deleteZone}>\n            Si\n          </CButton>\n          <CButton\n            onClick={() => {\n              setZonesSelected();\n              setDeleteModal(!deleteModal);\n            }}\n            color=\"secondary\"\n          >\n            No\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </CForm>\n  );\n};\n\nexport default Zones;\n"],"sourceRoot":""}