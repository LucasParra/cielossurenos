{"version":3,"sources":["components/buttons/ButtonOptionTable.js","components/buttons/UploadFile.js","state/querys/Product.js","components/Tables/TechniciansTable.js","components/Tables/SelecteProductsTable.js","components/Tables/ChargesPayTable.js","components/Tables/SelectOfficesTable.js","components/Tables/OfficesTable.js","../node_modules/rut.js/index.js","views/buttons/form/Form.js"],"names":["ButtonOptionTable","onPress","color","icon","className","col","xs","sm","md","onClick","content","size","UploadFile","children","value","onChange","disabled","accept","htmlFor","style","display","id","multiple","type","getProducts","limit","supabase","from","select","then","snapshot","data","catch","console","error","getProductByIDUser","UserID","eq","countProductUsed","productID","count","TechniciansTable","setTechnicianID","TechnicianID","isAllData","useState","technicians","setTechnicians","loading","setLoading","techniciansEffect","getTechnicians","techniciansApi","map","technician","nombre","Names","apellido","LastName","useEffect","items","fields","itemsPerPage","onPageChange","pagination","scopedSlots","opciones","item","variant","ID","checked","SelecteProductsTable","productsSelected","setProductsSelected","products","setProducts","productEffect","productsApi","product","Nombre","Name","Precio","Intl","NumberFormat","currency","format","BasePrice","personalizar_precio","placeholder","defaultValue","target","ProductID","Price","parseInt","activo","filter","length","label","name","paddingLeft","customClasses","ChargesPayTable","charges","onPressEdit","onPressDeleted","editar","freeSet","cilPencil","eliminar","cilTrash","SelectOfficesTable","setOffice","office","offices","setOffices","officesEffects","getOffices","Offices","officeApi","OfficesTable","clean","rut","replace","toUpperCase","module","exports","validate","test","t","slice","m","s","Math","floor","result","substr","i","getCheckDigit","input","Array","Number","includes","NaN","Error","checkDigit","reverse","reduce","accumulator","currentValue","index","toString","initUser","Rut","PhoneNumber","JobPhoneNumber","RolID","StateID","FechCon","Date","AltaAdm","BajaAdm","AltaTec","BajaTec","Connections","Business","initAddress","AddressName","AddressNumber","AddressBlockNumber","AddressFloorNumber","AddressApartmentNumber","AddressZoneID","AddressArea","FormUser","user","onClose","useKeySelector","colors","userSession","formUser","setFormUser","formsAddress","setFormsAddress","formsProducts","setFormsProducts","modalProduct","setModalProduct","modalOffice","setModalOffice","modalTechnicians","setModalTechnicians","newZone","setNewZone","validated","setValidated","validatedRut","setValidatedRut","setTechnician","zones","setZones","handleGetZones","getZones","getAddressByUserID","address","Address","getOfficesToUserID","officeRef","OfficeID","background","primary","textAlign","fontWeight","fontSize","marginBottom","required","onBlur","getUserByRut","response","maxLength","moment","toDate","Birthday","paddingTop","shape","backgroundColor","block","margin","overflowY","position","maxHeight","newAddress","_","clone","createZone","custom","zone","borderRadius","e","updateUserID","omit","Promise","all","updateUserProduct","createUserProduct","updateOfficeToClient","updateAddress","newaddressID","updateUserAddress","AddressID","createAddress","createUserAddress","createUser","newUserID","createTask","TypeID","AssignedID","ClientID","createClientOffice","handleCreateUser","show","closeButton"],"mappings":"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","file":"static/js/6.11b39a2e.chunk.js","sourcesContent":["import React from \"react\";\nimport { CButton, CCol, CRow } from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\n\nconst ButtonOptionTable = ({ onPress, color, icon }) => {\n  return (\n    <td className=\"py-2\">\n      <CRow className=\"align-items-center\">\n        <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n          <CButton color={color} onClick={onPress}>\n            <CIcon content={icon} size=\"xl\" />\n          </CButton>\n        </CCol>\n      </CRow>\n    </td>\n  );\n};\n\nexport default ButtonOptionTable;\n","const UploadFile = ({ children, value, onChange, disabled, accept }) => {\n  return (\n    <label htmlFor=\"contained-button-file\" className=\"m-0 w-100\">\n      <input\n        value={value}\n        accept={accept}\n        disabled={disabled}\n        style={{ display: \"none\" }}\n        id=\"contained-button-file\"\n        multiple\n        type=\"file\"\n        onChange={disabled ? () => {} : onChange}\n      />\n      {children}\n    </label>\n  );\n};\n\nexport default UploadFile;\n","import { supabase } from \"src/config/configSupabase\";\n\nconst getProducts = (limit) =>\n  supabase\n    .from(\"Product\")\n    .select(\"*\")\n    .limit(limit * 5 + 1)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst getProductByIDUser = (UserID) =>\n  supabase\n    .from(\"UserProduct\")\n    .select(\"*,ProductID(*)\")\n    .eq(\"UserID\", UserID)\n    .then((snapshot) => snapshot.data)\n    .catch(console.error);\n\nconst countProductUsed = (productID) =>\n  supabase\n    .from(\"UserProduct\")\n    .select(\"*\", { count: \"exact\" })\n    .eq(\"ProductID\", productID)\n    .then(({ count }) => count);\n\nexport { getProducts, getProductByIDUser, countProductUsed };\n","import React, { useEffect, useState } from \"react\";\nimport { CCol, CDataTable, CRow, CSwitch } from \"@coreui/react\";\nimport { getTechnicians } from \"src/state/querys/Users\";\n\nconst TechniciansTable = ({ setTechnicianID, TechnicianID, isAllData }) => {\n  const [technicians, setTechnicians] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const fields = [\"nombre\", \"apellido\", \"opciones\"];\n  const techniciansEffect = () => {\n    setLoading(true);\n    getTechnicians().then((techniciansApi) => {\n      setTechnicians(\n        techniciansApi.map((technician) => ({\n          ...technician,\n          nombre: technician.Names,\n          apellido: technician.LastName,\n        }))\n      );\n      setLoading(false);\n    });\n  };\n\n  useEffect(techniciansEffect, []);\n  return (\n    <CDataTable\n      items={technicians}\n      fields={fields}\n      itemsPerPage={5}\n      onPageChange={techniciansEffect}\n      loading={loading}\n      pagination\n      scopedSlots={{\n        opciones: (item) => (\n          <td className=\"py-2\">\n            <CRow className=\"align-items-center\" key={item.ID}>\n              <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n                <CSwitch\n                  className={\"mx-1\"}\n                  variant={\"3d\"}\n                  color={\"success\"}\n                  value={\n                    isAllData\n                      ? TechnicianID?.ID === item.ID\n                      : TechnicianID === item.ID\n                  }\n                  checked={\n                    isAllData\n                      ? TechnicianID?.ID === item.ID\n                      : TechnicianID === item.ID\n                  }\n                  onChange={() => setTechnicianID(isAllData ? item : item.ID)}\n                />\n              </CCol>\n            </CRow>\n          </td>\n        ),\n      }}\n    />\n  );\n};\n\nexport default TechniciansTable;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CDataTable,\n  CInput,\n  CRow,\n  CSwitch,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { getProducts } from \"src/state/querys/Product\";\n\nconst SelecteProductsTable = ({\n  type,\n  productsSelected,\n  setProductsSelected,\n}) => {\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const fields = [\n    \"Nombre\",\n    \"Precio\",\n    \"activo\",\n    type === \"select\" && \"personalizar_precio\",\n  ];\n  const productEffect = (limit) => {\n    setLoading(true);\n    getProducts(limit).then((productsApi) => {\n      setProducts(\n        productsApi.map((product) => ({\n          ...product,\n          Nombre: product.Name,\n          Precio: new Intl.NumberFormat(\"es-CL\", {\n            currency: \"CLP\",\n            style: \"currency\",\n          }).format(product.BasePrice),\n        }))\n      );\n      setLoading(false);\n    });\n  };\n\n  useEffect(productEffect, []);\n  return (\n    <CDataTable\n      items={products}\n      fields={fields}\n      itemsPerPage={5}\n      onPageChange={productEffect}\n      loading={loading}\n      pagination\n      scopedSlots={{\n        personalizar_precio: (item) =>\n          type === \"select\" && (\n            <td className=\"py-2\">\n              <CCol col=\"4\" xs=\"4\" sm=\"4\" md=\"4\" className=\"mb-2 mb-xl-0\">\n                <CInput\n                  placeholder=\"10.000\"\n                  defaultValue={item.BasePrice}\n                  onChange={({ target: { value } }) =>\n                    setProductsSelected(\n                      productsSelected.map((product) =>\n                        product.ProductID === item.ID\n                          ? { ...product, Price: parseInt(value) }\n                          : { ...product }\n                      )\n                    )\n                  }\n                />\n              </CCol>\n            </td>\n          ),\n        activo: (item) => (\n          <td className=\"py-2\">\n            {type === \"select\" ? (\n              <CRow className=\"align-items-center\" key={item.ID}>\n                <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n                  <CSwitch\n                    className={\"mx-1\"}\n                    variant={\"3d\"}\n                    color={\"success\"}\n                    value={\n                      productsSelected.filter(\n                        (product) => item.ID === product.ProductID\n                      ).length === 1\n                    }\n                    checked={\n                      productsSelected.filter(\n                        (product) => item.ID === product.ProductID\n                      ).length === 1\n                    }\n                    onChange={({ target: { checked } }) => {\n                      checked\n                        ? setProductsSelected([\n                            ...productsSelected,\n                            {\n                              UserID: \"\",\n                              ProductID: item.ID,\n                              Price: item.BasePrice,\n                              label: item.Nombre,\n                            },\n                          ])\n                        : setProductsSelected(\n                            productsSelected.filter(\n                              (product) => item.ID !== product.ProductID\n                            )\n                          );\n                    }}\n                  />\n                </CCol>\n              </CRow>\n            ) : (\n              <CRow className=\"align-items-center\">\n                <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n                  <CButton\n                    color=\"primary\"\n                    onClick={() => {\n                      //   setProduct(item);\n                      //   setModalVisible(true);\n                    }}\n                  >\n                    <CIcon\n                      name=\"cil-pencil\"\n                      style={{ paddingLeft: 10 }}\n                      customClasses=\"c-sidebar-nav-icon\"\n                    />\n                  </CButton>\n                </CCol>\n                <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n                  <CButton\n                    color=\"danger\"\n                    onClick={() => {\n                      //   setProduct(item);\n                      //   setDeleteModal(true);\n                    }}\n                  >\n                    <CIcon\n                      name=\"cil-trash\"\n                      style={{ paddingLeft: 10 }}\n                      customClasses=\"c-sidebar-nav-icon\"\n                    />\n                  </CButton>\n                </CCol>\n              </CRow>\n            )}\n          </td>\n        ),\n      }}\n    />\n  );\n};\n\nexport default SelecteProductsTable;\n","import { freeSet } from \"@coreui/icons\";\nimport { CDataTable } from \"@coreui/react\";\nimport React from \"react\";\nimport { ButtonOptionTable } from \"../buttons\";\n\nconst fields = [\"ID\", \"nombre\", \"editar\", \"eliminar\"];\nconst ChargesPayTable = ({\n  charges,\n  onPageChange,\n  loading,\n  onPressEdit,\n  onPressDeleted,\n}) => {\n  return (\n    <CDataTable\n      items={charges}\n      fields={fields}\n      itemsPerPage={5}\n      onPageChange={onPageChange}\n      loading={loading}\n      pagination\n      scopedSlots={{\n        editar: (item) => (\n          <ButtonOptionTable\n            color=\"info\"\n            icon={freeSet.cilPencil}\n            onPress={() => {\n              onPressEdit(item);\n            }}\n          />\n        ),\n        eliminar: (item) => (\n          <ButtonOptionTable\n            color=\"danger\"\n            icon={freeSet.cilTrash}\n            onPress={() => {\n              onPressDeleted(item);\n            }}\n          />\n        ),\n      }}\n    />\n  );\n};\n\nexport default ChargesPayTable;\n","import React, { useEffect, useState } from \"react\";\nimport { CCol, CDataTable, CRow, CSwitch } from \"@coreui/react\";\nimport { getOffices } from \"src/state/querys/Office\";\n\nconst SelectOfficesTable = ({ setOffice, office }) => {\n  const [offices, setOffices] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const fields = [\"ID\", \"nombre\", \"opciones\"];\n  const officesEffects = () => {\n    setLoading(true);\n    getOffices().then((Offices) => {\n      setOffices(\n        Offices.map((officeApi) => ({ ...officeApi, nombre: officeApi.Name }))\n      );\n      setLoading(false);\n    });\n  };\n\n  useEffect(officesEffects, []);\n  return (\n    <CDataTable\n      items={offices}\n      fields={fields}\n      itemsPerPage={5}\n      onPageChange={officesEffects}\n      loading={loading}\n      pagination\n      scopedSlots={{\n        opciones: (item) => (\n          <td className=\"py-2\">\n            <CRow className=\"align-items-center\" key={item.ID}>\n              <CCol col=\"2\" xs=\"2\" sm=\"2\" md=\"2\" className=\"mb-2 mb-xl-0\">\n                <CSwitch\n                  className={\"mx-1\"}\n                  variant={\"3d\"}\n                  color={\"success\"}\n                  value={office?.ID === item.ID}\n                  checked={office?.ID === item.ID}\n                  onChange={() => setOffice(item)}\n                />\n              </CCol>\n            </CRow>\n          </td>\n        ),\n      }}\n    />\n  );\n};\n\nexport default SelectOfficesTable;\n","import { freeSet } from \"@coreui/icons\";\nimport { CDataTable } from \"@coreui/react\";\nimport React from \"react\";\nimport { ButtonOptionTable } from \"../buttons\";\n\nconst fields = [\"ID\", \"nombre\", \"editar\", \"eliminar\"];\nconst OfficesTable = ({\n  offices,\n  onPageChange,\n  loading,\n  onPressEdit,\n  onPressDeleted,\n}) => {\n  return (\n    <CDataTable\n      items={offices}\n      fields={fields}\n      itemsPerPage={5}\n      onPageChange={onPageChange}\n      loading={loading}\n      pagination\n      scopedSlots={{\n        editar: (item) => (\n          <ButtonOptionTable\n            color=\"info\"\n            icon={freeSet.cilPencil}\n            onPress={() => {\n              onPressEdit(item);\n            }}\n          />\n        ),\n        eliminar: (item) => (\n          <ButtonOptionTable\n            color=\"danger\"\n            icon={freeSet.cilTrash}\n            onPress={() => {\n              onPressDeleted(item);\n            }}\n          />\n        ),\n      }}\n    />\n  );\n};\n\nexport default OfficesTable;\n","function clean (rut) {\n  return typeof rut === 'string'\n    ? rut.replace(/^0+|[^0-9kK]+/g, '').toUpperCase()\n    : ''\n}\n\nfunction validate (rut) {\n  if (typeof rut !== 'string') {\n    return false\n  }\n\n  // if it starts with 0 we return false\n  // so a rut like 00000000-0 will not pass\n  if (/^0+/.test(rut)) {\n    return false\n  }\n\n  if (!/^0*(\\d{1,3}(\\.?\\d{3})*)-?([\\dkK])$/.test(rut)) {\n    return false\n  }\n\n  rut = clean(rut)\n\n  let t = parseInt(rut.slice(0, -1), 10)\n  let m = 0\n  let s = 1\n\n  while (t > 0) {\n    s = (s + (t % 10) * (9 - (m++ % 6))) % 11\n    t = Math.floor(t / 10)\n  }\n\n  const v = s > 0 ? '' + (s - 1) : 'K'\n  return v === rut.slice(-1)\n}\n\nfunction format (rut) {\n  rut = clean(rut)\n\n  let result = rut.slice(-4, -1) + '-' + rut.substr(rut.length - 1)\n  for (let i = 4; i < rut.length; i += 3) {\n    result = rut.slice(-3 - i, -i) + '.' + result\n  }\n\n  return result\n}\n\nfunction getCheckDigit (input) {\n  const rut = Array.from(clean(input), Number)\n\n  if (rut.length === 0 || rut.includes(NaN)) {\n    throw new Error(`\"${input}\" as RUT is invalid`)\n  }\n\n  const modulus = 11\n  const initialValue = 0\n  const sumResult = rut\n    .reverse()\n    .reduce(\n      (accumulator, currentValue, index) =>\n        accumulator + currentValue * ((index % 6) + 2),\n      initialValue\n    )\n\n  const checkDigit = modulus - (sumResult % modulus)\n\n  if (checkDigit === 10) {\n    return 'K'\n  } else if (checkDigit === 11) {\n    return '0'\n  } else {\n    return checkDigit.toString()\n  }\n}\n\nmodule.exports = { validate, clean, format, getCheckDigit }\n","import React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CInput,\n  CLabel,\n  CSelect,\n  CRow,\n  CButton,\n  CForm,\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody,\n  CModalFooter,\n  CListGroup,\n  CListGroupItem,\n  CBadge,\n  CSwitch,\n} from \"@coreui/react\";\nimport _ from \"lodash\";\nimport SelecteProductsTable from \"src/components/Tables/SelecteProductsTable\";\nimport TechniciansTable from \"src/components/Tables/TechniciansTable\";\nimport {\n  createUser,\n  createUserAddress,\n  createUserProduct,\n  getUserByRut,\n  updateUserAddress,\n  updateUserID,\n  updateUserProduct,\n} from \"src/state/querys/Users\";\nimport moment from \"moment\";\nimport {\n  createAddress,\n  getAddressByUserID,\n  updateAddress,\n} from \"src/state/querys/Address\";\nimport { clean, format } from \"rut.js\";\nimport { useKeySelector } from \"src/hook/general\";\nimport { createZone, getZones } from \"src/state/querys/Zones\";\nimport { getProductByIDUser } from \"src/state/querys/Product\";\nimport {\n  createClientOffice,\n  getOfficesToUserID,\n  updateOfficeToClient,\n} from \"src/state/querys/Office\";\nimport { SelectOfficesTable } from \"src/components/Tables\";\nimport { createTask } from \"src/state/querys/Tasks\";\n\nconst initUser = {\n  Names: \"\",\n  LastName: \"\",\n  Rut: \"\",\n  PhoneNumber: \"\",\n  JobPhoneNumber: \"\",\n  RolID: 2,\n  StateID: \"1\",\n  FechCon: new Date(),\n  AltaAdm: new Date(),\n  BajaAdm: new Date(),\n  AltaTec: new Date(),\n  BajaTec: new Date(),\n  Connections: null,\n  Business: false,\n};\nconst initAddress = [\n  {\n    AddressName: \"\",\n    AddressNumber: 0,\n    AddressBlockNumber: 0,\n    AddressFloorNumber: 0,\n    AddressApartmentNumber: 0,\n    AddressZoneID: null,\n    AddressArea: \"\",\n  },\n];\nconst FormUser = ({ user, onClose }) => {\n  const { colors, user: userSession } = useKeySelector([\"colors\", \"user\"]);\n  const [formUser, setFormUser] = useState(initUser);\n  const [formsAddress, setFormsAddress] = useState(initAddress);\n  const [formsProducts, setFormsProducts] = useState([]);\n  const [modalProduct, setModalProduct] = useState(false);\n  const [modalOffice, setModalOffice] = useState(false);\n  const [modalTechnicians, setModalTechnicians] = useState(false);\n  const [newZone, setNewZone] = useState(\"\");\n  const [validated, setValidated] = useState(false);\n  const [validatedRut, setValidatedRut] = useState(false);\n  const [office, setOffice] = useState(\"\");\n  const [technician, setTechnician] = useState({});\n  const [zones, setZones] = useState([]);\n\n  const handleCreateUser = () => {\n    if (validatedRut) return;\n\n    const { Names, LastName, Rut, PhoneNumber, Connections } = formUser;\n    const { AddressName, AddressZoneID } = formsAddress;\n\n    if (\n      Names === \"\" ||\n      LastName === \"\" ||\n      Rut === \"\" ||\n      PhoneNumber === \"\" ||\n      Connections === 0 ||\n      AddressName === \"\" ||\n      AddressZoneID === \"\" ||\n      (!user.ID ? !technician?.nombre : false) ||\n      formsProducts.length === 0\n    )\n      return setValidated(true);\n\n    if (user.ID) {\n      updateUserID(\n        _.omit(\n          { ...formUser, StateID: userSession.RolID.ID === 7 ? \"4\" : \"1\" },\n          \"apellidos\",\n          \"nombres\",\n          \"contacto\",\n          \"Address\"\n        )\n      ).then(() => {\n        Promise.all([\n          formsProducts.map((product) =>\n            product.ID\n              ? updateUserProduct(\n                  _.omit({ ...product, UserID: user.ID }, \"label\")\n                )\n              : createUserProduct(\n                  _.omit({ ...product, UserID: user.ID }, \"label\")\n                )\n          ),\n          updateOfficeToClient(user.ID, office.ID),\n          formsAddress.map((address, index) =>\n            address.ID\n              ? updateAddress(address).then((newaddressID) => {\n                  updateUserAddress({\n                    AddressID: newaddressID,\n                    UserID: user.ID,\n                  });\n\n                  if (index + 1 === formsAddress.length) {\n                    setFormsProducts([]);\n                    setTechnician({});\n                    setFormsAddress(initAddress);\n                    setOffice({});\n                    setValidated(false);\n                    onClose();\n                  }\n                })\n              : createAddress(address).then((newaddressID) => {\n                  createUserAddress({\n                    AddressID: newaddressID,\n                    UserID: user.ID,\n                  });\n\n                  if (index + 1 === formsAddress.length) {\n                    setFormsProducts([]);\n                    setTechnician({});\n                    setFormsAddress(initAddress);\n                    setOffice({});\n                    setValidated(false);\n                    onClose();\n                  }\n                })\n          ),\n        ]);\n      });\n    } else {\n      createUser({\n        ...formUser,\n        StateID: userSession.RolID.ID === 7 ? \"4\" : \"1\",\n      }).then((newUserID) =>\n        Promise.all([\n          formsProducts.map((product) =>\n            createUserProduct(\n              _.omit({ ...product, UserID: newUserID }, \"label\")\n            )\n          ),\n          createTask({\n            TypeID: 1,\n            AssignedID: technician.ID,\n            ClientID: newUserID,\n          }),\n          createClientOffice(newUserID, office.ID),\n          formsAddress.map((address, index) =>\n            createAddress(address).then((newaddressID) => {\n              createUserAddress({\n                AddressID: newaddressID,\n                UserID: newUserID,\n              });\n              if (index + 1 === formsAddress.length) {\n                setFormsProducts([]);\n                setTechnician({});\n                setFormsAddress(initAddress);\n                onClose();\n                setOffice({});\n                setValidated(false);\n              }\n            })\n          ),\n        ])\n      );\n    }\n  };\n  const handleGetZones = () => getZones().then(setZones);\n  const userEffect = () => {\n    handleGetZones();\n    if (!user?.Names) {\n      setFormsProducts([]);\n      setTechnician({});\n      setFormsAddress(initAddress);\n      setOffice({});\n      setValidated(false);\n      return setFormUser(initUser);\n    }\n    getAddressByUserID(user?.ID).then((address) =>\n      address.length === 0\n        ? setFormsAddress(initAddress)\n        : setFormsAddress(address.map(({ Address }) => ({ ...Address })))\n    );\n\n    getProductByIDUser(user?.ID).then((products) =>\n      setFormsProducts(\n        products.map((product) => ({\n          UserID: user.ID,\n          ProductID: product.ProductID.ID,\n          ID: product.ID,\n          Price:\n            product.Price === 0 ? product.ProductID.BasePrice : product.Price,\n          label: product.ProductID.Name,\n        }))\n      )\n    );\n    getOfficesToUserID(user.ID).then((officeRef) => {\n      setOffice({\n        ID: officeRef.OfficeID.ID,\n        Name: officeRef.OfficeID.Name,\n        nombre: officeRef.OfficeID.Name,\n      });\n    });\n    setFormUser(user);\n  };\n\n  useEffect(userEffect, [user]);\n  return (\n    <>\n      <CForm className={validated ? \"was-validated\" : \"\"}>\n        <CRow>\n          <CCol xs=\"12\" sm=\"6\">\n            <CCard>\n              <CCardHeader\n                style={{\n                  background: colors.primary,\n                  textAlign: \"center\",\n                }}\n              >\n                <CLabel\n                  style={{\n                    fontWeight: \"bold\",\n                    color: \"#fff\",\n                    fontSize: 16,\n                  }}\n                >\n                  Usuario\n                </CLabel>\n              </CCardHeader>\n              <CCardBody>\n                <CRow>\n                  <CCol style={{ marginBottom: 8 }} xs=\"12\" sm=\"6\">\n                    <CLabel\n                      style={{ fontSize: 14, fontWeight: \"bold\" }}\n                      htmlFor=\"Names\"\n                    >\n                      Nombres\n                    </CLabel>\n                    <CInput\n                      id=\"Names\"\n                      value={formUser.Names}\n                      placeholder=\"Ingresa tus nombres\"\n                      required\n                      onChange={({ target: { value } }) =>\n                        setFormUser({ ...formUser, Names: value })\n                      }\n                    />\n                  </CCol>\n                  <CCol style={{ marginBottom: 8 }} xs=\"12\" sm=\"6\">\n                    <CLabel\n                      style={{ fontSize: 14, fontWeight: \"bold\" }}\n                      htmlFor=\"LastName\"\n                    >\n                      Apellidos\n                    </CLabel>\n                    <CInput\n                      id=\"LastName\"\n                      value={formUser.LastName}\n                      placeholder=\"Ingresa tus apellidos\"\n                      required\n                      onChange={({ target: { value } }) =>\n                        setFormUser({ ...formUser, LastName: value })\n                      }\n                    />\n                  </CCol>\n                  <CCol style={{ marginBottom: 8 }} xs=\"12\" sm=\"6\">\n                    <CLabel\n                      htmlFor=\"Rut\"\n                      style={{\n                        color: validatedRut ? \"red\" : \"#000\",\n                        fontSize: 14,\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      {validatedRut\n                        ? \"Este rut ya existe en la base de datos\"\n                        : \"Rut\"}\n                    </CLabel>\n                    <CInput\n                      id=\"Rut\"\n                      value={\n                        format(formUser.Rut) === \"-\" ? \"\" : format(formUser.Rut)\n                      }\n                      onBlur={() => {\n                        getUserByRut(\n                          `${clean(formUser.Rut).substr(\n                            0,\n                            clean(formUser.Rut).length - 1\n                          )}-${clean(formUser.Rut).substr(\n                            clean(formUser.Rut).substr(\n                              0,\n                              clean(formUser.Rut).length - 1\n                            ).length,\n                            clean(formUser.Rut).length - 1\n                          )}`\n                        ).then((response) =>\n                          setValidatedRut(response.length > 0)\n                        );\n                      }}\n                      placeholder=\" Ejemplo:18.123.678-3\"\n                      required\n                      maxLength={12}\n                      onChange={({ target: { value } }) => {\n                        setFormUser({ ...formUser, Rut: value });\n                      }}\n                    />\n                  </CCol>\n                  <CCol style={{ marginBottom: 8 }} xs=\"12\" sm=\"6\">\n                    <CLabel\n                      style={{ fontSize: 14, fontWeight: \"bold\" }}\n                      htmlFor=\"JobID\"\n                    >\n                      Numero de telefono\n                    </CLabel>\n                    <CInput\n                      id=\"PhoneNumber\"\n                      value={formUser.PhoneNumber}\n                      placeholder=\"964410376\"\n                      required\n                      onChange={({ target: { value } }) =>\n                        setFormUser({ ...formUser, PhoneNumber: value })\n                      }\n                    />\n                  </CCol>\n                  <CCol style={{ marginBottom: 8 }} xs=\"12\" sm=\"6\">\n                    <CLabel\n                      style={{ fontSize: 14, fontWeight: \"bold\" }}\n                      htmlFor=\"JobID\"\n                    >\n                      Numero de telefono comercial\n                    </CLabel>\n                    <CInput\n                      id=\"JobPhoneNumber\"\n                      placeholder=\"964410376\"\n                      value={formUser.JobPhoneNumber}\n                      onChange={({ target: { value } }) =>\n                        setFormUser({ ...formUser, JobPhoneNumber: value })\n                      }\n                    />\n                  </CCol>\n\n                  <CCol style={{ marginBottom: 8 }} xs=\"12\" sm=\"3\">\n                    <CLabel\n                      style={{ fontSize: 14, fontWeight: \"bold\" }}\n                      htmlFor=\"D_8\"\n                    >\n                      Conexiones\n                    </CLabel>\n                    <CInput\n                      id=\"D_8\"\n                      required\n                      value={formUser.Connections}\n                      onChange={({ target: { value } }) =>\n                        setFormUser({\n                          ...formUser,\n                          Connections: value === \"\" ? 0 : parseInt(value),\n                        })\n                      }\n                    />\n                  </CCol>\n                  <CCol style={{ marginBottom: 8 }} xs=\"12\" sm=\"3\">\n                    <CLabel\n                      style={{ fontSize: 14, fontWeight: \"bold\" }}\n                      htmlFor=\"FechCon\"\n                    >\n                      Fecha Contratacion\n                    </CLabel>\n\n                    <CInput\n                      id=\"FechCon\"\n                      type=\"date\"\n                      placeholder=\"\"\n                      required\n                      value={moment(formUser.FechCon).format(\"YYYY-MM-DD\")}\n                      onChange={({ target: { value } }) =>\n                        setFormUser({\n                          ...formUser,\n                          FechCon: moment(value).toDate(),\n                        })\n                      }\n                    />\n                  </CCol>\n                  <CCol style={{ marginBottom: 8 }} xs=\"12\" sm=\"3\">\n                    <CLabel\n                      style={{ fontSize: 14, fontWeight: \"bold\" }}\n                      htmlFor=\"FechCon\"\n                    >\n                      Fecha de nacimiento\n                    </CLabel>\n                    <CInput\n                      id=\"FechCon\"\n                      type=\"date\"\n                      placeholder=\"\"\n                      required\n                      value={moment(formUser.Birthday).format(\"YYYY-MM-DD\")}\n                      onChange={({ target: { value } }) =>\n                        setFormUser({\n                          ...formUser,\n                          Birthday: moment(value).toDate(),\n                        })\n                      }\n                    />\n                  </CCol>\n                  <CCol xs=\"12\" sm=\"2\" style={{ paddingTop: 16 }}>\n                    <CLabel\n                      htmlFor=\"business\"\n                      style={{ fontSize: 14, fontWeight: \"bold\" }}\n                    >\n                      Empresa :\n                    </CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" sm=\"7\" style={{ paddingTop: 16 }}>\n                    <CSwitch\n                      className=\"mr-1\"\n                      variant={\"3d\"}\n                      color={\"success\"}\n                      value={formUser.Business}\n                      shape=\"pill\"\n                      onChange={({ target: { checked } }) =>\n                        setFormUser({\n                          ...formUser,\n                          Business: checked,\n                        })\n                      }\n                    />\n                  </CCol>\n\n                  <CCol\n                    style={{ marginBottom: 8 }}\n                    xs=\"12\"\n                    sm={user.ID ? \"6\" : \"4\"}\n                  >\n                    <CButton\n                      variant=\"outline\"\n                      style={{ backgroundColor: colors.primary }}\n                      onClick={() => setModalProduct(!modalProduct)}\n                      block\n                    >\n                      <CLabel\n                        style={{\n                          fontSize: 16,\n                          fontWeight: \"bold\",\n                          margin: 0,\n                          color: \"#fff\",\n                        }}\n                      >\n                        Seleccionar Productos\n                      </CLabel>\n                    </CButton>\n                  </CCol>\n                  {!user.ID && (\n                    <CCol style={{ marginBottom: 8 }} xs=\"12\" sm=\"4\">\n                      <CButton\n                        variant=\"outline\"\n                        onClick={() => setModalTechnicians(true)}\n                        block\n                        style={{ backgroundColor: colors.primary }}\n                      >\n                        <CLabel\n                          style={{\n                            fontSize: 16,\n                            fontWeight: \"bold\",\n                            margin: 0,\n                            color: \"#fff\",\n                          }}\n                        >\n                          Seleccionar Tecnico\n                        </CLabel>\n                      </CButton>\n                    </CCol>\n                  )}\n                  <CCol\n                    style={{ marginBottom: 8 }}\n                    xs=\"12\"\n                    sm={user.ID ? \"6\" : \"4\"}\n                  >\n                    <CButton\n                      variant=\"outline\"\n                      style={{ backgroundColor: colors.primary }}\n                      onClick={() => setModalOffice(true)}\n                      block\n                    >\n                      <CLabel\n                        style={{\n                          fontSize: 16,\n                          fontWeight: \"bold\",\n                          margin: 0,\n                          color: \"#fff\",\n                        }}\n                      >\n                        Seleccionar Sucursal\n                      </CLabel>\n                    </CButton>\n                  </CCol>\n\n                  <CCol\n                    style={{ marginBottom: 8 }}\n                    xs=\"12\"\n                    sm={user.ID ? \"6\" : \"4\"}\n                  >\n                    <CLabel\n                      style={{\n                        fontSize: 16,\n                        fontWeight: \"bold\",\n                        margin: 0,\n                        color: validated\n                          ? formsProducts.length === 0\n                            ? \"red\"\n                            : \"#000\"\n                          : \"#000\",\n                      }}\n                    >\n                      Productos :\n                    </CLabel>\n                    <CListGroup>\n                      {formsProducts.map((product) => (\n                        <CListGroupItem\n                          className=\"justify-content-between\"\n                          key={product.ID}\n                        >\n                          <CLabel\n                            style={{\n                              fontSize: 14,\n                              fontWeight: \"bold\",\n                              margin: 0,\n                            }}\n                          >\n                            {product.label}\n                          </CLabel>\n                          <CBadge\n                            className=\"float-right\"\n                            shape=\"pill\"\n                            color=\"primary\"\n                            style={{ backgroundColor: colors.primary }}\n                          >\n                            {new Intl.NumberFormat(\"es-CL\", {\n                              currency: \"CLP\",\n                              style: \"currency\",\n                            }).format(product.Price)}\n                          </CBadge>\n                        </CListGroupItem>\n                      ))}\n                    </CListGroup>\n                  </CCol>\n                  {!user.ID && (\n                    <CCol style={{ marginBottom: 8 }} xs=\"12\" sm=\"4\">\n                      <CLabel\n                        style={{\n                          fontSize: 16,\n                          fontWeight: \"bold\",\n                          margin: 0,\n                          color: validated\n                            ? !technician?.nombre\n                              ? \"red\"\n                              : \"#000\"\n                            : \"#000\",\n                        }}\n                      >\n                        Tecnico :\n                      </CLabel>\n                      <CListGroup>\n                        {technician?.nombre && (\n                          <CListGroupItem className=\"justify-content-between\">\n                            <CLabel\n                              style={{\n                                fontSize: 14,\n                                fontWeight: \"bold\",\n                                margin: 0,\n                              }}\n                            >\n                              {`${technician.nombre} ${technician.apellido}`}\n                            </CLabel>\n                          </CListGroupItem>\n                        )}\n                      </CListGroup>\n                    </CCol>\n                  )}\n                  <CCol\n                    style={{ marginBottom: 8 }}\n                    xs=\"12\"\n                    sm={user.ID ? \"6\" : \"4\"}\n                  >\n                    <CLabel\n                      style={{\n                        fontSize: 16,\n                        fontWeight: \"bold\",\n                        margin: 0,\n                        color: validated\n                          ? !office?.Name\n                            ? \"red\"\n                            : \"#000\"\n                          : \"#000\",\n                      }}\n                    >\n                      Sucursal :\n                    </CLabel>\n                    <CListGroup>\n                      {office?.Name && (\n                        <CListGroupItem className=\"justify-content-between\">\n                          <CLabel\n                            style={{\n                              fontSize: 14,\n                              fontWeight: \"bold\",\n                              margin: 0,\n                            }}\n                          >\n                            {office?.Name}\n                          </CLabel>\n                        </CListGroupItem>\n                      )}\n                    </CListGroup>\n                  </CCol>\n                </CRow>\n              </CCardBody>\n            </CCard>\n          </CCol>\n          <CCol xs=\"12\" sm=\"6\">\n            <CCard>\n              <CCardHeader\n                style={{\n                  background: colors.primary,\n                  textAlign: \"center\",\n                }}\n              >\n                <CLabel\n                  style={{\n                    fontWeight: \"bold\",\n                    color: \"#fff\",\n                    fontSize: 16,\n                  }}\n                >\n                  Direccion\n                </CLabel>\n              </CCardHeader>\n              <CCardBody\n                style={{\n                  overflowY: \"scroll\",\n                  position: \"relative\",\n                  maxHeight: 595,\n                }}\n              >\n                {formsAddress.map((data, index) => (\n                  <CRow>\n                    <CCol style={{ marginBottom: 8 }} xs=\"12\" sm=\"9\">\n                      <CLabel\n                        htmlFor=\"AddressName\"\n                        style={{ fontSize: 14, fontWeight: \"bold\" }}\n                      >\n                        Direccion\n                      </CLabel>\n                      <CInput\n                        id=\"AddressName\"\n                        placeholder=\"\"\n                        required\n                        value={data.AddressName}\n                        onChange={({ target: { value } }) => {\n                          const newAddress = [..._.clone(formsAddress)];\n                          newAddress[index].AddressName = value;\n                          setFormsAddress(newAddress);\n                        }}\n                      />\n                    </CCol>\n                    <CCol style={{ marginBottom: 8 }} xs=\"12\" sm=\"3\">\n                      <CLabel\n                        htmlFor=\"AddressNumber\"\n                        style={{ fontSize: 14, fontWeight: \"bold\" }}\n                      >\n                        Numero\n                      </CLabel>\n                      <CInput\n                        id=\"AddressNumber\"\n                        placeholder=\"0\"\n                        required\n                        value={data.AddressNumber}\n                        onChange={({ target: { value } }) => {\n                          const newAddress = [..._.clone(formsAddress)];\n                          newAddress[index].AddressNumber = value;\n                          setFormsAddress(newAddress);\n                        }}\n                      />\n                    </CCol>\n                    <CCol style={{ marginBottom: 8 }} xs=\"12\" sm=\"4\">\n                      <CLabel\n                        htmlFor=\"AddressBlockNumber\"\n                        style={{ fontSize: 14, fontWeight: \"bold\" }}\n                      >\n                        numero de block\n                      </CLabel>\n                      <CInput\n                        id=\"AddressBlockNumber\"\n                        placeholder=\"0\"\n                        required\n                        value={data.AddressBlockNumber}\n                        onChange={({ target: { value } }) => {\n                          const newAddress = [..._.clone(formsAddress)];\n                          newAddress[index].AddressBlockNumber = value;\n                          setFormsAddress(newAddress);\n                        }}\n                      />\n                    </CCol>\n                    <CCol style={{ marginBottom: 8 }} xs=\"12\" sm=\"4\">\n                      <CLabel\n                        htmlFor=\"AddressFloorNumber\"\n                        style={{ fontSize: 14, fontWeight: \"bold\" }}\n                      >\n                        numero de piso\n                      </CLabel>\n                      <CInput\n                        id=\"AddressFloorNumber\"\n                        placeholder=\"0\"\n                        required\n                        value={data.AddressFloorNumber}\n                        onChange={({ target: { value } }) => {\n                          const newAddress = [..._.clone(formsAddress)];\n                          newAddress[index].AddressFloorNumber = value;\n                          setFormsAddress(newAddress);\n                        }}\n                      />\n                    </CCol>\n                    <CCol style={{ marginBottom: 8 }} xs=\"12\" sm=\"4\">\n                      <CLabel\n                        htmlFor=\"AddressApartmentNumber\"\n                        style={{ fontSize: 14, fontWeight: \"bold\" }}\n                      >\n                        numero de Apartamento\n                      </CLabel>\n                      <CInput\n                        id=\"AddressApartmentNumber\"\n                        placeholder=\"0\"\n                        value={data.AddressApartmentNumber}\n                        required\n                        onChange={({ target: { value } }) => {\n                          const newAddress = [..._.clone(formsAddress)];\n                          newAddress[index].AddressApartmentNumber = value;\n                          setFormsAddress(newAddress);\n                        }}\n                      />\n                    </CCol>\n                    <CCol style={{ marginBottom: 8 }} xs=\"12\" sm=\"12\">\n                      <CLabel\n                        htmlFor=\"zone\"\n                        style={{ fontSize: 14, fontWeight: \"bold\" }}\n                      >\n                        Crear una nueva zona (opcional)\n                      </CLabel>\n                      <CInput\n                        id=\"zone\"\n                        placeholder=\"Escribe una nueva zona\"\n                        value={newZone}\n                        onChange={({ target: { value } }) => setNewZone(value)}\n                        style={{ marginBottom: 8 }}\n                      />\n                      <CButton\n                        variant=\"outline\"\n                        onClick={() =>\n                          newZone !== \"\" &&\n                          createZone({ Name: newZone }).then(() => {\n                            setNewZone(\"\");\n                            handleGetZones();\n                          })\n                        }\n                        style={{\n                          marginBottom: 8,\n                          backgroundColor: colors.primary,\n                        }}\n                      >\n                        <CLabel\n                          style={{\n                            fontSize: 16,\n                            fontWeight: \"bold\",\n                            color: \"#fff\",\n                            margin: 0,\n                          }}\n                        >\n                          Crear zona\n                        </CLabel>\n                      </CButton>\n                      <br />\n                      <CLabel\n                        htmlFor=\"zone\"\n                        style={{ fontSize: 14, fontWeight: \"bold\" }}\n                      >\n                        Selecciona la Zona\n                      </CLabel>\n                      <CSelect\n                        custom\n                        name=\"zone\"\n                        id=\"zone\"\n                        value={data.AddressZoneID}\n                        required\n                        onChange={({ target: { value } }) => {\n                          const newAddress = [..._.clone(formsAddress)];\n                          newAddress[index].AddressZoneID = parseInt(value);\n                          setFormsAddress(newAddress);\n                        }}\n                      >\n                        {zones.map((zone) => (\n                          <option\n                            value={zone.ID}\n                          >{`Zona ${zone.ID} | ${zone.Name}`}</option>\n                        ))}\n                      </CSelect>\n                    </CCol>\n                  </CRow>\n                ))}\n              </CCardBody>\n            </CCard>\n          </CCol>\n          <CCol xs=\"12\" sm=\"12\">\n            <CButton\n              variant=\"outline\"\n              style={{ backgroundColor: colors.primary, borderRadius: 15 }}\n              onClick={(e) => handleCreateUser(e)}\n              size=\"lg\"\n              block\n            >\n              <CLabel\n                style={{\n                  fontSize: 16,\n                  fontWeight: \"bold\",\n                  margin: 0,\n                  color: \"#fff\",\n                }}\n              >\n                {`${!user.ID ? \"Crear\" : \"Editar\"} Usuario`}\n              </CLabel>\n            </CButton>\n          </CCol>\n        </CRow>\n      </CForm>\n\n      {/* modal technicians */}\n      <CModal show={modalTechnicians} onClose={setModalTechnicians}>\n        <CModalHeader closeButton>\n          <CModalTitle>Selecciona el tecnico encargado</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <TechniciansTable\n            setTechnicianID={(value) => setTechnician(value)}\n            TechnicianID={technician}\n            isAllData={true}\n          />\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"success\" onClick={() => setModalTechnicians(false)}>\n            Aceptar\n          </CButton>\n        </CModalFooter>\n      </CModal>\n      {/* modal product */}\n      <CModal show={modalProduct} onClose={setModalProduct} size=\"lg\">\n        <CModalHeader closeButton>\n          <CModalTitle>\n            Selecciona los productos que quieres asignar a este usuario\n          </CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <SelecteProductsTable\n            type={\"select\"}\n            productsSelected={formsProducts}\n            setProductsSelected={setFormsProducts}\n          />\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"success\" onClick={() => setModalProduct(false)}>\n            Aceptar\n          </CButton>\n        </CModalFooter>\n      </CModal>\n      {/* modal Office */}\n      <CModal show={modalOffice} onClose={setModalOffice}>\n        <CModalHeader closeButton>\n          <CModalTitle>Selecciona la sucursal del usuario</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <SelectOfficesTable setOffice={setOffice} office={office} />\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"success\" onClick={() => setModalOffice(false)}>\n            Aceptar\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  );\n};\n\nexport default FormUser;\n"],"sourceRoot":""}